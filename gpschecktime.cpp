#include "gpschecktime.h"
#include "utility.h"
#include <QDateTime>
const char GPS_GPDTM_close[21]={0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x0A,0x00,0x04,0x23,
                                       0xB5,0x62,0x05,0x01,0x02,0x00,0x06,0x01,0x0F,0x38};
const char GPS_GPGBS_close[21] = {0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x09,0x00,0x03,0x21,
                               0xB5,0x62,0x05,0x01,0x02,0x00,0x06,0x01,0x0F,0x38};
const char GPS_GPGGA_close[21] = {0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x00,0x00,0xFA,0x0F,
                               0xB5,0x62,0x05,0x01,0x02,0x00,0x06,0x01,0x0F,0x38};
const char GPS_GPGLL_close[21] = {0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x01,0x00,0xFB,0x11,
                               0xB5,0x62,0x05,0x01,0x02,0x00,0x06,0x01,0x0F,0x38};
const char GPS_GPGLL_open[21] = {0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x01,0x01,0xFC,0x12,
                               0xB5,0x62,0x05,0x01,0x02,0x00,0x06,0x01,0x0F,0x38};
const char GPS_GPGRS_close[21] = {0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x06,0x00,0x00,0x1B,
                                           0xB5,0x62,0x05,0x01,0x02,0x00,0x06,0x01,0x0F,0x38};
const char GPS_GPGSA_close[21] = {0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x02,0x00,0xFC,0x13,
                               0xB5,0x62,0x05,0x01,0x02,0x00,0x06,0x01,0x0F,0x38};
const char GPS_GPGST_close[21] = {0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x07,0x00,0x01,0x1D,
                               0xB5,0x62,0x05,0x01,0x02,0x00,0x06,0x01,0x0F,0x38};
const char GPS_GPGSV_close[21] = {0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x03,0x00,0xFD,0x15,
                               0xB5,0x62,0x05,0x01,0x02,0x00,0x06,0x01,0x0F,0x38};
const char GPS_GPRMC_close[21] = {0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x04,0x00,0xFE,0x17,
                               0xB5,0x62,0x05,0x01,0x02,0x00,0x06,0x01,0x0F,0x38};
const char GPS_GPVTG_close[21] = {0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x05,0x00,0xFF,0x19,
                               0xB5,0x62,0x05,0x01,0x02,0x00,0x06,0x01,0x0F,0x38};
const char GPS_GPZDA_close[21] = {0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x08,0x00,0x02,0x1F,
                               0xB5,0x62,0x05,0x01,0x02,0x00,0x06,0x01,0x0F,0x38};
const char GPS_GPZDA_open[21] = {0xB5,0x62,0x06,0x01,0x03,0x00,0xF0,0x08,0x01,0x03,0x20,
                               0xB5,0x62,0x05,0x01,0x02,0x00,0x06,0x01,0x0F,0x38};
const char GPS_PUBX_close[126]=
{
    0xB5,0x62,0x06,0x01,0x03,0x00,0xF1,0x00,0x00,0xFB,0x12,
  0xB5,0x62,0x06,0x01,0x03,0x00,0xF1,0x01,0x00,0xFC,0x14,
  0xB5,0x62,0x06,0x01,0x03,0x00,0xF1,0x03,0x00,0xFE,0x18,
  0xB5,0x62,0x06,0x01,0x03,0x00,0xF1,0x04,0x00,0xFF,0x1A,
  0xB5,0x62,0x06,0x01,0x03,0x00,0xF1,0x05,0x00,0x00,0x1C,
  0xB5,0x62,0x06,0x01,0x03,0x00,0xF1,0x06,0x00,0x01,0x1E,

  0xB5,0x62,0x05,0x01,0x02,0x00,0x06,0x01,0x0F,0x38,
  0xB5,0x62,0x05,0x00,0x02,0x00,0x06,0x01,0x0E,0x33,
  0xB5,0x62,0x05,0x01,0x02,0x00,0x06,0x01,0x0F,0x38,
    0xB5,0x62,0x05,0x01,0x02,0x00,0x06,0x01,0x0F,0x38,
  0xB5,0x62,0x05,0x00,0x02,0x00,0x06,0x01,0x0E,0x33,
    0xB5,0x62,0x05,0x00,0x02,0x00,0x06,0x01,0x0E,0x33
};
const char GPS_SAVE[21] = {0xB5,0x62,0x06,0x09,0x0D,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,
                        0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x1D,0xAB};
GpsCheckTime::GpsCheckTime(int icom,int ibaud,QObject *parent)
    : QObject(parent)
    ,icom_num_(icom)
    ,com_data_(1024)
    ,pQtSerialport_ptr_(new QSerialPort(this))
    ,b_gps_init_(false)
    ,i_read_pos_(0)
    ,i_write_pos_(0)
    ,icom_baud_(ibaud)
{
    qs_lock_state_ = "V";
}

GpsCheckTime::~GpsCheckTime()
{
  //  com_close();
}

bool GpsCheckTime::com_open()
{
    if(!pQtSerialport_ptr_)
    {
        pQtSerialport_ptr_ = boost::shared_ptr<QSerialPort>(new QSerialPort(this));
    }
    if(pQtSerialport_ptr_->isOpen())
        return true;
    QString sComStr;
#ifdef Q_OS_WIN
    sComStr = QString("COM%1").arg(icom_num_);//str(boost::format("COM%1%")%icom_num_);
#else
   sComStr = QString("/dev/ttyO%1").arg(icom_num_);
#endif
    pQtSerialport_ptr_->setPortName(sComStr);
    if(!pQtSerialport_ptr_->open(QIODevice::ReadWrite))
        return false;
    pQtSerialport_ptr_->setBaudRate(icom_baud_);//QSerialPort::Baud19200
    pQtSerialport_ptr_->setParity(QSerialPort::NoParity);
    pQtSerialport_ptr_->setDataBits(QSerialPort::Data8);
    pQtSerialport_ptr_->setStopBits(QSerialPort::OneStop);
    pQtSerialport_ptr_->setFlowControl(QSerialPort::NoFlowControl);
    connect(pQtSerialport_ptr_.get(),SIGNAL(readyRead()), this, SLOT(handle_com_read()));
    return true;
}

bool GpsCheckTime::com_close()
{  
    if(pQtSerialport_ptr_ && pQtSerialport_ptr_->isOpen())
    {
        disconnect(pQtSerialport_ptr_.get(),SIGNAL(readyRead()), this, SLOT(handle_com_read()));
        pQtSerialport_ptr_->close();
    }
    return true;
}

void GpsCheckTime::init_gps()
{
    if(b_gps_init_)
        return;
    pQtSerialport_ptr_->write(&GPS_GPDTM_close[0],21);
    pQtSerialport_ptr_->write(&GPS_GPGBS_close[0],21);
    pQtSerialport_ptr_->write(&GPS_GPGGA_close[0],21);

    pQtSerialport_ptr_->write(&GPS_GPGLL_open[0],21);
    pQtSerialport_ptr_->write(&GPS_GPGRS_close[0],21);
    pQtSerialport_ptr_->write(&GPS_GPGSA_close[0],21);
    pQtSerialport_ptr_->write(&GPS_GPGST_close[0],21);
    pQtSerialport_ptr_->write(&GPS_GPGSV_close[0],21);
    pQtSerialport_ptr_->write(&GPS_GPRMC_close[0],21);
    pQtSerialport_ptr_->write(&GPS_GPVTG_close[0],21);
    pQtSerialport_ptr_->write(&GPS_GPZDA_open[0],21);
    pQtSerialport_ptr_->write(&GPS_PUBX_close[0],126);
    pQtSerialport_ptr_->write(&GPS_SAVE[0],21);
    b_gps_init_ = true;

}

void GpsCheckTime::handle_com_read()
{
    boost::recursive_mutex::scoped_lock llock(com_data_mutex_);
    i_write_pos_ += pQtSerialport_ptr_->read(com_wr_data(),(1024-i_write_pos_));
    paseGpsdata(com_rd_data());
}
void GpsCheckTime::paseGpsdata(char* qData)
{
    boost::recursive_mutex::scoped_lock llock(com_data_mutex_);
    while(i_read_pos_<i_write_pos_)
    {
       unsigned char cDesh[1]={0};
       cDesh[0]=0x24;
       int hpos = kmp((unsigned char*)qData,get_data_len(),cDesh,1);
       if(hpos<0)
       {
           i_read_pos_=0;
           i_write_pos_=0;
           break;
       }
       unsigned char cDes[2]={0};
       cDes[0]=0x0D;
       cDes[1] = 0x0A;
       int pos = kmp((unsigned char*)qData,get_data_len(),cDes,2);
       if(pos<0)//没有找到/r/n不处理
           break;
       i_read_pos_+=(pos+2);
       if(i_read_pos_==i_write_pos_)
       {
           i_read_pos_=0;
           i_write_pos_=0;
       }
       QString str_gps = QString::fromLocal8Bit(qData);
       QString str_head = str_gps.mid(0,6);
       if(str_head=="$GPZDA")
       {
           gpzda_data(str_gps.mid(7));
       }
       else if(str_head=="$GPGLL")
       {
           gpgll_data(str_gps.mid(7));
       }
       qData=qData+pos+2;
    }
}

void GpsCheckTime::gpzda_data(QString strdata)
{
    int ipos = strdata.indexOf(",");
    if(ipos<=0)
        return;
    QString qsTime=strdata.mid(0,ipos);
    int nextpos = ipos+1;
    ipos = strdata.indexOf(",",nextpos);
    QString qsDate=strdata.mid(nextpos,(ipos-nextpos));
    nextpos = (ipos+1);
    ipos = strdata.indexOf(",",nextpos);
    QString qsMonth=strdata.mid(nextpos,(ipos-nextpos));
    nextpos = (ipos+1);
    ipos = strdata.indexOf(",",nextpos);
    QString qsYear=strdata.mid(nextpos,(ipos-nextpos));
    QString qsGpsDt = qsYear+qsMonth+qsDate+qsTime;
//    QDateTime qdt = QDateTime::fromString(qsGpsDt,"yyyyMMddhhmmss.z");
//    qdt=qdt.addSecs(8*60*60);
    emit S_Gpsdatetime(qsGpsDt);
}

void GpsCheckTime::gpgll_data(QString strdata)
{
    int nextpos = 0;
    int ipos = 0;
    for(int i=0;i<5;++i)
    {
        ipos = strdata.indexOf(",",nextpos);
        if(ipos<=0)
            return;
        nextpos = ipos+1;
    }
    ipos = strdata.indexOf(",",nextpos);
    QString qsState=strdata.mid(nextpos,(ipos-nextpos));
    if(qsState!=qs_lock_state_)
    {
        qs_lock_state_ = qsState;
        if(qs_lock_state_=="A")
            emit S_Gpsgll(true);
        else
            emit S_Gpsgll(false);
    }
}
