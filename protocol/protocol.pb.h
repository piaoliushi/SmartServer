// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef PROTOBUF_protocol_2eproto__INCLUDED
#define PROTOBUF_protocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocol_2eproto();
void protobuf_AssignDesc_protocol_2eproto();
void protobuf_ShutdownFile_protocol_2eproto();

class DevDataNotify;
class DevDataNotify_eCellMsg;
class DevNetStatus;
class DevNetStatusNotify;
class DevWorkStatus;
class DevWorkStatusNotify;
class DevAlarmStatus;
class DevAlarmStatus_eCellAlarmMsg;
class DevAlarmStatusNotify;
class LoginReq;
class HandOverReq;
class DutyLogReq;
class DutyLogAck;
class UserSigninInfo;
class UserInfo;
class LoginAck;
class SignInOutReq;
class SignInOutAck;
class StationWorkingState;
class CheckStationWorkingReq;
class CheckStationWorkingAck;
class CheackStationWorkingNotify;
class LogoutReq;
class LogoutAck;
class TurnOnDevMsg;
class TurnOffDevMsg;
class CommandParam;
class DeviceCommandMsg;
class DeviceCommandResultNotify;
class WebSocketMessage;

enum DevNetStatus_e_NetStatus {
  DevNetStatus_e_NetStatus_ONLINE = 0,
  DevNetStatus_e_NetStatus_OFFLINE = 1,
  DevNetStatus_e_NetStatus_CONNECTING = 2
};
bool DevNetStatus_e_NetStatus_IsValid(int value);
const DevNetStatus_e_NetStatus DevNetStatus_e_NetStatus_e_NetStatus_MIN = DevNetStatus_e_NetStatus_ONLINE;
const DevNetStatus_e_NetStatus DevNetStatus_e_NetStatus_e_NetStatus_MAX = DevNetStatus_e_NetStatus_CONNECTING;
const int DevNetStatus_e_NetStatus_e_NetStatus_ARRAYSIZE = DevNetStatus_e_NetStatus_e_NetStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* DevNetStatus_e_NetStatus_descriptor();
inline const ::std::string& DevNetStatus_e_NetStatus_Name(DevNetStatus_e_NetStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    DevNetStatus_e_NetStatus_descriptor(), value);
}
inline bool DevNetStatus_e_NetStatus_Parse(
    const ::std::string& name, DevNetStatus_e_NetStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DevNetStatus_e_NetStatus>(
    DevNetStatus_e_NetStatus_descriptor(), name, value);
}
enum DevWorkStatus_e_WorkStatus {
  DevWorkStatus_e_WorkStatus_RUNING = 0,
  DevWorkStatus_e_WorkStatus_SHUTDOWN = 1,
  DevWorkStatus_e_WorkStatus_ANTENNA_HOST = 2,
  DevWorkStatus_e_WorkStatus_ANTENNA_BACKUP = 3,
  DevWorkStatus_e_WorkStatus_DETECTING = 4,
  DevWorkStatus_e_WorkStatus_DEV_UNKNOWN = 5
};
bool DevWorkStatus_e_WorkStatus_IsValid(int value);
const DevWorkStatus_e_WorkStatus DevWorkStatus_e_WorkStatus_e_WorkStatus_MIN = DevWorkStatus_e_WorkStatus_RUNING;
const DevWorkStatus_e_WorkStatus DevWorkStatus_e_WorkStatus_e_WorkStatus_MAX = DevWorkStatus_e_WorkStatus_DEV_UNKNOWN;
const int DevWorkStatus_e_WorkStatus_e_WorkStatus_ARRAYSIZE = DevWorkStatus_e_WorkStatus_e_WorkStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* DevWorkStatus_e_WorkStatus_descriptor();
inline const ::std::string& DevWorkStatus_e_WorkStatus_Name(DevWorkStatus_e_WorkStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    DevWorkStatus_e_WorkStatus_descriptor(), value);
}
inline bool DevWorkStatus_e_WorkStatus_Parse(
    const ::std::string& name, DevWorkStatus_e_WorkStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DevWorkStatus_e_WorkStatus>(
    DevWorkStatus_e_WorkStatus_descriptor(), name, value);
}
enum e_ErrorCode {
  EC_OK = 0,
  EC_FAILED = 1,
  EC_USR_NOT_FOUND = 2,
  EC_USR_NOT_PERMISSION = 3,
  EC_USR_PSW_ERROR = 4,
  EC_USR_REPEAT_LOGIN = 5,
  EC_NET_ERROR = 6,
  EC_LOGOUT_FAILED = 7,
  EC_CONFIGREQ_FAILED = 8,
  EC_TURNON_FAILED = 9,
  EC_TURNOFF_FAILED = 10,
  EC_ANTENNA_HTOB_FAILED = 11,
  EC_ANTENNA_BTOH_FAILED = 12,
  EC_DEVICE_NOT_FOUND = 13,
  EC_OBJECT_NULL = 14,
  EC_OPR_ON_GOING = 15,
  EC_SEND_SMS_MSG_FAILED = 16,
  EC_DEV_DISCONNECTED = 17,
  EC_CMD_SEND_SUCCEED = 18,
  EC_UNKNOWN = 19,
  EC_MSG_HANDEL_OBJ_NULL = 20,
  EC_ATTENA_POS_ERROR = 21,
  EC_NO_ALLOW_EXCUTE = 22,
  EC_NO_ALLOW_SWITCH_ATTENA = 23,
  EC_DETECT_WAIT_ATTENA = 24,
  EC_DETECT_RUN_STATE = 25,
  EC_CMD_FILURE_TIMEOUT = 26,
  EC_CMD_HANDOVER_996 = 27,
  EC_DEV_RUN_OK_CANCEL_SEND_CMD = 28,
  EC_NO_ALLOW_SWITCH_ATTENA_AUTO = 29,
  EC_CMD_CODE_NOT_FOUND = 30,
  EC_UNFINISHED_CMD_EXIST = 31,
  EC_DEV_RUN_SHUTDOWN_CANCEL_SEND_CMD = 32,
  EC_ANTEENA_HOST_CMD_CANCEL = 33,
  EC_ANTEENA_BACKUP_CMD_CANCEL = 34,
  EC_RELATE_DEV_TURNON_CMD_CANCEL = 35,
  EC_RELATE_DEV_TURNOFF_CMD_CANCEL = 36,
  EC_RELATE_DEV_996_ONEKEY_TURNON_CMD_CANCEL = 37,
  EC_RELATE_DEV_996_ONEKEY_TURNOFF_CMD_CANCEL = 38,
  EC_RELATE_DEV_SOFT_ONEKEY_TURNON_CMD_CANCEL = 39,
  EC_RELATE_DEV_SWITCH_ANTTENA_CMD_CANCEL = 40,
  EC_RELATE_DEV_AUTO_SWITCH_BACKUP_CMD_CANCEL = 41,
  EC_UNFINISHED_DEV_TURNON_CMD_CANCEL = 42,
  EC_UNFINISHED_DEV_TURNOFF_CMD_CANCEL = 43,
  EC_UNFINISHED_DEV_996_ONEKEY_TURNON_CMD_CANCEL = 44,
  EC_UNFINISHED_DEV_SOFT_ONEKEY_TURNON_CMD_CANCEL = 45,
  EC_UNFINISHED_DEV_SWITCH_ANTTENA_CMD_CANCEL = 46,
  EC_UNFINISHED_DEV_996_ONEKEY_TURNOFF_CMD_CANCEL = 47,
  EC_UNFINISHED_AUTO_SWITCH_BACKUP_CMD_CANCEL = 48,
  EC_CUR_HOST_RUN_SWITCH_CMD_CANCEL = 49,
  EC_CUR_BACKUP_RUN_SWITCH_CMD_CANCEL = 50
};
bool e_ErrorCode_IsValid(int value);
const e_ErrorCode e_ErrorCode_MIN = EC_OK;
const e_ErrorCode e_ErrorCode_MAX = EC_CUR_BACKUP_RUN_SWITCH_CMD_CANCEL;
const int e_ErrorCode_ARRAYSIZE = e_ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_ErrorCode_descriptor();
inline const ::std::string& e_ErrorCode_Name(e_ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_ErrorCode_descriptor(), value);
}
inline bool e_ErrorCode_Parse(
    const ::std::string& name, e_ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_ErrorCode>(
    e_ErrorCode_descriptor(), name, value);
}
enum e_CellType {
  DIGITAL = 0,
  ANALOG = 1
};
bool e_CellType_IsValid(int value);
const e_CellType e_CellType_MIN = DIGITAL;
const e_CellType e_CellType_MAX = ANALOG;
const int e_CellType_ARRAYSIZE = e_CellType_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_CellType_descriptor();
inline const ::std::string& e_CellType_Name(e_CellType value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_CellType_descriptor(), value);
}
inline bool e_CellType_Parse(
    const ::std::string& name, e_CellType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_CellType>(
    e_CellType_descriptor(), name, value);
}
enum e_AlarmStatus {
  UPPER = 0,
  LOWER = 1,
  UPUPER = 2,
  LOWLOWER = 3,
  STATE = 4,
  DEVICE = 5,
  RESUME = 6
};
bool e_AlarmStatus_IsValid(int value);
const e_AlarmStatus e_AlarmStatus_MIN = UPPER;
const e_AlarmStatus e_AlarmStatus_MAX = RESUME;
const int e_AlarmStatus_ARRAYSIZE = e_AlarmStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_AlarmStatus_descriptor();
inline const ::std::string& e_AlarmStatus_Name(e_AlarmStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_AlarmStatus_descriptor(), value);
}
inline bool e_AlarmStatus_Parse(
    const ::std::string& name, e_AlarmStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_AlarmStatus>(
    e_AlarmStatus_descriptor(), name, value);
}
enum e_AlarmMod {
  MOD_CELL = 0,
  MOD_OTHER = 1
};
bool e_AlarmMod_IsValid(int value);
const e_AlarmMod e_AlarmMod_MIN = MOD_CELL;
const e_AlarmMod e_AlarmMod_MAX = MOD_OTHER;
const int e_AlarmMod_ARRAYSIZE = e_AlarmMod_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_AlarmMod_descriptor();
inline const ::std::string& e_AlarmMod_Name(e_AlarmMod value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_AlarmMod_descriptor(), value);
}
inline bool e_AlarmMod_Parse(
    const ::std::string& name, e_AlarmMod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_AlarmMod>(
    e_AlarmMod_descriptor(), name, value);
}
// ===================================================================

class DevDataNotify_eCellMsg : public ::google::protobuf::Message {
 public:
  DevDataNotify_eCellMsg();
  virtual ~DevDataNotify_eCellMsg();

  DevDataNotify_eCellMsg(const DevDataNotify_eCellMsg& from);

  inline DevDataNotify_eCellMsg& operator=(const DevDataNotify_eCellMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DevDataNotify_eCellMsg& default_instance();

  void Swap(DevDataNotify_eCellMsg* other);

  // implements Message ----------------------------------------------

  DevDataNotify_eCellMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DevDataNotify_eCellMsg& from);
  void MergeFrom(const DevDataNotify_eCellMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 sCellId = 1;
  inline bool has_scellid() const;
  inline void clear_scellid();
  static const int kSCellIdFieldNumber = 1;
  inline ::google::protobuf::int32 scellid() const;
  inline void set_scellid(::google::protobuf::int32 value);

  // required .e_CellType eCellType = 2;
  inline bool has_ecelltype() const;
  inline void clear_ecelltype();
  static const int kECellTypeFieldNumber = 2;
  inline ::e_CellType ecelltype() const;
  inline void set_ecelltype(::e_CellType value);

  // optional string sCellName = 3;
  inline bool has_scellname() const;
  inline void clear_scellname();
  static const int kSCellNameFieldNumber = 3;
  inline const ::std::string& scellname() const;
  inline void set_scellname(const ::std::string& value);
  inline void set_scellname(const char* value);
  inline void set_scellname(const char* value, size_t size);
  inline ::std::string* mutable_scellname();
  inline ::std::string* release_scellname();
  inline void set_allocated_scellname(::std::string* scellname);

  // optional string sCellValue = 4;
  inline bool has_scellvalue() const;
  inline void clear_scellvalue();
  static const int kSCellValueFieldNumber = 4;
  inline const ::std::string& scellvalue() const;
  inline void set_scellvalue(const ::std::string& value);
  inline void set_scellvalue(const char* value);
  inline void set_scellvalue(const char* value, size_t size);
  inline ::std::string* mutable_scellvalue();
  inline ::std::string* release_scellvalue();
  inline void set_allocated_scellvalue(::std::string* scellvalue);

  // optional bytes bAudioValue = 5;
  inline bool has_baudiovalue() const;
  inline void clear_baudiovalue();
  static const int kBAudioValueFieldNumber = 5;
  inline const ::std::string& baudiovalue() const;
  inline void set_baudiovalue(const ::std::string& value);
  inline void set_baudiovalue(const char* value);
  inline void set_baudiovalue(const void* value, size_t size);
  inline ::std::string* mutable_baudiovalue();
  inline ::std::string* release_baudiovalue();
  inline void set_allocated_baudiovalue(::std::string* baudiovalue);

  // @@protoc_insertion_point(class_scope:DevDataNotify.eCellMsg)
 private:
  inline void set_has_scellid();
  inline void clear_has_scellid();
  inline void set_has_ecelltype();
  inline void clear_has_ecelltype();
  inline void set_has_scellname();
  inline void clear_has_scellname();
  inline void set_has_scellvalue();
  inline void clear_has_scellvalue();
  inline void set_has_baudiovalue();
  inline void clear_has_baudiovalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 scellid_;
  int ecelltype_;
  ::std::string* scellname_;
  ::std::string* scellvalue_;
  ::std::string* baudiovalue_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static DevDataNotify_eCellMsg* default_instance_;
};
// -------------------------------------------------------------------

class DevDataNotify : public ::google::protobuf::Message {
 public:
  DevDataNotify();
  virtual ~DevDataNotify();

  DevDataNotify(const DevDataNotify& from);

  inline DevDataNotify& operator=(const DevDataNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DevDataNotify& default_instance();

  void Swap(DevDataNotify* other);

  // implements Message ----------------------------------------------

  DevDataNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DevDataNotify& from);
  void MergeFrom(const DevDataNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DevDataNotify_eCellMsg eCellMsg;

  // accessors -------------------------------------------------------

  // required string sStationId = 1;
  inline bool has_sstationid() const;
  inline void clear_sstationid();
  static const int kSStationIdFieldNumber = 1;
  inline const ::std::string& sstationid() const;
  inline void set_sstationid(const ::std::string& value);
  inline void set_sstationid(const char* value);
  inline void set_sstationid(const char* value, size_t size);
  inline ::std::string* mutable_sstationid();
  inline ::std::string* release_sstationid();
  inline void set_allocated_sstationid(::std::string* sstationid);

  // required string sDevId = 2;
  inline bool has_sdevid() const;
  inline void clear_sdevid();
  static const int kSDevIdFieldNumber = 2;
  inline const ::std::string& sdevid() const;
  inline void set_sdevid(const ::std::string& value);
  inline void set_sdevid(const char* value);
  inline void set_sdevid(const char* value, size_t size);
  inline ::std::string* mutable_sdevid();
  inline ::std::string* release_sdevid();
  inline void set_allocated_sdevid(::std::string* sdevid);

  // optional string sDevName = 3;
  inline bool has_sdevname() const;
  inline void clear_sdevname();
  static const int kSDevNameFieldNumber = 3;
  inline const ::std::string& sdevname() const;
  inline void set_sdevname(const ::std::string& value);
  inline void set_sdevname(const char* value);
  inline void set_sdevname(const char* value, size_t size);
  inline ::std::string* mutable_sdevname();
  inline ::std::string* release_sdevname();
  inline void set_allocated_sdevname(::std::string* sdevname);

  // optional int32 eDevType = 4;
  inline bool has_edevtype() const;
  inline void clear_edevtype();
  static const int kEDevTypeFieldNumber = 4;
  inline ::google::protobuf::int32 edevtype() const;
  inline void set_edevtype(::google::protobuf::int32 value);

  // repeated .DevDataNotify.eCellMsg cCellData = 5;
  inline int ccelldata_size() const;
  inline void clear_ccelldata();
  static const int kCCellDataFieldNumber = 5;
  inline const ::DevDataNotify_eCellMsg& ccelldata(int index) const;
  inline ::DevDataNotify_eCellMsg* mutable_ccelldata(int index);
  inline ::DevDataNotify_eCellMsg* add_ccelldata();
  inline const ::google::protobuf::RepeatedPtrField< ::DevDataNotify_eCellMsg >&
      ccelldata() const;
  inline ::google::protobuf::RepeatedPtrField< ::DevDataNotify_eCellMsg >*
      mutable_ccelldata();

  // @@protoc_insertion_point(class_scope:DevDataNotify)
 private:
  inline void set_has_sstationid();
  inline void clear_has_sstationid();
  inline void set_has_sdevid();
  inline void clear_has_sdevid();
  inline void set_has_sdevname();
  inline void clear_has_sdevname();
  inline void set_has_edevtype();
  inline void clear_has_edevtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sstationid_;
  ::std::string* sdevid_;
  ::std::string* sdevname_;
  ::google::protobuf::RepeatedPtrField< ::DevDataNotify_eCellMsg > ccelldata_;
  ::google::protobuf::int32 edevtype_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static DevDataNotify* default_instance_;
};
// -------------------------------------------------------------------

class DevNetStatus : public ::google::protobuf::Message {
 public:
  DevNetStatus();
  virtual ~DevNetStatus();

  DevNetStatus(const DevNetStatus& from);

  inline DevNetStatus& operator=(const DevNetStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DevNetStatus& default_instance();

  void Swap(DevNetStatus* other);

  // implements Message ----------------------------------------------

  DevNetStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DevNetStatus& from);
  void MergeFrom(const DevNetStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DevNetStatus_e_NetStatus e_NetStatus;
  static const e_NetStatus ONLINE = DevNetStatus_e_NetStatus_ONLINE;
  static const e_NetStatus OFFLINE = DevNetStatus_e_NetStatus_OFFLINE;
  static const e_NetStatus CONNECTING = DevNetStatus_e_NetStatus_CONNECTING;
  static inline bool e_NetStatus_IsValid(int value) {
    return DevNetStatus_e_NetStatus_IsValid(value);
  }
  static const e_NetStatus e_NetStatus_MIN =
    DevNetStatus_e_NetStatus_e_NetStatus_MIN;
  static const e_NetStatus e_NetStatus_MAX =
    DevNetStatus_e_NetStatus_e_NetStatus_MAX;
  static const int e_NetStatus_ARRAYSIZE =
    DevNetStatus_e_NetStatus_e_NetStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  e_NetStatus_descriptor() {
    return DevNetStatus_e_NetStatus_descriptor();
  }
  static inline const ::std::string& e_NetStatus_Name(e_NetStatus value) {
    return DevNetStatus_e_NetStatus_Name(value);
  }
  static inline bool e_NetStatus_Parse(const ::std::string& name,
      e_NetStatus* value) {
    return DevNetStatus_e_NetStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string sStationId = 1;
  inline bool has_sstationid() const;
  inline void clear_sstationid();
  static const int kSStationIdFieldNumber = 1;
  inline const ::std::string& sstationid() const;
  inline void set_sstationid(const ::std::string& value);
  inline void set_sstationid(const char* value);
  inline void set_sstationid(const char* value, size_t size);
  inline ::std::string* mutable_sstationid();
  inline ::std::string* release_sstationid();
  inline void set_allocated_sstationid(::std::string* sstationid);

  // required string sDevId = 2;
  inline bool has_sdevid() const;
  inline void clear_sdevid();
  static const int kSDevIdFieldNumber = 2;
  inline const ::std::string& sdevid() const;
  inline void set_sdevid(const ::std::string& value);
  inline void set_sdevid(const char* value);
  inline void set_sdevid(const char* value, size_t size);
  inline ::std::string* mutable_sdevid();
  inline ::std::string* release_sdevid();
  inline void set_allocated_sdevid(::std::string* sdevid);

  // optional string sDevName = 3;
  inline bool has_sdevname() const;
  inline void clear_sdevname();
  static const int kSDevNameFieldNumber = 3;
  inline const ::std::string& sdevname() const;
  inline void set_sdevname(const ::std::string& value);
  inline void set_sdevname(const char* value);
  inline void set_sdevname(const char* value, size_t size);
  inline ::std::string* mutable_sdevname();
  inline ::std::string* release_sdevname();
  inline void set_allocated_sdevname(::std::string* sdevname);

  // optional int32 eDevType = 4;
  inline bool has_edevtype() const;
  inline void clear_edevtype();
  static const int kEDevTypeFieldNumber = 4;
  inline ::google::protobuf::int32 edevtype() const;
  inline void set_edevtype(::google::protobuf::int32 value);

  // optional .DevNetStatus.e_NetStatus eNetStatus = 5;
  inline bool has_enetstatus() const;
  inline void clear_enetstatus();
  static const int kENetStatusFieldNumber = 5;
  inline ::DevNetStatus_e_NetStatus enetstatus() const;
  inline void set_enetstatus(::DevNetStatus_e_NetStatus value);

  // @@protoc_insertion_point(class_scope:DevNetStatus)
 private:
  inline void set_has_sstationid();
  inline void clear_has_sstationid();
  inline void set_has_sdevid();
  inline void clear_has_sdevid();
  inline void set_has_sdevname();
  inline void clear_has_sdevname();
  inline void set_has_edevtype();
  inline void clear_has_edevtype();
  inline void set_has_enetstatus();
  inline void clear_has_enetstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sstationid_;
  ::std::string* sdevid_;
  ::std::string* sdevname_;
  ::google::protobuf::int32 edevtype_;
  int enetstatus_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static DevNetStatus* default_instance_;
};
// -------------------------------------------------------------------

class DevNetStatusNotify : public ::google::protobuf::Message {
 public:
  DevNetStatusNotify();
  virtual ~DevNetStatusNotify();

  DevNetStatusNotify(const DevNetStatusNotify& from);

  inline DevNetStatusNotify& operator=(const DevNetStatusNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DevNetStatusNotify& default_instance();

  void Swap(DevNetStatusNotify* other);

  // implements Message ----------------------------------------------

  DevNetStatusNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DevNetStatusNotify& from);
  void MergeFrom(const DevNetStatusNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DevNetStatus cDevCurNetStatus = 1;
  inline int cdevcurnetstatus_size() const;
  inline void clear_cdevcurnetstatus();
  static const int kCDevCurNetStatusFieldNumber = 1;
  inline const ::DevNetStatus& cdevcurnetstatus(int index) const;
  inline ::DevNetStatus* mutable_cdevcurnetstatus(int index);
  inline ::DevNetStatus* add_cdevcurnetstatus();
  inline const ::google::protobuf::RepeatedPtrField< ::DevNetStatus >&
      cdevcurnetstatus() const;
  inline ::google::protobuf::RepeatedPtrField< ::DevNetStatus >*
      mutable_cdevcurnetstatus();

  // @@protoc_insertion_point(class_scope:DevNetStatusNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DevNetStatus > cdevcurnetstatus_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static DevNetStatusNotify* default_instance_;
};
// -------------------------------------------------------------------

class DevWorkStatus : public ::google::protobuf::Message {
 public:
  DevWorkStatus();
  virtual ~DevWorkStatus();

  DevWorkStatus(const DevWorkStatus& from);

  inline DevWorkStatus& operator=(const DevWorkStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DevWorkStatus& default_instance();

  void Swap(DevWorkStatus* other);

  // implements Message ----------------------------------------------

  DevWorkStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DevWorkStatus& from);
  void MergeFrom(const DevWorkStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DevWorkStatus_e_WorkStatus e_WorkStatus;
  static const e_WorkStatus RUNING = DevWorkStatus_e_WorkStatus_RUNING;
  static const e_WorkStatus SHUTDOWN = DevWorkStatus_e_WorkStatus_SHUTDOWN;
  static const e_WorkStatus ANTENNA_HOST = DevWorkStatus_e_WorkStatus_ANTENNA_HOST;
  static const e_WorkStatus ANTENNA_BACKUP = DevWorkStatus_e_WorkStatus_ANTENNA_BACKUP;
  static const e_WorkStatus DETECTING = DevWorkStatus_e_WorkStatus_DETECTING;
  static const e_WorkStatus DEV_UNKNOWN = DevWorkStatus_e_WorkStatus_DEV_UNKNOWN;
  static inline bool e_WorkStatus_IsValid(int value) {
    return DevWorkStatus_e_WorkStatus_IsValid(value);
  }
  static const e_WorkStatus e_WorkStatus_MIN =
    DevWorkStatus_e_WorkStatus_e_WorkStatus_MIN;
  static const e_WorkStatus e_WorkStatus_MAX =
    DevWorkStatus_e_WorkStatus_e_WorkStatus_MAX;
  static const int e_WorkStatus_ARRAYSIZE =
    DevWorkStatus_e_WorkStatus_e_WorkStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  e_WorkStatus_descriptor() {
    return DevWorkStatus_e_WorkStatus_descriptor();
  }
  static inline const ::std::string& e_WorkStatus_Name(e_WorkStatus value) {
    return DevWorkStatus_e_WorkStatus_Name(value);
  }
  static inline bool e_WorkStatus_Parse(const ::std::string& name,
      e_WorkStatus* value) {
    return DevWorkStatus_e_WorkStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string sStationId = 1;
  inline bool has_sstationid() const;
  inline void clear_sstationid();
  static const int kSStationIdFieldNumber = 1;
  inline const ::std::string& sstationid() const;
  inline void set_sstationid(const ::std::string& value);
  inline void set_sstationid(const char* value);
  inline void set_sstationid(const char* value, size_t size);
  inline ::std::string* mutable_sstationid();
  inline ::std::string* release_sstationid();
  inline void set_allocated_sstationid(::std::string* sstationid);

  // required string sDevId = 2;
  inline bool has_sdevid() const;
  inline void clear_sdevid();
  static const int kSDevIdFieldNumber = 2;
  inline const ::std::string& sdevid() const;
  inline void set_sdevid(const ::std::string& value);
  inline void set_sdevid(const char* value);
  inline void set_sdevid(const char* value, size_t size);
  inline ::std::string* mutable_sdevid();
  inline ::std::string* release_sdevid();
  inline void set_allocated_sdevid(::std::string* sdevid);

  // optional string sDevName = 3;
  inline bool has_sdevname() const;
  inline void clear_sdevname();
  static const int kSDevNameFieldNumber = 3;
  inline const ::std::string& sdevname() const;
  inline void set_sdevname(const ::std::string& value);
  inline void set_sdevname(const char* value);
  inline void set_sdevname(const char* value, size_t size);
  inline ::std::string* mutable_sdevname();
  inline ::std::string* release_sdevname();
  inline void set_allocated_sdevname(::std::string* sdevname);

  // optional int32 eDevType = 4;
  inline bool has_edevtype() const;
  inline void clear_edevtype();
  static const int kEDevTypeFieldNumber = 4;
  inline ::google::protobuf::int32 edevtype() const;
  inline void set_edevtype(::google::protobuf::int32 value);

  // optional .DevWorkStatus.e_WorkStatus eWorkStatus = 5;
  inline bool has_eworkstatus() const;
  inline void clear_eworkstatus();
  static const int kEWorkStatusFieldNumber = 5;
  inline ::DevWorkStatus_e_WorkStatus eworkstatus() const;
  inline void set_eworkstatus(::DevWorkStatus_e_WorkStatus value);

  // @@protoc_insertion_point(class_scope:DevWorkStatus)
 private:
  inline void set_has_sstationid();
  inline void clear_has_sstationid();
  inline void set_has_sdevid();
  inline void clear_has_sdevid();
  inline void set_has_sdevname();
  inline void clear_has_sdevname();
  inline void set_has_edevtype();
  inline void clear_has_edevtype();
  inline void set_has_eworkstatus();
  inline void clear_has_eworkstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sstationid_;
  ::std::string* sdevid_;
  ::std::string* sdevname_;
  ::google::protobuf::int32 edevtype_;
  int eworkstatus_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static DevWorkStatus* default_instance_;
};
// -------------------------------------------------------------------

class DevWorkStatusNotify : public ::google::protobuf::Message {
 public:
  DevWorkStatusNotify();
  virtual ~DevWorkStatusNotify();

  DevWorkStatusNotify(const DevWorkStatusNotify& from);

  inline DevWorkStatusNotify& operator=(const DevWorkStatusNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DevWorkStatusNotify& default_instance();

  void Swap(DevWorkStatusNotify* other);

  // implements Message ----------------------------------------------

  DevWorkStatusNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DevWorkStatusNotify& from);
  void MergeFrom(const DevWorkStatusNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DevWorkStatus cDevCurWorkStatus = 1;
  inline int cdevcurworkstatus_size() const;
  inline void clear_cdevcurworkstatus();
  static const int kCDevCurWorkStatusFieldNumber = 1;
  inline const ::DevWorkStatus& cdevcurworkstatus(int index) const;
  inline ::DevWorkStatus* mutable_cdevcurworkstatus(int index);
  inline ::DevWorkStatus* add_cdevcurworkstatus();
  inline const ::google::protobuf::RepeatedPtrField< ::DevWorkStatus >&
      cdevcurworkstatus() const;
  inline ::google::protobuf::RepeatedPtrField< ::DevWorkStatus >*
      mutable_cdevcurworkstatus();

  // @@protoc_insertion_point(class_scope:DevWorkStatusNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DevWorkStatus > cdevcurworkstatus_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static DevWorkStatusNotify* default_instance_;
};
// -------------------------------------------------------------------

class DevAlarmStatus_eCellAlarmMsg : public ::google::protobuf::Message {
 public:
  DevAlarmStatus_eCellAlarmMsg();
  virtual ~DevAlarmStatus_eCellAlarmMsg();

  DevAlarmStatus_eCellAlarmMsg(const DevAlarmStatus_eCellAlarmMsg& from);

  inline DevAlarmStatus_eCellAlarmMsg& operator=(const DevAlarmStatus_eCellAlarmMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DevAlarmStatus_eCellAlarmMsg& default_instance();

  void Swap(DevAlarmStatus_eCellAlarmMsg* other);

  // implements Message ----------------------------------------------

  DevAlarmStatus_eCellAlarmMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DevAlarmStatus_eCellAlarmMsg& from);
  void MergeFrom(const DevAlarmStatus_eCellAlarmMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 sCellId = 1;
  inline bool has_scellid() const;
  inline void clear_scellid();
  static const int kSCellIdFieldNumber = 1;
  inline ::google::protobuf::int32 scellid() const;
  inline void set_scellid(::google::protobuf::int32 value);

  // optional string sCellName = 2;
  inline bool has_scellname() const;
  inline void clear_scellname();
  static const int kSCellNameFieldNumber = 2;
  inline const ::std::string& scellname() const;
  inline void set_scellname(const ::std::string& value);
  inline void set_scellname(const char* value);
  inline void set_scellname(const char* value, size_t size);
  inline ::std::string* mutable_scellname();
  inline ::std::string* release_scellname();
  inline void set_allocated_scellname(::std::string* scellname);

  // optional .e_AlarmStatus cCellStatus = 3;
  inline bool has_ccellstatus() const;
  inline void clear_ccellstatus();
  static const int kCCellStatusFieldNumber = 3;
  inline ::e_AlarmStatus ccellstatus() const;
  inline void set_ccellstatus(::e_AlarmStatus value);

  // optional string sStartTime = 4;
  inline bool has_sstarttime() const;
  inline void clear_sstarttime();
  static const int kSStartTimeFieldNumber = 4;
  inline const ::std::string& sstarttime() const;
  inline void set_sstarttime(const ::std::string& value);
  inline void set_sstarttime(const char* value);
  inline void set_sstarttime(const char* value, size_t size);
  inline ::std::string* mutable_sstarttime();
  inline ::std::string* release_sstarttime();
  inline void set_allocated_sstarttime(::std::string* sstarttime);

  // optional string sDesp = 5;
  inline bool has_sdesp() const;
  inline void clear_sdesp();
  static const int kSDespFieldNumber = 5;
  inline const ::std::string& sdesp() const;
  inline void set_sdesp(const ::std::string& value);
  inline void set_sdesp(const char* value);
  inline void set_sdesp(const char* value, size_t size);
  inline ::std::string* mutable_sdesp();
  inline ::std::string* release_sdesp();
  inline void set_allocated_sdesp(::std::string* sdesp);

  // optional int32 nAlarmLevel = 6;
  inline bool has_nalarmlevel() const;
  inline void clear_nalarmlevel();
  static const int kNAlarmLevelFieldNumber = 6;
  inline ::google::protobuf::int32 nalarmlevel() const;
  inline void set_nalarmlevel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DevAlarmStatus.eCellAlarmMsg)
 private:
  inline void set_has_scellid();
  inline void clear_has_scellid();
  inline void set_has_scellname();
  inline void clear_has_scellname();
  inline void set_has_ccellstatus();
  inline void clear_has_ccellstatus();
  inline void set_has_sstarttime();
  inline void clear_has_sstarttime();
  inline void set_has_sdesp();
  inline void clear_has_sdesp();
  inline void set_has_nalarmlevel();
  inline void clear_has_nalarmlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* scellname_;
  ::google::protobuf::int32 scellid_;
  int ccellstatus_;
  ::std::string* sstarttime_;
  ::std::string* sdesp_;
  ::google::protobuf::int32 nalarmlevel_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static DevAlarmStatus_eCellAlarmMsg* default_instance_;
};
// -------------------------------------------------------------------

class DevAlarmStatus : public ::google::protobuf::Message {
 public:
  DevAlarmStatus();
  virtual ~DevAlarmStatus();

  DevAlarmStatus(const DevAlarmStatus& from);

  inline DevAlarmStatus& operator=(const DevAlarmStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DevAlarmStatus& default_instance();

  void Swap(DevAlarmStatus* other);

  // implements Message ----------------------------------------------

  DevAlarmStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DevAlarmStatus& from);
  void MergeFrom(const DevAlarmStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DevAlarmStatus_eCellAlarmMsg eCellAlarmMsg;

  // accessors -------------------------------------------------------

  // required string sStationId = 1;
  inline bool has_sstationid() const;
  inline void clear_sstationid();
  static const int kSStationIdFieldNumber = 1;
  inline const ::std::string& sstationid() const;
  inline void set_sstationid(const ::std::string& value);
  inline void set_sstationid(const char* value);
  inline void set_sstationid(const char* value, size_t size);
  inline ::std::string* mutable_sstationid();
  inline ::std::string* release_sstationid();
  inline void set_allocated_sstationid(::std::string* sstationid);

  // required string sDevId = 2;
  inline bool has_sdevid() const;
  inline void clear_sdevid();
  static const int kSDevIdFieldNumber = 2;
  inline const ::std::string& sdevid() const;
  inline void set_sdevid(const ::std::string& value);
  inline void set_sdevid(const char* value);
  inline void set_sdevid(const char* value, size_t size);
  inline ::std::string* mutable_sdevid();
  inline ::std::string* release_sdevid();
  inline void set_allocated_sdevid(::std::string* sdevid);

  // optional string sDevName = 3;
  inline bool has_sdevname() const;
  inline void clear_sdevname();
  static const int kSDevNameFieldNumber = 3;
  inline const ::std::string& sdevname() const;
  inline void set_sdevname(const ::std::string& value);
  inline void set_sdevname(const char* value);
  inline void set_sdevname(const char* value, size_t size);
  inline ::std::string* mutable_sdevname();
  inline ::std::string* release_sdevname();
  inline void set_allocated_sdevname(::std::string* sdevname);

  // optional int32 eDevType = 4;
  inline bool has_edevtype() const;
  inline void clear_edevtype();
  static const int kEDevTypeFieldNumber = 4;
  inline ::google::protobuf::int32 edevtype() const;
  inline void set_edevtype(::google::protobuf::int32 value);

  // optional int32 nAlarmCount = 5;
  inline bool has_nalarmcount() const;
  inline void clear_nalarmcount();
  static const int kNAlarmCountFieldNumber = 5;
  inline ::google::protobuf::int32 nalarmcount() const;
  inline void set_nalarmcount(::google::protobuf::int32 value);

  // optional int32 nAlarmMod = 6;
  inline bool has_nalarmmod() const;
  inline void clear_nalarmmod();
  static const int kNAlarmModFieldNumber = 6;
  inline ::google::protobuf::int32 nalarmmod() const;
  inline void set_nalarmmod(::google::protobuf::int32 value);

  // repeated .DevAlarmStatus.eCellAlarmMsg cCellAlarm = 7;
  inline int ccellalarm_size() const;
  inline void clear_ccellalarm();
  static const int kCCellAlarmFieldNumber = 7;
  inline const ::DevAlarmStatus_eCellAlarmMsg& ccellalarm(int index) const;
  inline ::DevAlarmStatus_eCellAlarmMsg* mutable_ccellalarm(int index);
  inline ::DevAlarmStatus_eCellAlarmMsg* add_ccellalarm();
  inline const ::google::protobuf::RepeatedPtrField< ::DevAlarmStatus_eCellAlarmMsg >&
      ccellalarm() const;
  inline ::google::protobuf::RepeatedPtrField< ::DevAlarmStatus_eCellAlarmMsg >*
      mutable_ccellalarm();

  // @@protoc_insertion_point(class_scope:DevAlarmStatus)
 private:
  inline void set_has_sstationid();
  inline void clear_has_sstationid();
  inline void set_has_sdevid();
  inline void clear_has_sdevid();
  inline void set_has_sdevname();
  inline void clear_has_sdevname();
  inline void set_has_edevtype();
  inline void clear_has_edevtype();
  inline void set_has_nalarmcount();
  inline void clear_has_nalarmcount();
  inline void set_has_nalarmmod();
  inline void clear_has_nalarmmod();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sstationid_;
  ::std::string* sdevid_;
  ::std::string* sdevname_;
  ::google::protobuf::int32 edevtype_;
  ::google::protobuf::int32 nalarmcount_;
  ::google::protobuf::RepeatedPtrField< ::DevAlarmStatus_eCellAlarmMsg > ccellalarm_;
  ::google::protobuf::int32 nalarmmod_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static DevAlarmStatus* default_instance_;
};
// -------------------------------------------------------------------

class DevAlarmStatusNotify : public ::google::protobuf::Message {
 public:
  DevAlarmStatusNotify();
  virtual ~DevAlarmStatusNotify();

  DevAlarmStatusNotify(const DevAlarmStatusNotify& from);

  inline DevAlarmStatusNotify& operator=(const DevAlarmStatusNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DevAlarmStatusNotify& default_instance();

  void Swap(DevAlarmStatusNotify* other);

  // implements Message ----------------------------------------------

  DevAlarmStatusNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DevAlarmStatusNotify& from);
  void MergeFrom(const DevAlarmStatusNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DevAlarmStatus cDevCurAlarmStatus = 1;
  inline int cdevcuralarmstatus_size() const;
  inline void clear_cdevcuralarmstatus();
  static const int kCDevCurAlarmStatusFieldNumber = 1;
  inline const ::DevAlarmStatus& cdevcuralarmstatus(int index) const;
  inline ::DevAlarmStatus* mutable_cdevcuralarmstatus(int index);
  inline ::DevAlarmStatus* add_cdevcuralarmstatus();
  inline const ::google::protobuf::RepeatedPtrField< ::DevAlarmStatus >&
      cdevcuralarmstatus() const;
  inline ::google::protobuf::RepeatedPtrField< ::DevAlarmStatus >*
      mutable_cdevcuralarmstatus();

  // @@protoc_insertion_point(class_scope:DevAlarmStatusNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::DevAlarmStatus > cdevcuralarmstatus_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static DevAlarmStatusNotify* default_instance_;
};
// -------------------------------------------------------------------

class LoginReq : public ::google::protobuf::Message {
 public:
  LoginReq();
  virtual ~LoginReq();

  LoginReq(const LoginReq& from);

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginReq& default_instance();

  void Swap(LoginReq* other);

  // implements Message ----------------------------------------------

  LoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginReq& from);
  void MergeFrom(const LoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sUsrName = 1;
  inline bool has_susrname() const;
  inline void clear_susrname();
  static const int kSUsrNameFieldNumber = 1;
  inline const ::std::string& susrname() const;
  inline void set_susrname(const ::std::string& value);
  inline void set_susrname(const char* value);
  inline void set_susrname(const char* value, size_t size);
  inline ::std::string* mutable_susrname();
  inline ::std::string* release_susrname();
  inline void set_allocated_susrname(::std::string* susrname);

  // optional string sUsrPsw = 2;
  inline bool has_susrpsw() const;
  inline void clear_susrpsw();
  static const int kSUsrPswFieldNumber = 2;
  inline const ::std::string& susrpsw() const;
  inline void set_susrpsw(const ::std::string& value);
  inline void set_susrpsw(const char* value);
  inline void set_susrpsw(const char* value, size_t size);
  inline ::std::string* mutable_susrpsw();
  inline ::std::string* release_susrpsw();
  inline void set_allocated_susrpsw(::std::string* susrpsw);

  // @@protoc_insertion_point(class_scope:LoginReq)
 private:
  inline void set_has_susrname();
  inline void clear_has_susrname();
  inline void set_has_susrpsw();
  inline void clear_has_susrpsw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* susrname_;
  ::std::string* susrpsw_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static LoginReq* default_instance_;
};
// -------------------------------------------------------------------

class HandOverReq : public ::google::protobuf::Message {
 public:
  HandOverReq();
  virtual ~HandOverReq();

  HandOverReq(const HandOverReq& from);

  inline HandOverReq& operator=(const HandOverReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HandOverReq& default_instance();

  void Swap(HandOverReq* other);

  // implements Message ----------------------------------------------

  HandOverReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HandOverReq& from);
  void MergeFrom(const HandOverReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sCurUsrName = 1;
  inline bool has_scurusrname() const;
  inline void clear_scurusrname();
  static const int kSCurUsrNameFieldNumber = 1;
  inline const ::std::string& scurusrname() const;
  inline void set_scurusrname(const ::std::string& value);
  inline void set_scurusrname(const char* value);
  inline void set_scurusrname(const char* value, size_t size);
  inline ::std::string* mutable_scurusrname();
  inline ::std::string* release_scurusrname();
  inline void set_allocated_scurusrname(::std::string* scurusrname);

  // optional string sNewUsrName = 2;
  inline bool has_snewusrname() const;
  inline void clear_snewusrname();
  static const int kSNewUsrNameFieldNumber = 2;
  inline const ::std::string& snewusrname() const;
  inline void set_snewusrname(const ::std::string& value);
  inline void set_snewusrname(const char* value);
  inline void set_snewusrname(const char* value, size_t size);
  inline ::std::string* mutable_snewusrname();
  inline ::std::string* release_snewusrname();
  inline void set_allocated_snewusrname(::std::string* snewusrname);

  // optional string sNewUsrPsw = 3;
  inline bool has_snewusrpsw() const;
  inline void clear_snewusrpsw();
  static const int kSNewUsrPswFieldNumber = 3;
  inline const ::std::string& snewusrpsw() const;
  inline void set_snewusrpsw(const ::std::string& value);
  inline void set_snewusrpsw(const char* value);
  inline void set_snewusrpsw(const char* value, size_t size);
  inline ::std::string* mutable_snewusrpsw();
  inline ::std::string* release_snewusrpsw();
  inline void set_allocated_snewusrpsw(::std::string* snewusrpsw);

  // optional string sContents = 4;
  inline bool has_scontents() const;
  inline void clear_scontents();
  static const int kSContentsFieldNumber = 4;
  inline const ::std::string& scontents() const;
  inline void set_scontents(const ::std::string& value);
  inline void set_scontents(const char* value);
  inline void set_scontents(const char* value, size_t size);
  inline ::std::string* mutable_scontents();
  inline ::std::string* release_scontents();
  inline void set_allocated_scontents(::std::string* scontents);

  // @@protoc_insertion_point(class_scope:HandOverReq)
 private:
  inline void set_has_scurusrname();
  inline void clear_has_scurusrname();
  inline void set_has_snewusrname();
  inline void clear_has_snewusrname();
  inline void set_has_snewusrpsw();
  inline void clear_has_snewusrpsw();
  inline void set_has_scontents();
  inline void clear_has_scontents();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* scurusrname_;
  ::std::string* snewusrname_;
  ::std::string* snewusrpsw_;
  ::std::string* scontents_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static HandOverReq* default_instance_;
};
// -------------------------------------------------------------------

class DutyLogReq : public ::google::protobuf::Message {
 public:
  DutyLogReq();
  virtual ~DutyLogReq();

  DutyLogReq(const DutyLogReq& from);

  inline DutyLogReq& operator=(const DutyLogReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DutyLogReq& default_instance();

  void Swap(DutyLogReq* other);

  // implements Message ----------------------------------------------

  DutyLogReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DutyLogReq& from);
  void MergeFrom(const DutyLogReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sCurUsrNumber = 1;
  inline bool has_scurusrnumber() const;
  inline void clear_scurusrnumber();
  static const int kSCurUsrNumberFieldNumber = 1;
  inline const ::std::string& scurusrnumber() const;
  inline void set_scurusrnumber(const ::std::string& value);
  inline void set_scurusrnumber(const char* value);
  inline void set_scurusrnumber(const char* value, size_t size);
  inline ::std::string* mutable_scurusrnumber();
  inline ::std::string* release_scurusrnumber();
  inline void set_allocated_scurusrnumber(::std::string* scurusrnumber);

  // optional string sContent = 2;
  inline bool has_scontent() const;
  inline void clear_scontent();
  static const int kSContentFieldNumber = 2;
  inline const ::std::string& scontent() const;
  inline void set_scontent(const ::std::string& value);
  inline void set_scontent(const char* value);
  inline void set_scontent(const char* value, size_t size);
  inline ::std::string* mutable_scontent();
  inline ::std::string* release_scontent();
  inline void set_allocated_scontent(::std::string* scontent);

  // optional int32 nType = 3;
  inline bool has_ntype() const;
  inline void clear_ntype();
  static const int kNTypeFieldNumber = 3;
  inline ::google::protobuf::int32 ntype() const;
  inline void set_ntype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DutyLogReq)
 private:
  inline void set_has_scurusrnumber();
  inline void clear_has_scurusrnumber();
  inline void set_has_scontent();
  inline void clear_has_scontent();
  inline void set_has_ntype();
  inline void clear_has_ntype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* scurusrnumber_;
  ::std::string* scontent_;
  ::google::protobuf::int32 ntype_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static DutyLogReq* default_instance_;
};
// -------------------------------------------------------------------

class DutyLogAck : public ::google::protobuf::Message {
 public:
  DutyLogAck();
  virtual ~DutyLogAck();

  DutyLogAck(const DutyLogAck& from);

  inline DutyLogAck& operator=(const DutyLogAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DutyLogAck& default_instance();

  void Swap(DutyLogAck* other);

  // implements Message ----------------------------------------------

  DutyLogAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DutyLogAck& from);
  void MergeFrom(const DutyLogAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .e_ErrorCode eResult = 1;
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEResultFieldNumber = 1;
  inline ::e_ErrorCode eresult() const;
  inline void set_eresult(::e_ErrorCode value);

  // @@protoc_insertion_point(class_scope:DutyLogAck)
 private:
  inline void set_has_eresult();
  inline void clear_has_eresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int eresult_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static DutyLogAck* default_instance_;
};
// -------------------------------------------------------------------

class UserSigninInfo : public ::google::protobuf::Message {
 public:
  UserSigninInfo();
  virtual ~UserSigninInfo();

  UserSigninInfo(const UserSigninInfo& from);

  inline UserSigninInfo& operator=(const UserSigninInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSigninInfo& default_instance();

  void Swap(UserSigninInfo* other);

  // implements Message ----------------------------------------------

  UserSigninInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserSigninInfo& from);
  void MergeFrom(const UserSigninInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 eUsrLevel = 1;
  inline bool has_eusrlevel() const;
  inline void clear_eusrlevel();
  static const int kEUsrLevelFieldNumber = 1;
  inline ::google::protobuf::int32 eusrlevel() const;
  inline void set_eusrlevel(::google::protobuf::int32 value);

  // optional string UsrNumber = 2;
  inline bool has_usrnumber() const;
  inline void clear_usrnumber();
  static const int kUsrNumberFieldNumber = 2;
  inline const ::std::string& usrnumber() const;
  inline void set_usrnumber(const ::std::string& value);
  inline void set_usrnumber(const char* value);
  inline void set_usrnumber(const char* value, size_t size);
  inline ::std::string* mutable_usrnumber();
  inline ::std::string* release_usrnumber();
  inline void set_allocated_usrnumber(::std::string* usrnumber);

  // optional string UsrName = 3;
  inline bool has_usrname() const;
  inline void clear_usrname();
  static const int kUsrNameFieldNumber = 3;
  inline const ::std::string& usrname() const;
  inline void set_usrname(const ::std::string& value);
  inline void set_usrname(const char* value);
  inline void set_usrname(const char* value, size_t size);
  inline ::std::string* mutable_usrname();
  inline ::std::string* release_usrname();
  inline void set_allocated_usrname(::std::string* usrname);

  // optional string UsrJobNumber = 4;
  inline bool has_usrjobnumber() const;
  inline void clear_usrjobnumber();
  static const int kUsrJobNumberFieldNumber = 4;
  inline const ::std::string& usrjobnumber() const;
  inline void set_usrjobnumber(const ::std::string& value);
  inline void set_usrjobnumber(const char* value);
  inline void set_usrjobnumber(const char* value, size_t size);
  inline ::std::string* mutable_usrjobnumber();
  inline ::std::string* release_usrjobnumber();
  inline void set_allocated_usrjobnumber(::std::string* usrjobnumber);

  // optional string UsrHeadship = 5;
  inline bool has_usrheadship() const;
  inline void clear_usrheadship();
  static const int kUsrHeadshipFieldNumber = 5;
  inline const ::std::string& usrheadship() const;
  inline void set_usrheadship(const ::std::string& value);
  inline void set_usrheadship(const char* value);
  inline void set_usrheadship(const char* value, size_t size);
  inline ::std::string* mutable_usrheadship();
  inline ::std::string* release_usrheadship();
  inline void set_allocated_usrheadship(::std::string* usrheadship);

  // optional string UsrPsw = 6;
  inline bool has_usrpsw() const;
  inline void clear_usrpsw();
  static const int kUsrPswFieldNumber = 6;
  inline const ::std::string& usrpsw() const;
  inline void set_usrpsw(const ::std::string& value);
  inline void set_usrpsw(const char* value);
  inline void set_usrpsw(const char* value, size_t size);
  inline ::std::string* mutable_usrpsw();
  inline ::std::string* release_usrpsw();
  inline void set_allocated_usrpsw(::std::string* usrpsw);

  // optional string SignInTime = 7;
  inline bool has_signintime() const;
  inline void clear_signintime();
  static const int kSignInTimeFieldNumber = 7;
  inline const ::std::string& signintime() const;
  inline void set_signintime(const ::std::string& value);
  inline void set_signintime(const char* value);
  inline void set_signintime(const char* value, size_t size);
  inline ::std::string* mutable_signintime();
  inline ::std::string* release_signintime();
  inline void set_allocated_signintime(::std::string* signintime);

  // @@protoc_insertion_point(class_scope:UserSigninInfo)
 private:
  inline void set_has_eusrlevel();
  inline void clear_has_eusrlevel();
  inline void set_has_usrnumber();
  inline void clear_has_usrnumber();
  inline void set_has_usrname();
  inline void clear_has_usrname();
  inline void set_has_usrjobnumber();
  inline void clear_has_usrjobnumber();
  inline void set_has_usrheadship();
  inline void clear_has_usrheadship();
  inline void set_has_usrpsw();
  inline void clear_has_usrpsw();
  inline void set_has_signintime();
  inline void clear_has_signintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* usrnumber_;
  ::std::string* usrname_;
  ::std::string* usrjobnumber_;
  ::std::string* usrheadship_;
  ::std::string* usrpsw_;
  ::std::string* signintime_;
  ::google::protobuf::int32 eusrlevel_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static UserSigninInfo* default_instance_;
};
// -------------------------------------------------------------------

class UserInfo : public ::google::protobuf::Message {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  void Swap(UserInfo* other);

  // implements Message ----------------------------------------------

  UserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 eUsrLevel = 1;
  inline bool has_eusrlevel() const;
  inline void clear_eusrlevel();
  static const int kEUsrLevelFieldNumber = 1;
  inline ::google::protobuf::int32 eusrlevel() const;
  inline void set_eusrlevel(::google::protobuf::int32 value);

  // optional string UsrNumber = 2;
  inline bool has_usrnumber() const;
  inline void clear_usrnumber();
  static const int kUsrNumberFieldNumber = 2;
  inline const ::std::string& usrnumber() const;
  inline void set_usrnumber(const ::std::string& value);
  inline void set_usrnumber(const char* value);
  inline void set_usrnumber(const char* value, size_t size);
  inline ::std::string* mutable_usrnumber();
  inline ::std::string* release_usrnumber();
  inline void set_allocated_usrnumber(::std::string* usrnumber);

  // optional string UsrName = 3;
  inline bool has_usrname() const;
  inline void clear_usrname();
  static const int kUsrNameFieldNumber = 3;
  inline const ::std::string& usrname() const;
  inline void set_usrname(const ::std::string& value);
  inline void set_usrname(const char* value);
  inline void set_usrname(const char* value, size_t size);
  inline ::std::string* mutable_usrname();
  inline ::std::string* release_usrname();
  inline void set_allocated_usrname(::std::string* usrname);

  // optional string UsrJobNumber = 4;
  inline bool has_usrjobnumber() const;
  inline void clear_usrjobnumber();
  static const int kUsrJobNumberFieldNumber = 4;
  inline const ::std::string& usrjobnumber() const;
  inline void set_usrjobnumber(const ::std::string& value);
  inline void set_usrjobnumber(const char* value);
  inline void set_usrjobnumber(const char* value, size_t size);
  inline ::std::string* mutable_usrjobnumber();
  inline ::std::string* release_usrjobnumber();
  inline void set_allocated_usrjobnumber(::std::string* usrjobnumber);

  // optional string UsrHeadship = 5;
  inline bool has_usrheadship() const;
  inline void clear_usrheadship();
  static const int kUsrHeadshipFieldNumber = 5;
  inline const ::std::string& usrheadship() const;
  inline void set_usrheadship(const ::std::string& value);
  inline void set_usrheadship(const char* value);
  inline void set_usrheadship(const char* value, size_t size);
  inline ::std::string* mutable_usrheadship();
  inline ::std::string* release_usrheadship();
  inline void set_allocated_usrheadship(::std::string* usrheadship);

  // @@protoc_insertion_point(class_scope:UserInfo)
 private:
  inline void set_has_eusrlevel();
  inline void clear_has_eusrlevel();
  inline void set_has_usrnumber();
  inline void clear_has_usrnumber();
  inline void set_has_usrname();
  inline void clear_has_usrname();
  inline void set_has_usrjobnumber();
  inline void clear_has_usrjobnumber();
  inline void set_has_usrheadship();
  inline void clear_has_usrheadship();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* usrnumber_;
  ::std::string* usrname_;
  ::std::string* usrjobnumber_;
  ::std::string* usrheadship_;
  ::google::protobuf::int32 eusrlevel_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class LoginAck : public ::google::protobuf::Message {
 public:
  LoginAck();
  virtual ~LoginAck();

  LoginAck(const LoginAck& from);

  inline LoginAck& operator=(const LoginAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginAck& default_instance();

  void Swap(LoginAck* other);

  // implements Message ----------------------------------------------

  LoginAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginAck& from);
  void MergeFrom(const LoginAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .e_ErrorCode eResult = 1;
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEResultFieldNumber = 1;
  inline ::e_ErrorCode eresult() const;
  inline void set_eresult(::e_ErrorCode value);

  // optional int32 eUsrLevel = 2;
  inline bool has_eusrlevel() const;
  inline void clear_eusrlevel();
  static const int kEUsrLevelFieldNumber = 2;
  inline ::google::protobuf::int32 eusrlevel() const;
  inline void set_eusrlevel(::google::protobuf::int32 value);

  // optional string UsrNumber = 3;
  inline bool has_usrnumber() const;
  inline void clear_usrnumber();
  static const int kUsrNumberFieldNumber = 3;
  inline const ::std::string& usrnumber() const;
  inline void set_usrnumber(const ::std::string& value);
  inline void set_usrnumber(const char* value);
  inline void set_usrnumber(const char* value, size_t size);
  inline ::std::string* mutable_usrnumber();
  inline ::std::string* release_usrnumber();
  inline void set_allocated_usrnumber(::std::string* usrnumber);

  // optional string UsrName = 4;
  inline bool has_usrname() const;
  inline void clear_usrname();
  static const int kUsrNameFieldNumber = 4;
  inline const ::std::string& usrname() const;
  inline void set_usrname(const ::std::string& value);
  inline void set_usrname(const char* value);
  inline void set_usrname(const char* value, size_t size);
  inline ::std::string* mutable_usrname();
  inline ::std::string* release_usrname();
  inline void set_allocated_usrname(::std::string* usrname);

  // optional string UsrJobNumber = 5;
  inline bool has_usrjobnumber() const;
  inline void clear_usrjobnumber();
  static const int kUsrJobNumberFieldNumber = 5;
  inline const ::std::string& usrjobnumber() const;
  inline void set_usrjobnumber(const ::std::string& value);
  inline void set_usrjobnumber(const char* value);
  inline void set_usrjobnumber(const char* value, size_t size);
  inline ::std::string* mutable_usrjobnumber();
  inline ::std::string* release_usrjobnumber();
  inline void set_allocated_usrjobnumber(::std::string* usrjobnumber);

  // optional string UsrHeadship = 6;
  inline bool has_usrheadship() const;
  inline void clear_usrheadship();
  static const int kUsrHeadshipFieldNumber = 6;
  inline const ::std::string& usrheadship() const;
  inline void set_usrheadship(const ::std::string& value);
  inline void set_usrheadship(const char* value);
  inline void set_usrheadship(const char* value, size_t size);
  inline ::std::string* mutable_usrheadship();
  inline ::std::string* release_usrheadship();
  inline void set_allocated_usrheadship(::std::string* usrheadship);

  // repeated .DevNetStatus cDevCurNetStatus = 7;
  inline int cdevcurnetstatus_size() const;
  inline void clear_cdevcurnetstatus();
  static const int kCDevCurNetStatusFieldNumber = 7;
  inline const ::DevNetStatus& cdevcurnetstatus(int index) const;
  inline ::DevNetStatus* mutable_cdevcurnetstatus(int index);
  inline ::DevNetStatus* add_cdevcurnetstatus();
  inline const ::google::protobuf::RepeatedPtrField< ::DevNetStatus >&
      cdevcurnetstatus() const;
  inline ::google::protobuf::RepeatedPtrField< ::DevNetStatus >*
      mutable_cdevcurnetstatus();

  // repeated .DevWorkStatus cDevCurWorkStatus = 8;
  inline int cdevcurworkstatus_size() const;
  inline void clear_cdevcurworkstatus();
  static const int kCDevCurWorkStatusFieldNumber = 8;
  inline const ::DevWorkStatus& cdevcurworkstatus(int index) const;
  inline ::DevWorkStatus* mutable_cdevcurworkstatus(int index);
  inline ::DevWorkStatus* add_cdevcurworkstatus();
  inline const ::google::protobuf::RepeatedPtrField< ::DevWorkStatus >&
      cdevcurworkstatus() const;
  inline ::google::protobuf::RepeatedPtrField< ::DevWorkStatus >*
      mutable_cdevcurworkstatus();

  // repeated .DevAlarmStatus cDevCurAlarmStatus = 9;
  inline int cdevcuralarmstatus_size() const;
  inline void clear_cdevcuralarmstatus();
  static const int kCDevCurAlarmStatusFieldNumber = 9;
  inline const ::DevAlarmStatus& cdevcuralarmstatus(int index) const;
  inline ::DevAlarmStatus* mutable_cdevcuralarmstatus(int index);
  inline ::DevAlarmStatus* add_cdevcuralarmstatus();
  inline const ::google::protobuf::RepeatedPtrField< ::DevAlarmStatus >&
      cdevcuralarmstatus() const;
  inline ::google::protobuf::RepeatedPtrField< ::DevAlarmStatus >*
      mutable_cdevcuralarmstatus();

  // optional string UsrPsw = 10;
  inline bool has_usrpsw() const;
  inline void clear_usrpsw();
  static const int kUsrPswFieldNumber = 10;
  inline const ::std::string& usrpsw() const;
  inline void set_usrpsw(const ::std::string& value);
  inline void set_usrpsw(const char* value);
  inline void set_usrpsw(const char* value, size_t size);
  inline ::std::string* mutable_usrpsw();
  inline ::std::string* release_usrpsw();
  inline void set_allocated_usrpsw(::std::string* usrpsw);

  // repeated .UserSigninInfo SignUsers = 11;
  inline int signusers_size() const;
  inline void clear_signusers();
  static const int kSignUsersFieldNumber = 11;
  inline const ::UserSigninInfo& signusers(int index) const;
  inline ::UserSigninInfo* mutable_signusers(int index);
  inline ::UserSigninInfo* add_signusers();
  inline const ::google::protobuf::RepeatedPtrField< ::UserSigninInfo >&
      signusers() const;
  inline ::google::protobuf::RepeatedPtrField< ::UserSigninInfo >*
      mutable_signusers();

  // repeated .UserInfo AllUserInfo = 12;
  inline int alluserinfo_size() const;
  inline void clear_alluserinfo();
  static const int kAllUserInfoFieldNumber = 12;
  inline const ::UserInfo& alluserinfo(int index) const;
  inline ::UserInfo* mutable_alluserinfo(int index);
  inline ::UserInfo* add_alluserinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::UserInfo >&
      alluserinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::UserInfo >*
      mutable_alluserinfo();

  // @@protoc_insertion_point(class_scope:LoginAck)
 private:
  inline void set_has_eresult();
  inline void clear_has_eresult();
  inline void set_has_eusrlevel();
  inline void clear_has_eusrlevel();
  inline void set_has_usrnumber();
  inline void clear_has_usrnumber();
  inline void set_has_usrname();
  inline void clear_has_usrname();
  inline void set_has_usrjobnumber();
  inline void clear_has_usrjobnumber();
  inline void set_has_usrheadship();
  inline void clear_has_usrheadship();
  inline void set_has_usrpsw();
  inline void clear_has_usrpsw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int eresult_;
  ::google::protobuf::int32 eusrlevel_;
  ::std::string* usrnumber_;
  ::std::string* usrname_;
  ::std::string* usrjobnumber_;
  ::std::string* usrheadship_;
  ::google::protobuf::RepeatedPtrField< ::DevNetStatus > cdevcurnetstatus_;
  ::google::protobuf::RepeatedPtrField< ::DevWorkStatus > cdevcurworkstatus_;
  ::google::protobuf::RepeatedPtrField< ::DevAlarmStatus > cdevcuralarmstatus_;
  ::std::string* usrpsw_;
  ::google::protobuf::RepeatedPtrField< ::UserSigninInfo > signusers_;
  ::google::protobuf::RepeatedPtrField< ::UserInfo > alluserinfo_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static LoginAck* default_instance_;
};
// -------------------------------------------------------------------

class SignInOutReq : public ::google::protobuf::Message {
 public:
  SignInOutReq();
  virtual ~SignInOutReq();

  SignInOutReq(const SignInOutReq& from);

  inline SignInOutReq& operator=(const SignInOutReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignInOutReq& default_instance();

  void Swap(SignInOutReq* other);

  // implements Message ----------------------------------------------

  SignInOutReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignInOutReq& from);
  void MergeFrom(const SignInOutReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 IsSignIn = 1;
  inline bool has_issignin() const;
  inline void clear_issignin();
  static const int kIsSignInFieldNumber = 1;
  inline ::google::protobuf::int32 issignin() const;
  inline void set_issignin(::google::protobuf::int32 value);

  // optional string sSignInName = 2;
  inline bool has_ssigninname() const;
  inline void clear_ssigninname();
  static const int kSSignInNameFieldNumber = 2;
  inline const ::std::string& ssigninname() const;
  inline void set_ssigninname(const ::std::string& value);
  inline void set_ssigninname(const char* value);
  inline void set_ssigninname(const char* value, size_t size);
  inline ::std::string* mutable_ssigninname();
  inline ::std::string* release_ssigninname();
  inline void set_allocated_ssigninname(::std::string* ssigninname);

  // optional string sSignInPsw = 3;
  inline bool has_ssigninpsw() const;
  inline void clear_ssigninpsw();
  static const int kSSignInPswFieldNumber = 3;
  inline const ::std::string& ssigninpsw() const;
  inline void set_ssigninpsw(const ::std::string& value);
  inline void set_ssigninpsw(const char* value);
  inline void set_ssigninpsw(const char* value, size_t size);
  inline ::std::string* mutable_ssigninpsw();
  inline ::std::string* release_ssigninpsw();
  inline void set_allocated_ssigninpsw(::std::string* ssigninpsw);

  // @@protoc_insertion_point(class_scope:SignInOutReq)
 private:
  inline void set_has_issignin();
  inline void clear_has_issignin();
  inline void set_has_ssigninname();
  inline void clear_has_ssigninname();
  inline void set_has_ssigninpsw();
  inline void clear_has_ssigninpsw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ssigninname_;
  ::std::string* ssigninpsw_;
  ::google::protobuf::int32 issignin_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static SignInOutReq* default_instance_;
};
// -------------------------------------------------------------------

class SignInOutAck : public ::google::protobuf::Message {
 public:
  SignInOutAck();
  virtual ~SignInOutAck();

  SignInOutAck(const SignInOutAck& from);

  inline SignInOutAck& operator=(const SignInOutAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignInOutAck& default_instance();

  void Swap(SignInOutAck* other);

  // implements Message ----------------------------------------------

  SignInOutAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignInOutAck& from);
  void MergeFrom(const SignInOutAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 IsSignIn = 1;
  inline bool has_issignin() const;
  inline void clear_issignin();
  static const int kIsSignInFieldNumber = 1;
  inline ::google::protobuf::int32 issignin() const;
  inline void set_issignin(::google::protobuf::int32 value);

  // optional .e_ErrorCode eResult = 2;
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEResultFieldNumber = 2;
  inline ::e_ErrorCode eresult() const;
  inline void set_eresult(::e_ErrorCode value);

  // optional .UserSigninInfo cUsersInfo = 3;
  inline bool has_cusersinfo() const;
  inline void clear_cusersinfo();
  static const int kCUsersInfoFieldNumber = 3;
  inline const ::UserSigninInfo& cusersinfo() const;
  inline ::UserSigninInfo* mutable_cusersinfo();
  inline ::UserSigninInfo* release_cusersinfo();
  inline void set_allocated_cusersinfo(::UserSigninInfo* cusersinfo);

  // @@protoc_insertion_point(class_scope:SignInOutAck)
 private:
  inline void set_has_issignin();
  inline void clear_has_issignin();
  inline void set_has_eresult();
  inline void clear_has_eresult();
  inline void set_has_cusersinfo();
  inline void clear_has_cusersinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 issignin_;
  int eresult_;
  ::UserSigninInfo* cusersinfo_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static SignInOutAck* default_instance_;
};
// -------------------------------------------------------------------

class StationWorkingState : public ::google::protobuf::Message {
 public:
  StationWorkingState();
  virtual ~StationWorkingState();

  StationWorkingState(const StationWorkingState& from);

  inline StationWorkingState& operator=(const StationWorkingState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StationWorkingState& default_instance();

  void Swap(StationWorkingState* other);

  // implements Message ----------------------------------------------

  StationWorkingState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StationWorkingState& from);
  void MergeFrom(const StationWorkingState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sStationNumber = 1;
  inline bool has_sstationnumber() const;
  inline void clear_sstationnumber();
  static const int kSStationNumberFieldNumber = 1;
  inline const ::std::string& sstationnumber() const;
  inline void set_sstationnumber(const ::std::string& value);
  inline void set_sstationnumber(const char* value);
  inline void set_sstationnumber(const char* value, size_t size);
  inline ::std::string* mutable_sstationnumber();
  inline ::std::string* release_sstationnumber();
  inline void set_allocated_sstationnumber(::std::string* sstationnumber);

  // optional int32 nState = 2;
  inline bool has_nstate() const;
  inline void clear_nstate();
  static const int kNStateFieldNumber = 2;
  inline ::google::protobuf::int32 nstate() const;
  inline void set_nstate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:StationWorkingState)
 private:
  inline void set_has_sstationnumber();
  inline void clear_has_sstationnumber();
  inline void set_has_nstate();
  inline void clear_has_nstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sstationnumber_;
  ::google::protobuf::int32 nstate_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static StationWorkingState* default_instance_;
};
// -------------------------------------------------------------------

class CheckStationWorkingReq : public ::google::protobuf::Message {
 public:
  CheckStationWorkingReq();
  virtual ~CheckStationWorkingReq();

  CheckStationWorkingReq(const CheckStationWorkingReq& from);

  inline CheckStationWorkingReq& operator=(const CheckStationWorkingReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckStationWorkingReq& default_instance();

  void Swap(CheckStationWorkingReq* other);

  // implements Message ----------------------------------------------

  CheckStationWorkingReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckStationWorkingReq& from);
  void MergeFrom(const CheckStationWorkingReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string sChildNumber = 1;
  inline int schildnumber_size() const;
  inline void clear_schildnumber();
  static const int kSChildNumberFieldNumber = 1;
  inline const ::std::string& schildnumber(int index) const;
  inline ::std::string* mutable_schildnumber(int index);
  inline void set_schildnumber(int index, const ::std::string& value);
  inline void set_schildnumber(int index, const char* value);
  inline void set_schildnumber(int index, const char* value, size_t size);
  inline ::std::string* add_schildnumber();
  inline void add_schildnumber(const ::std::string& value);
  inline void add_schildnumber(const char* value);
  inline void add_schildnumber(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& schildnumber() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_schildnumber();

  // @@protoc_insertion_point(class_scope:CheckStationWorkingReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> schildnumber_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static CheckStationWorkingReq* default_instance_;
};
// -------------------------------------------------------------------

class CheckStationWorkingAck : public ::google::protobuf::Message {
 public:
  CheckStationWorkingAck();
  virtual ~CheckStationWorkingAck();

  CheckStationWorkingAck(const CheckStationWorkingAck& from);

  inline CheckStationWorkingAck& operator=(const CheckStationWorkingAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckStationWorkingAck& default_instance();

  void Swap(CheckStationWorkingAck* other);

  // implements Message ----------------------------------------------

  CheckStationWorkingAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckStationWorkingAck& from);
  void MergeFrom(const CheckStationWorkingAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 nResult = 1;
  inline bool has_nresult() const;
  inline void clear_nresult();
  static const int kNResultFieldNumber = 1;
  inline ::google::protobuf::int32 nresult() const;
  inline void set_nresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CheckStationWorkingAck)
 private:
  inline void set_has_nresult();
  inline void clear_has_nresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 nresult_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static CheckStationWorkingAck* default_instance_;
};
// -------------------------------------------------------------------

class CheackStationWorkingNotify : public ::google::protobuf::Message {
 public:
  CheackStationWorkingNotify();
  virtual ~CheackStationWorkingNotify();

  CheackStationWorkingNotify(const CheackStationWorkingNotify& from);

  inline CheackStationWorkingNotify& operator=(const CheackStationWorkingNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheackStationWorkingNotify& default_instance();

  void Swap(CheackStationWorkingNotify* other);

  // implements Message ----------------------------------------------

  CheackStationWorkingNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheackStationWorkingNotify& from);
  void MergeFrom(const CheackStationWorkingNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 nResult = 1;
  inline bool has_nresult() const;
  inline void clear_nresult();
  static const int kNResultFieldNumber = 1;
  inline ::google::protobuf::int32 nresult() const;
  inline void set_nresult(::google::protobuf::int32 value);

  // optional string sUserNumber = 2;
  inline bool has_susernumber() const;
  inline void clear_susernumber();
  static const int kSUserNumberFieldNumber = 2;
  inline const ::std::string& susernumber() const;
  inline void set_susernumber(const ::std::string& value);
  inline void set_susernumber(const char* value);
  inline void set_susernumber(const char* value, size_t size);
  inline ::std::string* mutable_susernumber();
  inline ::std::string* release_susernumber();
  inline void set_allocated_susernumber(::std::string* susernumber);

  // optional string sUserName = 3;
  inline bool has_susername() const;
  inline void clear_susername();
  static const int kSUserNameFieldNumber = 3;
  inline const ::std::string& susername() const;
  inline void set_susername(const ::std::string& value);
  inline void set_susername(const char* value);
  inline void set_susername(const char* value, size_t size);
  inline ::std::string* mutable_susername();
  inline ::std::string* release_susername();
  inline void set_allocated_susername(::std::string* susername);

  // optional string sStationNumber = 4;
  inline bool has_sstationnumber() const;
  inline void clear_sstationnumber();
  static const int kSStationNumberFieldNumber = 4;
  inline const ::std::string& sstationnumber() const;
  inline void set_sstationnumber(const ::std::string& value);
  inline void set_sstationnumber(const char* value);
  inline void set_sstationnumber(const char* value, size_t size);
  inline ::std::string* mutable_sstationnumber();
  inline ::std::string* release_sstationnumber();
  inline void set_allocated_sstationnumber(::std::string* sstationnumber);

  // @@protoc_insertion_point(class_scope:CheackStationWorkingNotify)
 private:
  inline void set_has_nresult();
  inline void clear_has_nresult();
  inline void set_has_susernumber();
  inline void clear_has_susernumber();
  inline void set_has_susername();
  inline void clear_has_susername();
  inline void set_has_sstationnumber();
  inline void clear_has_sstationnumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* susernumber_;
  ::std::string* susername_;
  ::std::string* sstationnumber_;
  ::google::protobuf::int32 nresult_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static CheackStationWorkingNotify* default_instance_;
};
// -------------------------------------------------------------------

class LogoutReq : public ::google::protobuf::Message {
 public:
  LogoutReq();
  virtual ~LogoutReq();

  LogoutReq(const LogoutReq& from);

  inline LogoutReq& operator=(const LogoutReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutReq& default_instance();

  void Swap(LogoutReq* other);

  // implements Message ----------------------------------------------

  LogoutReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogoutReq& from);
  void MergeFrom(const LogoutReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sUsrName = 1;
  inline bool has_susrname() const;
  inline void clear_susrname();
  static const int kSUsrNameFieldNumber = 1;
  inline const ::std::string& susrname() const;
  inline void set_susrname(const ::std::string& value);
  inline void set_susrname(const char* value);
  inline void set_susrname(const char* value, size_t size);
  inline ::std::string* mutable_susrname();
  inline ::std::string* release_susrname();
  inline void set_allocated_susrname(::std::string* susrname);

  // optional string sUsrPsw = 2;
  inline bool has_susrpsw() const;
  inline void clear_susrpsw();
  static const int kSUsrPswFieldNumber = 2;
  inline const ::std::string& susrpsw() const;
  inline void set_susrpsw(const ::std::string& value);
  inline void set_susrpsw(const char* value);
  inline void set_susrpsw(const char* value, size_t size);
  inline ::std::string* mutable_susrpsw();
  inline ::std::string* release_susrpsw();
  inline void set_allocated_susrpsw(::std::string* susrpsw);

  // @@protoc_insertion_point(class_scope:LogoutReq)
 private:
  inline void set_has_susrname();
  inline void clear_has_susrname();
  inline void set_has_susrpsw();
  inline void clear_has_susrpsw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* susrname_;
  ::std::string* susrpsw_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static LogoutReq* default_instance_;
};
// -------------------------------------------------------------------

class LogoutAck : public ::google::protobuf::Message {
 public:
  LogoutAck();
  virtual ~LogoutAck();

  LogoutAck(const LogoutAck& from);

  inline LogoutAck& operator=(const LogoutAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutAck& default_instance();

  void Swap(LogoutAck* other);

  // implements Message ----------------------------------------------

  LogoutAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogoutAck& from);
  void MergeFrom(const LogoutAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .e_ErrorCode eResult = 1;
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEResultFieldNumber = 1;
  inline ::e_ErrorCode eresult() const;
  inline void set_eresult(::e_ErrorCode value);

  // @@protoc_insertion_point(class_scope:LogoutAck)
 private:
  inline void set_has_eresult();
  inline void clear_has_eresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int eresult_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static LogoutAck* default_instance_;
};
// -------------------------------------------------------------------

class TurnOnDevMsg : public ::google::protobuf::Message {
 public:
  TurnOnDevMsg();
  virtual ~TurnOnDevMsg();

  TurnOnDevMsg(const TurnOnDevMsg& from);

  inline TurnOnDevMsg& operator=(const TurnOnDevMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TurnOnDevMsg& default_instance();

  void Swap(TurnOnDevMsg* other);

  // implements Message ----------------------------------------------

  TurnOnDevMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TurnOnDevMsg& from);
  void MergeFrom(const TurnOnDevMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sStationId = 1;
  inline bool has_sstationid() const;
  inline void clear_sstationid();
  static const int kSStationIdFieldNumber = 1;
  inline const ::std::string& sstationid() const;
  inline void set_sstationid(const ::std::string& value);
  inline void set_sstationid(const char* value);
  inline void set_sstationid(const char* value, size_t size);
  inline ::std::string* mutable_sstationid();
  inline ::std::string* release_sstationid();
  inline void set_allocated_sstationid(::std::string* sstationid);

  // required string sDevId = 2;
  inline bool has_sdevid() const;
  inline void clear_sdevid();
  static const int kSDevIdFieldNumber = 2;
  inline const ::std::string& sdevid() const;
  inline void set_sdevid(const ::std::string& value);
  inline void set_sdevid(const char* value);
  inline void set_sdevid(const char* value, size_t size);
  inline ::std::string* mutable_sdevid();
  inline ::std::string* release_sdevid();
  inline void set_allocated_sdevid(::std::string* sdevid);

  // optional int32 eDevType = 3;
  inline bool has_edevtype() const;
  inline void clear_edevtype();
  static const int kEDevTypeFieldNumber = 3;
  inline ::google::protobuf::int32 edevtype() const;
  inline void set_edevtype(::google::protobuf::int32 value);

  // optional string sOperUser = 4;
  inline bool has_soperuser() const;
  inline void clear_soperuser();
  static const int kSOperUserFieldNumber = 4;
  inline const ::std::string& soperuser() const;
  inline void set_soperuser(const ::std::string& value);
  inline void set_soperuser(const char* value);
  inline void set_soperuser(const char* value, size_t size);
  inline ::std::string* mutable_soperuser();
  inline ::std::string* release_soperuser();
  inline void set_allocated_soperuser(::std::string* soperuser);

  // @@protoc_insertion_point(class_scope:TurnOnDevMsg)
 private:
  inline void set_has_sstationid();
  inline void clear_has_sstationid();
  inline void set_has_sdevid();
  inline void clear_has_sdevid();
  inline void set_has_edevtype();
  inline void clear_has_edevtype();
  inline void set_has_soperuser();
  inline void clear_has_soperuser();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sstationid_;
  ::std::string* sdevid_;
  ::std::string* soperuser_;
  ::google::protobuf::int32 edevtype_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static TurnOnDevMsg* default_instance_;
};
// -------------------------------------------------------------------

class TurnOffDevMsg : public ::google::protobuf::Message {
 public:
  TurnOffDevMsg();
  virtual ~TurnOffDevMsg();

  TurnOffDevMsg(const TurnOffDevMsg& from);

  inline TurnOffDevMsg& operator=(const TurnOffDevMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TurnOffDevMsg& default_instance();

  void Swap(TurnOffDevMsg* other);

  // implements Message ----------------------------------------------

  TurnOffDevMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TurnOffDevMsg& from);
  void MergeFrom(const TurnOffDevMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sStationId = 1;
  inline bool has_sstationid() const;
  inline void clear_sstationid();
  static const int kSStationIdFieldNumber = 1;
  inline const ::std::string& sstationid() const;
  inline void set_sstationid(const ::std::string& value);
  inline void set_sstationid(const char* value);
  inline void set_sstationid(const char* value, size_t size);
  inline ::std::string* mutable_sstationid();
  inline ::std::string* release_sstationid();
  inline void set_allocated_sstationid(::std::string* sstationid);

  // required string sDevId = 2;
  inline bool has_sdevid() const;
  inline void clear_sdevid();
  static const int kSDevIdFieldNumber = 2;
  inline const ::std::string& sdevid() const;
  inline void set_sdevid(const ::std::string& value);
  inline void set_sdevid(const char* value);
  inline void set_sdevid(const char* value, size_t size);
  inline ::std::string* mutable_sdevid();
  inline ::std::string* release_sdevid();
  inline void set_allocated_sdevid(::std::string* sdevid);

  // optional int32 eDevType = 3;
  inline bool has_edevtype() const;
  inline void clear_edevtype();
  static const int kEDevTypeFieldNumber = 3;
  inline ::google::protobuf::int32 edevtype() const;
  inline void set_edevtype(::google::protobuf::int32 value);

  // optional string sOperUser = 4;
  inline bool has_soperuser() const;
  inline void clear_soperuser();
  static const int kSOperUserFieldNumber = 4;
  inline const ::std::string& soperuser() const;
  inline void set_soperuser(const ::std::string& value);
  inline void set_soperuser(const char* value);
  inline void set_soperuser(const char* value, size_t size);
  inline ::std::string* mutable_soperuser();
  inline ::std::string* release_soperuser();
  inline void set_allocated_soperuser(::std::string* soperuser);

  // @@protoc_insertion_point(class_scope:TurnOffDevMsg)
 private:
  inline void set_has_sstationid();
  inline void clear_has_sstationid();
  inline void set_has_sdevid();
  inline void clear_has_sdevid();
  inline void set_has_edevtype();
  inline void clear_has_edevtype();
  inline void set_has_soperuser();
  inline void clear_has_soperuser();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sstationid_;
  ::std::string* sdevid_;
  ::std::string* soperuser_;
  ::google::protobuf::int32 edevtype_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static TurnOffDevMsg* default_instance_;
};
// -------------------------------------------------------------------

class CommandParam : public ::google::protobuf::Message {
 public:
  CommandParam();
  virtual ~CommandParam();

  CommandParam(const CommandParam& from);

  inline CommandParam& operator=(const CommandParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandParam& default_instance();

  void Swap(CommandParam* other);

  // implements Message ----------------------------------------------

  CommandParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandParam& from);
  void MergeFrom(const CommandParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sParamName = 1;
  inline bool has_sparamname() const;
  inline void clear_sparamname();
  static const int kSParamNameFieldNumber = 1;
  inline const ::std::string& sparamname() const;
  inline void set_sparamname(const ::std::string& value);
  inline void set_sparamname(const char* value);
  inline void set_sparamname(const char* value, size_t size);
  inline ::std::string* mutable_sparamname();
  inline ::std::string* release_sparamname();
  inline void set_allocated_sparamname(::std::string* sparamname);

  // optional string sParamValue = 2;
  inline bool has_sparamvalue() const;
  inline void clear_sparamvalue();
  static const int kSParamValueFieldNumber = 2;
  inline const ::std::string& sparamvalue() const;
  inline void set_sparamvalue(const ::std::string& value);
  inline void set_sparamvalue(const char* value);
  inline void set_sparamvalue(const char* value, size_t size);
  inline ::std::string* mutable_sparamvalue();
  inline ::std::string* release_sparamvalue();
  inline void set_allocated_sparamvalue(::std::string* sparamvalue);

  // @@protoc_insertion_point(class_scope:CommandParam)
 private:
  inline void set_has_sparamname();
  inline void clear_has_sparamname();
  inline void set_has_sparamvalue();
  inline void clear_has_sparamvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sparamname_;
  ::std::string* sparamvalue_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static CommandParam* default_instance_;
};
// -------------------------------------------------------------------

class DeviceCommandMsg : public ::google::protobuf::Message {
 public:
  DeviceCommandMsg();
  virtual ~DeviceCommandMsg();

  DeviceCommandMsg(const DeviceCommandMsg& from);

  inline DeviceCommandMsg& operator=(const DeviceCommandMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceCommandMsg& default_instance();

  void Swap(DeviceCommandMsg* other);

  // implements Message ----------------------------------------------

  DeviceCommandMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceCommandMsg& from);
  void MergeFrom(const DeviceCommandMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sStationId = 1;
  inline bool has_sstationid() const;
  inline void clear_sstationid();
  static const int kSStationIdFieldNumber = 1;
  inline const ::std::string& sstationid() const;
  inline void set_sstationid(const ::std::string& value);
  inline void set_sstationid(const char* value);
  inline void set_sstationid(const char* value, size_t size);
  inline ::std::string* mutable_sstationid();
  inline ::std::string* release_sstationid();
  inline void set_allocated_sstationid(::std::string* sstationid);

  // required string sDevId = 2;
  inline bool has_sdevid() const;
  inline void clear_sdevid();
  static const int kSDevIdFieldNumber = 2;
  inline const ::std::string& sdevid() const;
  inline void set_sdevid(const ::std::string& value);
  inline void set_sdevid(const char* value);
  inline void set_sdevid(const char* value, size_t size);
  inline ::std::string* mutable_sdevid();
  inline ::std::string* release_sdevid();
  inline void set_allocated_sdevid(::std::string* sdevid);

  // optional string sDevName = 3;
  inline bool has_sdevname() const;
  inline void clear_sdevname();
  static const int kSDevNameFieldNumber = 3;
  inline const ::std::string& sdevname() const;
  inline void set_sdevname(const ::std::string& value);
  inline void set_sdevname(const char* value);
  inline void set_sdevname(const char* value, size_t size);
  inline ::std::string* mutable_sdevname();
  inline ::std::string* release_sdevname();
  inline void set_allocated_sdevname(::std::string* sdevname);

  // optional int32 eDevType = 4;
  inline bool has_edevtype() const;
  inline void clear_edevtype();
  static const int kEDevTypeFieldNumber = 4;
  inline ::google::protobuf::int32 edevtype() const;
  inline void set_edevtype(::google::protobuf::int32 value);

  // optional string sOperUser = 5;
  inline bool has_soperuser() const;
  inline void clear_soperuser();
  static const int kSOperUserFieldNumber = 5;
  inline const ::std::string& soperuser() const;
  inline void set_soperuser(const ::std::string& value);
  inline void set_soperuser(const char* value);
  inline void set_soperuser(const char* value, size_t size);
  inline ::std::string* mutable_soperuser();
  inline ::std::string* release_soperuser();
  inline void set_allocated_soperuser(::std::string* soperuser);

  // repeated .CommandParam cParams = 6;
  inline int cparams_size() const;
  inline void clear_cparams();
  static const int kCParamsFieldNumber = 6;
  inline const ::CommandParam& cparams(int index) const;
  inline ::CommandParam* mutable_cparams(int index);
  inline ::CommandParam* add_cparams();
  inline const ::google::protobuf::RepeatedPtrField< ::CommandParam >&
      cparams() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommandParam >*
      mutable_cparams();

  // @@protoc_insertion_point(class_scope:DeviceCommandMsg)
 private:
  inline void set_has_sstationid();
  inline void clear_has_sstationid();
  inline void set_has_sdevid();
  inline void clear_has_sdevid();
  inline void set_has_sdevname();
  inline void clear_has_sdevname();
  inline void set_has_edevtype();
  inline void clear_has_edevtype();
  inline void set_has_soperuser();
  inline void clear_has_soperuser();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sstationid_;
  ::std::string* sdevid_;
  ::std::string* sdevname_;
  ::std::string* soperuser_;
  ::google::protobuf::RepeatedPtrField< ::CommandParam > cparams_;
  ::google::protobuf::int32 edevtype_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static DeviceCommandMsg* default_instance_;
};
// -------------------------------------------------------------------

class DeviceCommandResultNotify : public ::google::protobuf::Message {
 public:
  DeviceCommandResultNotify();
  virtual ~DeviceCommandResultNotify();

  DeviceCommandResultNotify(const DeviceCommandResultNotify& from);

  inline DeviceCommandResultNotify& operator=(const DeviceCommandResultNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceCommandResultNotify& default_instance();

  void Swap(DeviceCommandResultNotify* other);

  // implements Message ----------------------------------------------

  DeviceCommandResultNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceCommandResultNotify& from);
  void MergeFrom(const DeviceCommandResultNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sStationId = 1;
  inline bool has_sstationid() const;
  inline void clear_sstationid();
  static const int kSStationIdFieldNumber = 1;
  inline const ::std::string& sstationid() const;
  inline void set_sstationid(const ::std::string& value);
  inline void set_sstationid(const char* value);
  inline void set_sstationid(const char* value, size_t size);
  inline ::std::string* mutable_sstationid();
  inline ::std::string* release_sstationid();
  inline void set_allocated_sstationid(::std::string* sstationid);

  // required string sDevId = 2;
  inline bool has_sdevid() const;
  inline void clear_sdevid();
  static const int kSDevIdFieldNumber = 2;
  inline const ::std::string& sdevid() const;
  inline void set_sdevid(const ::std::string& value);
  inline void set_sdevid(const char* value);
  inline void set_sdevid(const char* value, size_t size);
  inline ::std::string* mutable_sdevid();
  inline ::std::string* release_sdevid();
  inline void set_allocated_sdevid(::std::string* sdevid);

  // optional int32 eDevType = 3;
  inline bool has_edevtype() const;
  inline void clear_edevtype();
  static const int kEDevTypeFieldNumber = 3;
  inline ::google::protobuf::int32 edevtype() const;
  inline void set_edevtype(::google::protobuf::int32 value);

  // optional string sDevName = 4;
  inline bool has_sdevname() const;
  inline void clear_sdevname();
  static const int kSDevNameFieldNumber = 4;
  inline const ::std::string& sdevname() const;
  inline void set_sdevname(const ::std::string& value);
  inline void set_sdevname(const char* value);
  inline void set_sdevname(const char* value, size_t size);
  inline ::std::string* mutable_sdevname();
  inline ::std::string* release_sdevname();
  inline void set_allocated_sdevname(::std::string* sdevname);

  // optional .e_ErrorCode eErrorId = 5;
  inline bool has_eerrorid() const;
  inline void clear_eerrorid();
  static const int kEErrorIdFieldNumber = 5;
  inline ::e_ErrorCode eerrorid() const;
  inline void set_eerrorid(::e_ErrorCode value);

  // optional string sOperUser = 6;
  inline bool has_soperuser() const;
  inline void clear_soperuser();
  static const int kSOperUserFieldNumber = 6;
  inline const ::std::string& soperuser() const;
  inline void set_soperuser(const ::std::string& value);
  inline void set_soperuser(const char* value);
  inline void set_soperuser(const char* value, size_t size);
  inline ::std::string* mutable_soperuser();
  inline ::std::string* release_soperuser();
  inline void set_allocated_soperuser(::std::string* soperuser);

  // repeated .CommandParam cParams = 7;
  inline int cparams_size() const;
  inline void clear_cparams();
  static const int kCParamsFieldNumber = 7;
  inline const ::CommandParam& cparams(int index) const;
  inline ::CommandParam* mutable_cparams(int index);
  inline ::CommandParam* add_cparams();
  inline const ::google::protobuf::RepeatedPtrField< ::CommandParam >&
      cparams() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommandParam >*
      mutable_cparams();

  // @@protoc_insertion_point(class_scope:DeviceCommandResultNotify)
 private:
  inline void set_has_sstationid();
  inline void clear_has_sstationid();
  inline void set_has_sdevid();
  inline void clear_has_sdevid();
  inline void set_has_edevtype();
  inline void clear_has_edevtype();
  inline void set_has_sdevname();
  inline void clear_has_sdevname();
  inline void set_has_eerrorid();
  inline void clear_has_eerrorid();
  inline void set_has_soperuser();
  inline void clear_has_soperuser();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sstationid_;
  ::std::string* sdevid_;
  ::std::string* sdevname_;
  ::google::protobuf::int32 edevtype_;
  int eerrorid_;
  ::std::string* soperuser_;
  ::google::protobuf::RepeatedPtrField< ::CommandParam > cparams_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static DeviceCommandResultNotify* default_instance_;
};
// -------------------------------------------------------------------

class WebSocketMessage : public ::google::protobuf::Message {
 public:
  WebSocketMessage();
  virtual ~WebSocketMessage();

  WebSocketMessage(const WebSocketMessage& from);

  inline WebSocketMessage& operator=(const WebSocketMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WebSocketMessage& default_instance();

  void Swap(WebSocketMessage* other);

  // implements Message ----------------------------------------------

  WebSocketMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WebSocketMessage& from);
  void MergeFrom(const WebSocketMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 nMsgType = 1;
  inline bool has_nmsgtype() const;
  inline void clear_nmsgtype();
  static const int kNMsgTypeFieldNumber = 1;
  inline ::google::protobuf::int32 nmsgtype() const;
  inline void set_nmsgtype(::google::protobuf::int32 value);

  // required string sMsgType = 2;
  inline bool has_smsgtype() const;
  inline void clear_smsgtype();
  static const int kSMsgTypeFieldNumber = 2;
  inline const ::std::string& smsgtype() const;
  inline void set_smsgtype(const ::std::string& value);
  inline void set_smsgtype(const char* value);
  inline void set_smsgtype(const char* value, size_t size);
  inline ::std::string* mutable_smsgtype();
  inline ::std::string* release_smsgtype();
  inline void set_allocated_smsgtype(::std::string* smsgtype);

  // optional .LoginReq msgLoginReq = 3;
  inline bool has_msgloginreq() const;
  inline void clear_msgloginreq();
  static const int kMsgLoginReqFieldNumber = 3;
  inline const ::LoginReq& msgloginreq() const;
  inline ::LoginReq* mutable_msgloginreq();
  inline ::LoginReq* release_msgloginreq();
  inline void set_allocated_msgloginreq(::LoginReq* msgloginreq);

  // optional .LoginAck msgLoginAck = 4;
  inline bool has_msgloginack() const;
  inline void clear_msgloginack();
  static const int kMsgLoginAckFieldNumber = 4;
  inline const ::LoginAck& msgloginack() const;
  inline ::LoginAck* mutable_msgloginack();
  inline ::LoginAck* release_msgloginack();
  inline void set_allocated_msgloginack(::LoginAck* msgloginack);

  // optional .DevDataNotify monitorDataNty = 5;
  inline bool has_monitordatanty() const;
  inline void clear_monitordatanty();
  static const int kMonitorDataNtyFieldNumber = 5;
  inline const ::DevDataNotify& monitordatanty() const;
  inline ::DevDataNotify* mutable_monitordatanty();
  inline ::DevDataNotify* release_monitordatanty();
  inline void set_allocated_monitordatanty(::DevDataNotify* monitordatanty);

  // optional .DevNetStatusNotify devNetStatusNty = 6;
  inline bool has_devnetstatusnty() const;
  inline void clear_devnetstatusnty();
  static const int kDevNetStatusNtyFieldNumber = 6;
  inline const ::DevNetStatusNotify& devnetstatusnty() const;
  inline ::DevNetStatusNotify* mutable_devnetstatusnty();
  inline ::DevNetStatusNotify* release_devnetstatusnty();
  inline void set_allocated_devnetstatusnty(::DevNetStatusNotify* devnetstatusnty);

  // optional .DevWorkStatusNotify devWorkStatusNty = 7;
  inline bool has_devworkstatusnty() const;
  inline void clear_devworkstatusnty();
  static const int kDevWorkStatusNtyFieldNumber = 7;
  inline const ::DevWorkStatusNotify& devworkstatusnty() const;
  inline ::DevWorkStatusNotify* mutable_devworkstatusnty();
  inline ::DevWorkStatusNotify* release_devworkstatusnty();
  inline void set_allocated_devworkstatusnty(::DevWorkStatusNotify* devworkstatusnty);

  // optional .DevAlarmStatusNotify devAlarmStatusNty = 8;
  inline bool has_devalarmstatusnty() const;
  inline void clear_devalarmstatusnty();
  static const int kDevAlarmStatusNtyFieldNumber = 8;
  inline const ::DevAlarmStatusNotify& devalarmstatusnty() const;
  inline ::DevAlarmStatusNotify* mutable_devalarmstatusnty();
  inline ::DevAlarmStatusNotify* release_devalarmstatusnty();
  inline void set_allocated_devalarmstatusnty(::DevAlarmStatusNotify* devalarmstatusnty);

  // optional .DeviceCommandResultNotify commandResultNty = 9;
  inline bool has_commandresultnty() const;
  inline void clear_commandresultnty();
  static const int kCommandResultNtyFieldNumber = 9;
  inline const ::DeviceCommandResultNotify& commandresultnty() const;
  inline ::DeviceCommandResultNotify* mutable_commandresultnty();
  inline ::DeviceCommandResultNotify* release_commandresultnty();
  inline void set_allocated_commandresultnty(::DeviceCommandResultNotify* commandresultnty);

  // optional .TurnOnDevMsg msgTurnOnReq = 10;
  inline bool has_msgturnonreq() const;
  inline void clear_msgturnonreq();
  static const int kMsgTurnOnReqFieldNumber = 10;
  inline const ::TurnOnDevMsg& msgturnonreq() const;
  inline ::TurnOnDevMsg* mutable_msgturnonreq();
  inline ::TurnOnDevMsg* release_msgturnonreq();
  inline void set_allocated_msgturnonreq(::TurnOnDevMsg* msgturnonreq);

  // optional .TurnOffDevMsg msgTurnOffNty = 11;
  inline bool has_msgturnoffnty() const;
  inline void clear_msgturnoffnty();
  static const int kMsgTurnOffNtyFieldNumber = 11;
  inline const ::TurnOffDevMsg& msgturnoffnty() const;
  inline ::TurnOffDevMsg* mutable_msgturnoffnty();
  inline ::TurnOffDevMsg* release_msgturnoffnty();
  inline void set_allocated_msgturnoffnty(::TurnOffDevMsg* msgturnoffnty);

  // optional .DeviceCommandMsg msgCommandReq = 12;
  inline bool has_msgcommandreq() const;
  inline void clear_msgcommandreq();
  static const int kMsgCommandReqFieldNumber = 12;
  inline const ::DeviceCommandMsg& msgcommandreq() const;
  inline ::DeviceCommandMsg* mutable_msgcommandreq();
  inline ::DeviceCommandMsg* release_msgcommandreq();
  inline void set_allocated_msgcommandreq(::DeviceCommandMsg* msgcommandreq);

  // @@protoc_insertion_point(class_scope:WebSocketMessage)
 private:
  inline void set_has_nmsgtype();
  inline void clear_has_nmsgtype();
  inline void set_has_smsgtype();
  inline void clear_has_smsgtype();
  inline void set_has_msgloginreq();
  inline void clear_has_msgloginreq();
  inline void set_has_msgloginack();
  inline void clear_has_msgloginack();
  inline void set_has_monitordatanty();
  inline void clear_has_monitordatanty();
  inline void set_has_devnetstatusnty();
  inline void clear_has_devnetstatusnty();
  inline void set_has_devworkstatusnty();
  inline void clear_has_devworkstatusnty();
  inline void set_has_devalarmstatusnty();
  inline void clear_has_devalarmstatusnty();
  inline void set_has_commandresultnty();
  inline void clear_has_commandresultnty();
  inline void set_has_msgturnonreq();
  inline void clear_has_msgturnonreq();
  inline void set_has_msgturnoffnty();
  inline void clear_has_msgturnoffnty();
  inline void set_has_msgcommandreq();
  inline void clear_has_msgcommandreq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* smsgtype_;
  ::LoginReq* msgloginreq_;
  ::LoginAck* msgloginack_;
  ::DevDataNotify* monitordatanty_;
  ::DevNetStatusNotify* devnetstatusnty_;
  ::DevWorkStatusNotify* devworkstatusnty_;
  ::DevAlarmStatusNotify* devalarmstatusnty_;
  ::DeviceCommandResultNotify* commandresultnty_;
  ::TurnOnDevMsg* msgturnonreq_;
  ::TurnOffDevMsg* msgturnoffnty_;
  ::DeviceCommandMsg* msgcommandreq_;
  ::google::protobuf::int32 nmsgtype_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static WebSocketMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// DevDataNotify_eCellMsg

// required int32 sCellId = 1;
inline bool DevDataNotify_eCellMsg::has_scellid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DevDataNotify_eCellMsg::set_has_scellid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DevDataNotify_eCellMsg::clear_has_scellid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DevDataNotify_eCellMsg::clear_scellid() {
  scellid_ = 0;
  clear_has_scellid();
}
inline ::google::protobuf::int32 DevDataNotify_eCellMsg::scellid() const {
  // @@protoc_insertion_point(field_get:DevDataNotify.eCellMsg.sCellId)
  return scellid_;
}
inline void DevDataNotify_eCellMsg::set_scellid(::google::protobuf::int32 value) {
  set_has_scellid();
  scellid_ = value;
  // @@protoc_insertion_point(field_set:DevDataNotify.eCellMsg.sCellId)
}

// required .e_CellType eCellType = 2;
inline bool DevDataNotify_eCellMsg::has_ecelltype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DevDataNotify_eCellMsg::set_has_ecelltype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DevDataNotify_eCellMsg::clear_has_ecelltype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DevDataNotify_eCellMsg::clear_ecelltype() {
  ecelltype_ = 0;
  clear_has_ecelltype();
}
inline ::e_CellType DevDataNotify_eCellMsg::ecelltype() const {
  // @@protoc_insertion_point(field_get:DevDataNotify.eCellMsg.eCellType)
  return static_cast< ::e_CellType >(ecelltype_);
}
inline void DevDataNotify_eCellMsg::set_ecelltype(::e_CellType value) {
  assert(::e_CellType_IsValid(value));
  set_has_ecelltype();
  ecelltype_ = value;
  // @@protoc_insertion_point(field_set:DevDataNotify.eCellMsg.eCellType)
}

// optional string sCellName = 3;
inline bool DevDataNotify_eCellMsg::has_scellname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DevDataNotify_eCellMsg::set_has_scellname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DevDataNotify_eCellMsg::clear_has_scellname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DevDataNotify_eCellMsg::clear_scellname() {
  if (scellname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scellname_->clear();
  }
  clear_has_scellname();
}
inline const ::std::string& DevDataNotify_eCellMsg::scellname() const {
  // @@protoc_insertion_point(field_get:DevDataNotify.eCellMsg.sCellName)
  return *scellname_;
}
inline void DevDataNotify_eCellMsg::set_scellname(const ::std::string& value) {
  set_has_scellname();
  if (scellname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scellname_ = new ::std::string;
  }
  scellname_->assign(value);
  // @@protoc_insertion_point(field_set:DevDataNotify.eCellMsg.sCellName)
}
inline void DevDataNotify_eCellMsg::set_scellname(const char* value) {
  set_has_scellname();
  if (scellname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scellname_ = new ::std::string;
  }
  scellname_->assign(value);
  // @@protoc_insertion_point(field_set_char:DevDataNotify.eCellMsg.sCellName)
}
inline void DevDataNotify_eCellMsg::set_scellname(const char* value, size_t size) {
  set_has_scellname();
  if (scellname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scellname_ = new ::std::string;
  }
  scellname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DevDataNotify.eCellMsg.sCellName)
}
inline ::std::string* DevDataNotify_eCellMsg::mutable_scellname() {
  set_has_scellname();
  if (scellname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scellname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DevDataNotify.eCellMsg.sCellName)
  return scellname_;
}
inline ::std::string* DevDataNotify_eCellMsg::release_scellname() {
  clear_has_scellname();
  if (scellname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scellname_;
    scellname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DevDataNotify_eCellMsg::set_allocated_scellname(::std::string* scellname) {
  if (scellname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scellname_;
  }
  if (scellname) {
    set_has_scellname();
    scellname_ = scellname;
  } else {
    clear_has_scellname();
    scellname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DevDataNotify.eCellMsg.sCellName)
}

// optional string sCellValue = 4;
inline bool DevDataNotify_eCellMsg::has_scellvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DevDataNotify_eCellMsg::set_has_scellvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DevDataNotify_eCellMsg::clear_has_scellvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DevDataNotify_eCellMsg::clear_scellvalue() {
  if (scellvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scellvalue_->clear();
  }
  clear_has_scellvalue();
}
inline const ::std::string& DevDataNotify_eCellMsg::scellvalue() const {
  // @@protoc_insertion_point(field_get:DevDataNotify.eCellMsg.sCellValue)
  return *scellvalue_;
}
inline void DevDataNotify_eCellMsg::set_scellvalue(const ::std::string& value) {
  set_has_scellvalue();
  if (scellvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scellvalue_ = new ::std::string;
  }
  scellvalue_->assign(value);
  // @@protoc_insertion_point(field_set:DevDataNotify.eCellMsg.sCellValue)
}
inline void DevDataNotify_eCellMsg::set_scellvalue(const char* value) {
  set_has_scellvalue();
  if (scellvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scellvalue_ = new ::std::string;
  }
  scellvalue_->assign(value);
  // @@protoc_insertion_point(field_set_char:DevDataNotify.eCellMsg.sCellValue)
}
inline void DevDataNotify_eCellMsg::set_scellvalue(const char* value, size_t size) {
  set_has_scellvalue();
  if (scellvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scellvalue_ = new ::std::string;
  }
  scellvalue_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DevDataNotify.eCellMsg.sCellValue)
}
inline ::std::string* DevDataNotify_eCellMsg::mutable_scellvalue() {
  set_has_scellvalue();
  if (scellvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scellvalue_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DevDataNotify.eCellMsg.sCellValue)
  return scellvalue_;
}
inline ::std::string* DevDataNotify_eCellMsg::release_scellvalue() {
  clear_has_scellvalue();
  if (scellvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scellvalue_;
    scellvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DevDataNotify_eCellMsg::set_allocated_scellvalue(::std::string* scellvalue) {
  if (scellvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scellvalue_;
  }
  if (scellvalue) {
    set_has_scellvalue();
    scellvalue_ = scellvalue;
  } else {
    clear_has_scellvalue();
    scellvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DevDataNotify.eCellMsg.sCellValue)
}

// optional bytes bAudioValue = 5;
inline bool DevDataNotify_eCellMsg::has_baudiovalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DevDataNotify_eCellMsg::set_has_baudiovalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DevDataNotify_eCellMsg::clear_has_baudiovalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DevDataNotify_eCellMsg::clear_baudiovalue() {
  if (baudiovalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    baudiovalue_->clear();
  }
  clear_has_baudiovalue();
}
inline const ::std::string& DevDataNotify_eCellMsg::baudiovalue() const {
  // @@protoc_insertion_point(field_get:DevDataNotify.eCellMsg.bAudioValue)
  return *baudiovalue_;
}
inline void DevDataNotify_eCellMsg::set_baudiovalue(const ::std::string& value) {
  set_has_baudiovalue();
  if (baudiovalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    baudiovalue_ = new ::std::string;
  }
  baudiovalue_->assign(value);
  // @@protoc_insertion_point(field_set:DevDataNotify.eCellMsg.bAudioValue)
}
inline void DevDataNotify_eCellMsg::set_baudiovalue(const char* value) {
  set_has_baudiovalue();
  if (baudiovalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    baudiovalue_ = new ::std::string;
  }
  baudiovalue_->assign(value);
  // @@protoc_insertion_point(field_set_char:DevDataNotify.eCellMsg.bAudioValue)
}
inline void DevDataNotify_eCellMsg::set_baudiovalue(const void* value, size_t size) {
  set_has_baudiovalue();
  if (baudiovalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    baudiovalue_ = new ::std::string;
  }
  baudiovalue_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DevDataNotify.eCellMsg.bAudioValue)
}
inline ::std::string* DevDataNotify_eCellMsg::mutable_baudiovalue() {
  set_has_baudiovalue();
  if (baudiovalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    baudiovalue_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DevDataNotify.eCellMsg.bAudioValue)
  return baudiovalue_;
}
inline ::std::string* DevDataNotify_eCellMsg::release_baudiovalue() {
  clear_has_baudiovalue();
  if (baudiovalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = baudiovalue_;
    baudiovalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DevDataNotify_eCellMsg::set_allocated_baudiovalue(::std::string* baudiovalue) {
  if (baudiovalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete baudiovalue_;
  }
  if (baudiovalue) {
    set_has_baudiovalue();
    baudiovalue_ = baudiovalue;
  } else {
    clear_has_baudiovalue();
    baudiovalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DevDataNotify.eCellMsg.bAudioValue)
}

// -------------------------------------------------------------------

// DevDataNotify

// required string sStationId = 1;
inline bool DevDataNotify::has_sstationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DevDataNotify::set_has_sstationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DevDataNotify::clear_has_sstationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DevDataNotify::clear_sstationid() {
  if (sstationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_->clear();
  }
  clear_has_sstationid();
}
inline const ::std::string& DevDataNotify::sstationid() const {
  // @@protoc_insertion_point(field_get:DevDataNotify.sStationId)
  return *sstationid_;
}
inline void DevDataNotify::set_sstationid(const ::std::string& value) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(value);
  // @@protoc_insertion_point(field_set:DevDataNotify.sStationId)
}
inline void DevDataNotify::set_sstationid(const char* value) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(value);
  // @@protoc_insertion_point(field_set_char:DevDataNotify.sStationId)
}
inline void DevDataNotify::set_sstationid(const char* value, size_t size) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DevDataNotify.sStationId)
}
inline ::std::string* DevDataNotify::mutable_sstationid() {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DevDataNotify.sStationId)
  return sstationid_;
}
inline ::std::string* DevDataNotify::release_sstationid() {
  clear_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sstationid_;
    sstationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DevDataNotify::set_allocated_sstationid(::std::string* sstationid) {
  if (sstationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sstationid_;
  }
  if (sstationid) {
    set_has_sstationid();
    sstationid_ = sstationid;
  } else {
    clear_has_sstationid();
    sstationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DevDataNotify.sStationId)
}

// required string sDevId = 2;
inline bool DevDataNotify::has_sdevid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DevDataNotify::set_has_sdevid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DevDataNotify::clear_has_sdevid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DevDataNotify::clear_sdevid() {
  if (sdevid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_->clear();
  }
  clear_has_sdevid();
}
inline const ::std::string& DevDataNotify::sdevid() const {
  // @@protoc_insertion_point(field_get:DevDataNotify.sDevId)
  return *sdevid_;
}
inline void DevDataNotify::set_sdevid(const ::std::string& value) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(value);
  // @@protoc_insertion_point(field_set:DevDataNotify.sDevId)
}
inline void DevDataNotify::set_sdevid(const char* value) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(value);
  // @@protoc_insertion_point(field_set_char:DevDataNotify.sDevId)
}
inline void DevDataNotify::set_sdevid(const char* value, size_t size) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DevDataNotify.sDevId)
}
inline ::std::string* DevDataNotify::mutable_sdevid() {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DevDataNotify.sDevId)
  return sdevid_;
}
inline ::std::string* DevDataNotify::release_sdevid() {
  clear_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sdevid_;
    sdevid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DevDataNotify::set_allocated_sdevid(::std::string* sdevid) {
  if (sdevid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdevid_;
  }
  if (sdevid) {
    set_has_sdevid();
    sdevid_ = sdevid;
  } else {
    clear_has_sdevid();
    sdevid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DevDataNotify.sDevId)
}

// optional string sDevName = 3;
inline bool DevDataNotify::has_sdevname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DevDataNotify::set_has_sdevname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DevDataNotify::clear_has_sdevname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DevDataNotify::clear_sdevname() {
  if (sdevname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_->clear();
  }
  clear_has_sdevname();
}
inline const ::std::string& DevDataNotify::sdevname() const {
  // @@protoc_insertion_point(field_get:DevDataNotify.sDevName)
  return *sdevname_;
}
inline void DevDataNotify::set_sdevname(const ::std::string& value) {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  sdevname_->assign(value);
  // @@protoc_insertion_point(field_set:DevDataNotify.sDevName)
}
inline void DevDataNotify::set_sdevname(const char* value) {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  sdevname_->assign(value);
  // @@protoc_insertion_point(field_set_char:DevDataNotify.sDevName)
}
inline void DevDataNotify::set_sdevname(const char* value, size_t size) {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  sdevname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DevDataNotify.sDevName)
}
inline ::std::string* DevDataNotify::mutable_sdevname() {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DevDataNotify.sDevName)
  return sdevname_;
}
inline ::std::string* DevDataNotify::release_sdevname() {
  clear_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sdevname_;
    sdevname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DevDataNotify::set_allocated_sdevname(::std::string* sdevname) {
  if (sdevname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdevname_;
  }
  if (sdevname) {
    set_has_sdevname();
    sdevname_ = sdevname;
  } else {
    clear_has_sdevname();
    sdevname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DevDataNotify.sDevName)
}

// optional int32 eDevType = 4;
inline bool DevDataNotify::has_edevtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DevDataNotify::set_has_edevtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DevDataNotify::clear_has_edevtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DevDataNotify::clear_edevtype() {
  edevtype_ = 0;
  clear_has_edevtype();
}
inline ::google::protobuf::int32 DevDataNotify::edevtype() const {
  // @@protoc_insertion_point(field_get:DevDataNotify.eDevType)
  return edevtype_;
}
inline void DevDataNotify::set_edevtype(::google::protobuf::int32 value) {
  set_has_edevtype();
  edevtype_ = value;
  // @@protoc_insertion_point(field_set:DevDataNotify.eDevType)
}

// repeated .DevDataNotify.eCellMsg cCellData = 5;
inline int DevDataNotify::ccelldata_size() const {
  return ccelldata_.size();
}
inline void DevDataNotify::clear_ccelldata() {
  ccelldata_.Clear();
}
inline const ::DevDataNotify_eCellMsg& DevDataNotify::ccelldata(int index) const {
  // @@protoc_insertion_point(field_get:DevDataNotify.cCellData)
  return ccelldata_.Get(index);
}
inline ::DevDataNotify_eCellMsg* DevDataNotify::mutable_ccelldata(int index) {
  // @@protoc_insertion_point(field_mutable:DevDataNotify.cCellData)
  return ccelldata_.Mutable(index);
}
inline ::DevDataNotify_eCellMsg* DevDataNotify::add_ccelldata() {
  // @@protoc_insertion_point(field_add:DevDataNotify.cCellData)
  return ccelldata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DevDataNotify_eCellMsg >&
DevDataNotify::ccelldata() const {
  // @@protoc_insertion_point(field_list:DevDataNotify.cCellData)
  return ccelldata_;
}
inline ::google::protobuf::RepeatedPtrField< ::DevDataNotify_eCellMsg >*
DevDataNotify::mutable_ccelldata() {
  // @@protoc_insertion_point(field_mutable_list:DevDataNotify.cCellData)
  return &ccelldata_;
}

// -------------------------------------------------------------------

// DevNetStatus

// required string sStationId = 1;
inline bool DevNetStatus::has_sstationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DevNetStatus::set_has_sstationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DevNetStatus::clear_has_sstationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DevNetStatus::clear_sstationid() {
  if (sstationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_->clear();
  }
  clear_has_sstationid();
}
inline const ::std::string& DevNetStatus::sstationid() const {
  // @@protoc_insertion_point(field_get:DevNetStatus.sStationId)
  return *sstationid_;
}
inline void DevNetStatus::set_sstationid(const ::std::string& value) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(value);
  // @@protoc_insertion_point(field_set:DevNetStatus.sStationId)
}
inline void DevNetStatus::set_sstationid(const char* value) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(value);
  // @@protoc_insertion_point(field_set_char:DevNetStatus.sStationId)
}
inline void DevNetStatus::set_sstationid(const char* value, size_t size) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DevNetStatus.sStationId)
}
inline ::std::string* DevNetStatus::mutable_sstationid() {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DevNetStatus.sStationId)
  return sstationid_;
}
inline ::std::string* DevNetStatus::release_sstationid() {
  clear_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sstationid_;
    sstationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DevNetStatus::set_allocated_sstationid(::std::string* sstationid) {
  if (sstationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sstationid_;
  }
  if (sstationid) {
    set_has_sstationid();
    sstationid_ = sstationid;
  } else {
    clear_has_sstationid();
    sstationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DevNetStatus.sStationId)
}

// required string sDevId = 2;
inline bool DevNetStatus::has_sdevid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DevNetStatus::set_has_sdevid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DevNetStatus::clear_has_sdevid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DevNetStatus::clear_sdevid() {
  if (sdevid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_->clear();
  }
  clear_has_sdevid();
}
inline const ::std::string& DevNetStatus::sdevid() const {
  // @@protoc_insertion_point(field_get:DevNetStatus.sDevId)
  return *sdevid_;
}
inline void DevNetStatus::set_sdevid(const ::std::string& value) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(value);
  // @@protoc_insertion_point(field_set:DevNetStatus.sDevId)
}
inline void DevNetStatus::set_sdevid(const char* value) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(value);
  // @@protoc_insertion_point(field_set_char:DevNetStatus.sDevId)
}
inline void DevNetStatus::set_sdevid(const char* value, size_t size) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DevNetStatus.sDevId)
}
inline ::std::string* DevNetStatus::mutable_sdevid() {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DevNetStatus.sDevId)
  return sdevid_;
}
inline ::std::string* DevNetStatus::release_sdevid() {
  clear_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sdevid_;
    sdevid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DevNetStatus::set_allocated_sdevid(::std::string* sdevid) {
  if (sdevid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdevid_;
  }
  if (sdevid) {
    set_has_sdevid();
    sdevid_ = sdevid;
  } else {
    clear_has_sdevid();
    sdevid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DevNetStatus.sDevId)
}

// optional string sDevName = 3;
inline bool DevNetStatus::has_sdevname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DevNetStatus::set_has_sdevname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DevNetStatus::clear_has_sdevname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DevNetStatus::clear_sdevname() {
  if (sdevname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_->clear();
  }
  clear_has_sdevname();
}
inline const ::std::string& DevNetStatus::sdevname() const {
  // @@protoc_insertion_point(field_get:DevNetStatus.sDevName)
  return *sdevname_;
}
inline void DevNetStatus::set_sdevname(const ::std::string& value) {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  sdevname_->assign(value);
  // @@protoc_insertion_point(field_set:DevNetStatus.sDevName)
}
inline void DevNetStatus::set_sdevname(const char* value) {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  sdevname_->assign(value);
  // @@protoc_insertion_point(field_set_char:DevNetStatus.sDevName)
}
inline void DevNetStatus::set_sdevname(const char* value, size_t size) {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  sdevname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DevNetStatus.sDevName)
}
inline ::std::string* DevNetStatus::mutable_sdevname() {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DevNetStatus.sDevName)
  return sdevname_;
}
inline ::std::string* DevNetStatus::release_sdevname() {
  clear_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sdevname_;
    sdevname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DevNetStatus::set_allocated_sdevname(::std::string* sdevname) {
  if (sdevname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdevname_;
  }
  if (sdevname) {
    set_has_sdevname();
    sdevname_ = sdevname;
  } else {
    clear_has_sdevname();
    sdevname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DevNetStatus.sDevName)
}

// optional int32 eDevType = 4;
inline bool DevNetStatus::has_edevtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DevNetStatus::set_has_edevtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DevNetStatus::clear_has_edevtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DevNetStatus::clear_edevtype() {
  edevtype_ = 0;
  clear_has_edevtype();
}
inline ::google::protobuf::int32 DevNetStatus::edevtype() const {
  // @@protoc_insertion_point(field_get:DevNetStatus.eDevType)
  return edevtype_;
}
inline void DevNetStatus::set_edevtype(::google::protobuf::int32 value) {
  set_has_edevtype();
  edevtype_ = value;
  // @@protoc_insertion_point(field_set:DevNetStatus.eDevType)
}

// optional .DevNetStatus.e_NetStatus eNetStatus = 5;
inline bool DevNetStatus::has_enetstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DevNetStatus::set_has_enetstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DevNetStatus::clear_has_enetstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DevNetStatus::clear_enetstatus() {
  enetstatus_ = 0;
  clear_has_enetstatus();
}
inline ::DevNetStatus_e_NetStatus DevNetStatus::enetstatus() const {
  // @@protoc_insertion_point(field_get:DevNetStatus.eNetStatus)
  return static_cast< ::DevNetStatus_e_NetStatus >(enetstatus_);
}
inline void DevNetStatus::set_enetstatus(::DevNetStatus_e_NetStatus value) {
  assert(::DevNetStatus_e_NetStatus_IsValid(value));
  set_has_enetstatus();
  enetstatus_ = value;
  // @@protoc_insertion_point(field_set:DevNetStatus.eNetStatus)
}

// -------------------------------------------------------------------

// DevNetStatusNotify

// repeated .DevNetStatus cDevCurNetStatus = 1;
inline int DevNetStatusNotify::cdevcurnetstatus_size() const {
  return cdevcurnetstatus_.size();
}
inline void DevNetStatusNotify::clear_cdevcurnetstatus() {
  cdevcurnetstatus_.Clear();
}
inline const ::DevNetStatus& DevNetStatusNotify::cdevcurnetstatus(int index) const {
  // @@protoc_insertion_point(field_get:DevNetStatusNotify.cDevCurNetStatus)
  return cdevcurnetstatus_.Get(index);
}
inline ::DevNetStatus* DevNetStatusNotify::mutable_cdevcurnetstatus(int index) {
  // @@protoc_insertion_point(field_mutable:DevNetStatusNotify.cDevCurNetStatus)
  return cdevcurnetstatus_.Mutable(index);
}
inline ::DevNetStatus* DevNetStatusNotify::add_cdevcurnetstatus() {
  // @@protoc_insertion_point(field_add:DevNetStatusNotify.cDevCurNetStatus)
  return cdevcurnetstatus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DevNetStatus >&
DevNetStatusNotify::cdevcurnetstatus() const {
  // @@protoc_insertion_point(field_list:DevNetStatusNotify.cDevCurNetStatus)
  return cdevcurnetstatus_;
}
inline ::google::protobuf::RepeatedPtrField< ::DevNetStatus >*
DevNetStatusNotify::mutable_cdevcurnetstatus() {
  // @@protoc_insertion_point(field_mutable_list:DevNetStatusNotify.cDevCurNetStatus)
  return &cdevcurnetstatus_;
}

// -------------------------------------------------------------------

// DevWorkStatus

// required string sStationId = 1;
inline bool DevWorkStatus::has_sstationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DevWorkStatus::set_has_sstationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DevWorkStatus::clear_has_sstationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DevWorkStatus::clear_sstationid() {
  if (sstationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_->clear();
  }
  clear_has_sstationid();
}
inline const ::std::string& DevWorkStatus::sstationid() const {
  // @@protoc_insertion_point(field_get:DevWorkStatus.sStationId)
  return *sstationid_;
}
inline void DevWorkStatus::set_sstationid(const ::std::string& value) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(value);
  // @@protoc_insertion_point(field_set:DevWorkStatus.sStationId)
}
inline void DevWorkStatus::set_sstationid(const char* value) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(value);
  // @@protoc_insertion_point(field_set_char:DevWorkStatus.sStationId)
}
inline void DevWorkStatus::set_sstationid(const char* value, size_t size) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DevWorkStatus.sStationId)
}
inline ::std::string* DevWorkStatus::mutable_sstationid() {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DevWorkStatus.sStationId)
  return sstationid_;
}
inline ::std::string* DevWorkStatus::release_sstationid() {
  clear_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sstationid_;
    sstationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DevWorkStatus::set_allocated_sstationid(::std::string* sstationid) {
  if (sstationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sstationid_;
  }
  if (sstationid) {
    set_has_sstationid();
    sstationid_ = sstationid;
  } else {
    clear_has_sstationid();
    sstationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DevWorkStatus.sStationId)
}

// required string sDevId = 2;
inline bool DevWorkStatus::has_sdevid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DevWorkStatus::set_has_sdevid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DevWorkStatus::clear_has_sdevid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DevWorkStatus::clear_sdevid() {
  if (sdevid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_->clear();
  }
  clear_has_sdevid();
}
inline const ::std::string& DevWorkStatus::sdevid() const {
  // @@protoc_insertion_point(field_get:DevWorkStatus.sDevId)
  return *sdevid_;
}
inline void DevWorkStatus::set_sdevid(const ::std::string& value) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(value);
  // @@protoc_insertion_point(field_set:DevWorkStatus.sDevId)
}
inline void DevWorkStatus::set_sdevid(const char* value) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(value);
  // @@protoc_insertion_point(field_set_char:DevWorkStatus.sDevId)
}
inline void DevWorkStatus::set_sdevid(const char* value, size_t size) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DevWorkStatus.sDevId)
}
inline ::std::string* DevWorkStatus::mutable_sdevid() {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DevWorkStatus.sDevId)
  return sdevid_;
}
inline ::std::string* DevWorkStatus::release_sdevid() {
  clear_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sdevid_;
    sdevid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DevWorkStatus::set_allocated_sdevid(::std::string* sdevid) {
  if (sdevid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdevid_;
  }
  if (sdevid) {
    set_has_sdevid();
    sdevid_ = sdevid;
  } else {
    clear_has_sdevid();
    sdevid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DevWorkStatus.sDevId)
}

// optional string sDevName = 3;
inline bool DevWorkStatus::has_sdevname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DevWorkStatus::set_has_sdevname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DevWorkStatus::clear_has_sdevname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DevWorkStatus::clear_sdevname() {
  if (sdevname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_->clear();
  }
  clear_has_sdevname();
}
inline const ::std::string& DevWorkStatus::sdevname() const {
  // @@protoc_insertion_point(field_get:DevWorkStatus.sDevName)
  return *sdevname_;
}
inline void DevWorkStatus::set_sdevname(const ::std::string& value) {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  sdevname_->assign(value);
  // @@protoc_insertion_point(field_set:DevWorkStatus.sDevName)
}
inline void DevWorkStatus::set_sdevname(const char* value) {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  sdevname_->assign(value);
  // @@protoc_insertion_point(field_set_char:DevWorkStatus.sDevName)
}
inline void DevWorkStatus::set_sdevname(const char* value, size_t size) {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  sdevname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DevWorkStatus.sDevName)
}
inline ::std::string* DevWorkStatus::mutable_sdevname() {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DevWorkStatus.sDevName)
  return sdevname_;
}
inline ::std::string* DevWorkStatus::release_sdevname() {
  clear_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sdevname_;
    sdevname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DevWorkStatus::set_allocated_sdevname(::std::string* sdevname) {
  if (sdevname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdevname_;
  }
  if (sdevname) {
    set_has_sdevname();
    sdevname_ = sdevname;
  } else {
    clear_has_sdevname();
    sdevname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DevWorkStatus.sDevName)
}

// optional int32 eDevType = 4;
inline bool DevWorkStatus::has_edevtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DevWorkStatus::set_has_edevtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DevWorkStatus::clear_has_edevtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DevWorkStatus::clear_edevtype() {
  edevtype_ = 0;
  clear_has_edevtype();
}
inline ::google::protobuf::int32 DevWorkStatus::edevtype() const {
  // @@protoc_insertion_point(field_get:DevWorkStatus.eDevType)
  return edevtype_;
}
inline void DevWorkStatus::set_edevtype(::google::protobuf::int32 value) {
  set_has_edevtype();
  edevtype_ = value;
  // @@protoc_insertion_point(field_set:DevWorkStatus.eDevType)
}

// optional .DevWorkStatus.e_WorkStatus eWorkStatus = 5;
inline bool DevWorkStatus::has_eworkstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DevWorkStatus::set_has_eworkstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DevWorkStatus::clear_has_eworkstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DevWorkStatus::clear_eworkstatus() {
  eworkstatus_ = 0;
  clear_has_eworkstatus();
}
inline ::DevWorkStatus_e_WorkStatus DevWorkStatus::eworkstatus() const {
  // @@protoc_insertion_point(field_get:DevWorkStatus.eWorkStatus)
  return static_cast< ::DevWorkStatus_e_WorkStatus >(eworkstatus_);
}
inline void DevWorkStatus::set_eworkstatus(::DevWorkStatus_e_WorkStatus value) {
  assert(::DevWorkStatus_e_WorkStatus_IsValid(value));
  set_has_eworkstatus();
  eworkstatus_ = value;
  // @@protoc_insertion_point(field_set:DevWorkStatus.eWorkStatus)
}

// -------------------------------------------------------------------

// DevWorkStatusNotify

// repeated .DevWorkStatus cDevCurWorkStatus = 1;
inline int DevWorkStatusNotify::cdevcurworkstatus_size() const {
  return cdevcurworkstatus_.size();
}
inline void DevWorkStatusNotify::clear_cdevcurworkstatus() {
  cdevcurworkstatus_.Clear();
}
inline const ::DevWorkStatus& DevWorkStatusNotify::cdevcurworkstatus(int index) const {
  // @@protoc_insertion_point(field_get:DevWorkStatusNotify.cDevCurWorkStatus)
  return cdevcurworkstatus_.Get(index);
}
inline ::DevWorkStatus* DevWorkStatusNotify::mutable_cdevcurworkstatus(int index) {
  // @@protoc_insertion_point(field_mutable:DevWorkStatusNotify.cDevCurWorkStatus)
  return cdevcurworkstatus_.Mutable(index);
}
inline ::DevWorkStatus* DevWorkStatusNotify::add_cdevcurworkstatus() {
  // @@protoc_insertion_point(field_add:DevWorkStatusNotify.cDevCurWorkStatus)
  return cdevcurworkstatus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DevWorkStatus >&
DevWorkStatusNotify::cdevcurworkstatus() const {
  // @@protoc_insertion_point(field_list:DevWorkStatusNotify.cDevCurWorkStatus)
  return cdevcurworkstatus_;
}
inline ::google::protobuf::RepeatedPtrField< ::DevWorkStatus >*
DevWorkStatusNotify::mutable_cdevcurworkstatus() {
  // @@protoc_insertion_point(field_mutable_list:DevWorkStatusNotify.cDevCurWorkStatus)
  return &cdevcurworkstatus_;
}

// -------------------------------------------------------------------

// DevAlarmStatus_eCellAlarmMsg

// required int32 sCellId = 1;
inline bool DevAlarmStatus_eCellAlarmMsg::has_scellid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DevAlarmStatus_eCellAlarmMsg::set_has_scellid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DevAlarmStatus_eCellAlarmMsg::clear_has_scellid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DevAlarmStatus_eCellAlarmMsg::clear_scellid() {
  scellid_ = 0;
  clear_has_scellid();
}
inline ::google::protobuf::int32 DevAlarmStatus_eCellAlarmMsg::scellid() const {
  // @@protoc_insertion_point(field_get:DevAlarmStatus.eCellAlarmMsg.sCellId)
  return scellid_;
}
inline void DevAlarmStatus_eCellAlarmMsg::set_scellid(::google::protobuf::int32 value) {
  set_has_scellid();
  scellid_ = value;
  // @@protoc_insertion_point(field_set:DevAlarmStatus.eCellAlarmMsg.sCellId)
}

// optional string sCellName = 2;
inline bool DevAlarmStatus_eCellAlarmMsg::has_scellname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DevAlarmStatus_eCellAlarmMsg::set_has_scellname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DevAlarmStatus_eCellAlarmMsg::clear_has_scellname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DevAlarmStatus_eCellAlarmMsg::clear_scellname() {
  if (scellname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scellname_->clear();
  }
  clear_has_scellname();
}
inline const ::std::string& DevAlarmStatus_eCellAlarmMsg::scellname() const {
  // @@protoc_insertion_point(field_get:DevAlarmStatus.eCellAlarmMsg.sCellName)
  return *scellname_;
}
inline void DevAlarmStatus_eCellAlarmMsg::set_scellname(const ::std::string& value) {
  set_has_scellname();
  if (scellname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scellname_ = new ::std::string;
  }
  scellname_->assign(value);
  // @@protoc_insertion_point(field_set:DevAlarmStatus.eCellAlarmMsg.sCellName)
}
inline void DevAlarmStatus_eCellAlarmMsg::set_scellname(const char* value) {
  set_has_scellname();
  if (scellname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scellname_ = new ::std::string;
  }
  scellname_->assign(value);
  // @@protoc_insertion_point(field_set_char:DevAlarmStatus.eCellAlarmMsg.sCellName)
}
inline void DevAlarmStatus_eCellAlarmMsg::set_scellname(const char* value, size_t size) {
  set_has_scellname();
  if (scellname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scellname_ = new ::std::string;
  }
  scellname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DevAlarmStatus.eCellAlarmMsg.sCellName)
}
inline ::std::string* DevAlarmStatus_eCellAlarmMsg::mutable_scellname() {
  set_has_scellname();
  if (scellname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scellname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DevAlarmStatus.eCellAlarmMsg.sCellName)
  return scellname_;
}
inline ::std::string* DevAlarmStatus_eCellAlarmMsg::release_scellname() {
  clear_has_scellname();
  if (scellname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scellname_;
    scellname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DevAlarmStatus_eCellAlarmMsg::set_allocated_scellname(::std::string* scellname) {
  if (scellname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scellname_;
  }
  if (scellname) {
    set_has_scellname();
    scellname_ = scellname;
  } else {
    clear_has_scellname();
    scellname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DevAlarmStatus.eCellAlarmMsg.sCellName)
}

// optional .e_AlarmStatus cCellStatus = 3;
inline bool DevAlarmStatus_eCellAlarmMsg::has_ccellstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DevAlarmStatus_eCellAlarmMsg::set_has_ccellstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DevAlarmStatus_eCellAlarmMsg::clear_has_ccellstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DevAlarmStatus_eCellAlarmMsg::clear_ccellstatus() {
  ccellstatus_ = 0;
  clear_has_ccellstatus();
}
inline ::e_AlarmStatus DevAlarmStatus_eCellAlarmMsg::ccellstatus() const {
  // @@protoc_insertion_point(field_get:DevAlarmStatus.eCellAlarmMsg.cCellStatus)
  return static_cast< ::e_AlarmStatus >(ccellstatus_);
}
inline void DevAlarmStatus_eCellAlarmMsg::set_ccellstatus(::e_AlarmStatus value) {
  assert(::e_AlarmStatus_IsValid(value));
  set_has_ccellstatus();
  ccellstatus_ = value;
  // @@protoc_insertion_point(field_set:DevAlarmStatus.eCellAlarmMsg.cCellStatus)
}

// optional string sStartTime = 4;
inline bool DevAlarmStatus_eCellAlarmMsg::has_sstarttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DevAlarmStatus_eCellAlarmMsg::set_has_sstarttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DevAlarmStatus_eCellAlarmMsg::clear_has_sstarttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DevAlarmStatus_eCellAlarmMsg::clear_sstarttime() {
  if (sstarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstarttime_->clear();
  }
  clear_has_sstarttime();
}
inline const ::std::string& DevAlarmStatus_eCellAlarmMsg::sstarttime() const {
  // @@protoc_insertion_point(field_get:DevAlarmStatus.eCellAlarmMsg.sStartTime)
  return *sstarttime_;
}
inline void DevAlarmStatus_eCellAlarmMsg::set_sstarttime(const ::std::string& value) {
  set_has_sstarttime();
  if (sstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstarttime_ = new ::std::string;
  }
  sstarttime_->assign(value);
  // @@protoc_insertion_point(field_set:DevAlarmStatus.eCellAlarmMsg.sStartTime)
}
inline void DevAlarmStatus_eCellAlarmMsg::set_sstarttime(const char* value) {
  set_has_sstarttime();
  if (sstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstarttime_ = new ::std::string;
  }
  sstarttime_->assign(value);
  // @@protoc_insertion_point(field_set_char:DevAlarmStatus.eCellAlarmMsg.sStartTime)
}
inline void DevAlarmStatus_eCellAlarmMsg::set_sstarttime(const char* value, size_t size) {
  set_has_sstarttime();
  if (sstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstarttime_ = new ::std::string;
  }
  sstarttime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DevAlarmStatus.eCellAlarmMsg.sStartTime)
}
inline ::std::string* DevAlarmStatus_eCellAlarmMsg::mutable_sstarttime() {
  set_has_sstarttime();
  if (sstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstarttime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DevAlarmStatus.eCellAlarmMsg.sStartTime)
  return sstarttime_;
}
inline ::std::string* DevAlarmStatus_eCellAlarmMsg::release_sstarttime() {
  clear_has_sstarttime();
  if (sstarttime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sstarttime_;
    sstarttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DevAlarmStatus_eCellAlarmMsg::set_allocated_sstarttime(::std::string* sstarttime) {
  if (sstarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sstarttime_;
  }
  if (sstarttime) {
    set_has_sstarttime();
    sstarttime_ = sstarttime;
  } else {
    clear_has_sstarttime();
    sstarttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DevAlarmStatus.eCellAlarmMsg.sStartTime)
}

// optional string sDesp = 5;
inline bool DevAlarmStatus_eCellAlarmMsg::has_sdesp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DevAlarmStatus_eCellAlarmMsg::set_has_sdesp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DevAlarmStatus_eCellAlarmMsg::clear_has_sdesp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DevAlarmStatus_eCellAlarmMsg::clear_sdesp() {
  if (sdesp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdesp_->clear();
  }
  clear_has_sdesp();
}
inline const ::std::string& DevAlarmStatus_eCellAlarmMsg::sdesp() const {
  // @@protoc_insertion_point(field_get:DevAlarmStatus.eCellAlarmMsg.sDesp)
  return *sdesp_;
}
inline void DevAlarmStatus_eCellAlarmMsg::set_sdesp(const ::std::string& value) {
  set_has_sdesp();
  if (sdesp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdesp_ = new ::std::string;
  }
  sdesp_->assign(value);
  // @@protoc_insertion_point(field_set:DevAlarmStatus.eCellAlarmMsg.sDesp)
}
inline void DevAlarmStatus_eCellAlarmMsg::set_sdesp(const char* value) {
  set_has_sdesp();
  if (sdesp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdesp_ = new ::std::string;
  }
  sdesp_->assign(value);
  // @@protoc_insertion_point(field_set_char:DevAlarmStatus.eCellAlarmMsg.sDesp)
}
inline void DevAlarmStatus_eCellAlarmMsg::set_sdesp(const char* value, size_t size) {
  set_has_sdesp();
  if (sdesp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdesp_ = new ::std::string;
  }
  sdesp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DevAlarmStatus.eCellAlarmMsg.sDesp)
}
inline ::std::string* DevAlarmStatus_eCellAlarmMsg::mutable_sdesp() {
  set_has_sdesp();
  if (sdesp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdesp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DevAlarmStatus.eCellAlarmMsg.sDesp)
  return sdesp_;
}
inline ::std::string* DevAlarmStatus_eCellAlarmMsg::release_sdesp() {
  clear_has_sdesp();
  if (sdesp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sdesp_;
    sdesp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DevAlarmStatus_eCellAlarmMsg::set_allocated_sdesp(::std::string* sdesp) {
  if (sdesp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdesp_;
  }
  if (sdesp) {
    set_has_sdesp();
    sdesp_ = sdesp;
  } else {
    clear_has_sdesp();
    sdesp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DevAlarmStatus.eCellAlarmMsg.sDesp)
}

// optional int32 nAlarmLevel = 6;
inline bool DevAlarmStatus_eCellAlarmMsg::has_nalarmlevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DevAlarmStatus_eCellAlarmMsg::set_has_nalarmlevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DevAlarmStatus_eCellAlarmMsg::clear_has_nalarmlevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DevAlarmStatus_eCellAlarmMsg::clear_nalarmlevel() {
  nalarmlevel_ = 0;
  clear_has_nalarmlevel();
}
inline ::google::protobuf::int32 DevAlarmStatus_eCellAlarmMsg::nalarmlevel() const {
  // @@protoc_insertion_point(field_get:DevAlarmStatus.eCellAlarmMsg.nAlarmLevel)
  return nalarmlevel_;
}
inline void DevAlarmStatus_eCellAlarmMsg::set_nalarmlevel(::google::protobuf::int32 value) {
  set_has_nalarmlevel();
  nalarmlevel_ = value;
  // @@protoc_insertion_point(field_set:DevAlarmStatus.eCellAlarmMsg.nAlarmLevel)
}

// -------------------------------------------------------------------

// DevAlarmStatus

// required string sStationId = 1;
inline bool DevAlarmStatus::has_sstationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DevAlarmStatus::set_has_sstationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DevAlarmStatus::clear_has_sstationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DevAlarmStatus::clear_sstationid() {
  if (sstationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_->clear();
  }
  clear_has_sstationid();
}
inline const ::std::string& DevAlarmStatus::sstationid() const {
  // @@protoc_insertion_point(field_get:DevAlarmStatus.sStationId)
  return *sstationid_;
}
inline void DevAlarmStatus::set_sstationid(const ::std::string& value) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(value);
  // @@protoc_insertion_point(field_set:DevAlarmStatus.sStationId)
}
inline void DevAlarmStatus::set_sstationid(const char* value) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(value);
  // @@protoc_insertion_point(field_set_char:DevAlarmStatus.sStationId)
}
inline void DevAlarmStatus::set_sstationid(const char* value, size_t size) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DevAlarmStatus.sStationId)
}
inline ::std::string* DevAlarmStatus::mutable_sstationid() {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DevAlarmStatus.sStationId)
  return sstationid_;
}
inline ::std::string* DevAlarmStatus::release_sstationid() {
  clear_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sstationid_;
    sstationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DevAlarmStatus::set_allocated_sstationid(::std::string* sstationid) {
  if (sstationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sstationid_;
  }
  if (sstationid) {
    set_has_sstationid();
    sstationid_ = sstationid;
  } else {
    clear_has_sstationid();
    sstationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DevAlarmStatus.sStationId)
}

// required string sDevId = 2;
inline bool DevAlarmStatus::has_sdevid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DevAlarmStatus::set_has_sdevid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DevAlarmStatus::clear_has_sdevid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DevAlarmStatus::clear_sdevid() {
  if (sdevid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_->clear();
  }
  clear_has_sdevid();
}
inline const ::std::string& DevAlarmStatus::sdevid() const {
  // @@protoc_insertion_point(field_get:DevAlarmStatus.sDevId)
  return *sdevid_;
}
inline void DevAlarmStatus::set_sdevid(const ::std::string& value) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(value);
  // @@protoc_insertion_point(field_set:DevAlarmStatus.sDevId)
}
inline void DevAlarmStatus::set_sdevid(const char* value) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(value);
  // @@protoc_insertion_point(field_set_char:DevAlarmStatus.sDevId)
}
inline void DevAlarmStatus::set_sdevid(const char* value, size_t size) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DevAlarmStatus.sDevId)
}
inline ::std::string* DevAlarmStatus::mutable_sdevid() {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DevAlarmStatus.sDevId)
  return sdevid_;
}
inline ::std::string* DevAlarmStatus::release_sdevid() {
  clear_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sdevid_;
    sdevid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DevAlarmStatus::set_allocated_sdevid(::std::string* sdevid) {
  if (sdevid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdevid_;
  }
  if (sdevid) {
    set_has_sdevid();
    sdevid_ = sdevid;
  } else {
    clear_has_sdevid();
    sdevid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DevAlarmStatus.sDevId)
}

// optional string sDevName = 3;
inline bool DevAlarmStatus::has_sdevname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DevAlarmStatus::set_has_sdevname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DevAlarmStatus::clear_has_sdevname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DevAlarmStatus::clear_sdevname() {
  if (sdevname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_->clear();
  }
  clear_has_sdevname();
}
inline const ::std::string& DevAlarmStatus::sdevname() const {
  // @@protoc_insertion_point(field_get:DevAlarmStatus.sDevName)
  return *sdevname_;
}
inline void DevAlarmStatus::set_sdevname(const ::std::string& value) {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  sdevname_->assign(value);
  // @@protoc_insertion_point(field_set:DevAlarmStatus.sDevName)
}
inline void DevAlarmStatus::set_sdevname(const char* value) {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  sdevname_->assign(value);
  // @@protoc_insertion_point(field_set_char:DevAlarmStatus.sDevName)
}
inline void DevAlarmStatus::set_sdevname(const char* value, size_t size) {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  sdevname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DevAlarmStatus.sDevName)
}
inline ::std::string* DevAlarmStatus::mutable_sdevname() {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DevAlarmStatus.sDevName)
  return sdevname_;
}
inline ::std::string* DevAlarmStatus::release_sdevname() {
  clear_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sdevname_;
    sdevname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DevAlarmStatus::set_allocated_sdevname(::std::string* sdevname) {
  if (sdevname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdevname_;
  }
  if (sdevname) {
    set_has_sdevname();
    sdevname_ = sdevname;
  } else {
    clear_has_sdevname();
    sdevname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DevAlarmStatus.sDevName)
}

// optional int32 eDevType = 4;
inline bool DevAlarmStatus::has_edevtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DevAlarmStatus::set_has_edevtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DevAlarmStatus::clear_has_edevtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DevAlarmStatus::clear_edevtype() {
  edevtype_ = 0;
  clear_has_edevtype();
}
inline ::google::protobuf::int32 DevAlarmStatus::edevtype() const {
  // @@protoc_insertion_point(field_get:DevAlarmStatus.eDevType)
  return edevtype_;
}
inline void DevAlarmStatus::set_edevtype(::google::protobuf::int32 value) {
  set_has_edevtype();
  edevtype_ = value;
  // @@protoc_insertion_point(field_set:DevAlarmStatus.eDevType)
}

// optional int32 nAlarmCount = 5;
inline bool DevAlarmStatus::has_nalarmcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DevAlarmStatus::set_has_nalarmcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DevAlarmStatus::clear_has_nalarmcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DevAlarmStatus::clear_nalarmcount() {
  nalarmcount_ = 0;
  clear_has_nalarmcount();
}
inline ::google::protobuf::int32 DevAlarmStatus::nalarmcount() const {
  // @@protoc_insertion_point(field_get:DevAlarmStatus.nAlarmCount)
  return nalarmcount_;
}
inline void DevAlarmStatus::set_nalarmcount(::google::protobuf::int32 value) {
  set_has_nalarmcount();
  nalarmcount_ = value;
  // @@protoc_insertion_point(field_set:DevAlarmStatus.nAlarmCount)
}

// optional int32 nAlarmMod = 6;
inline bool DevAlarmStatus::has_nalarmmod() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DevAlarmStatus::set_has_nalarmmod() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DevAlarmStatus::clear_has_nalarmmod() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DevAlarmStatus::clear_nalarmmod() {
  nalarmmod_ = 0;
  clear_has_nalarmmod();
}
inline ::google::protobuf::int32 DevAlarmStatus::nalarmmod() const {
  // @@protoc_insertion_point(field_get:DevAlarmStatus.nAlarmMod)
  return nalarmmod_;
}
inline void DevAlarmStatus::set_nalarmmod(::google::protobuf::int32 value) {
  set_has_nalarmmod();
  nalarmmod_ = value;
  // @@protoc_insertion_point(field_set:DevAlarmStatus.nAlarmMod)
}

// repeated .DevAlarmStatus.eCellAlarmMsg cCellAlarm = 7;
inline int DevAlarmStatus::ccellalarm_size() const {
  return ccellalarm_.size();
}
inline void DevAlarmStatus::clear_ccellalarm() {
  ccellalarm_.Clear();
}
inline const ::DevAlarmStatus_eCellAlarmMsg& DevAlarmStatus::ccellalarm(int index) const {
  // @@protoc_insertion_point(field_get:DevAlarmStatus.cCellAlarm)
  return ccellalarm_.Get(index);
}
inline ::DevAlarmStatus_eCellAlarmMsg* DevAlarmStatus::mutable_ccellalarm(int index) {
  // @@protoc_insertion_point(field_mutable:DevAlarmStatus.cCellAlarm)
  return ccellalarm_.Mutable(index);
}
inline ::DevAlarmStatus_eCellAlarmMsg* DevAlarmStatus::add_ccellalarm() {
  // @@protoc_insertion_point(field_add:DevAlarmStatus.cCellAlarm)
  return ccellalarm_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DevAlarmStatus_eCellAlarmMsg >&
DevAlarmStatus::ccellalarm() const {
  // @@protoc_insertion_point(field_list:DevAlarmStatus.cCellAlarm)
  return ccellalarm_;
}
inline ::google::protobuf::RepeatedPtrField< ::DevAlarmStatus_eCellAlarmMsg >*
DevAlarmStatus::mutable_ccellalarm() {
  // @@protoc_insertion_point(field_mutable_list:DevAlarmStatus.cCellAlarm)
  return &ccellalarm_;
}

// -------------------------------------------------------------------

// DevAlarmStatusNotify

// repeated .DevAlarmStatus cDevCurAlarmStatus = 1;
inline int DevAlarmStatusNotify::cdevcuralarmstatus_size() const {
  return cdevcuralarmstatus_.size();
}
inline void DevAlarmStatusNotify::clear_cdevcuralarmstatus() {
  cdevcuralarmstatus_.Clear();
}
inline const ::DevAlarmStatus& DevAlarmStatusNotify::cdevcuralarmstatus(int index) const {
  // @@protoc_insertion_point(field_get:DevAlarmStatusNotify.cDevCurAlarmStatus)
  return cdevcuralarmstatus_.Get(index);
}
inline ::DevAlarmStatus* DevAlarmStatusNotify::mutable_cdevcuralarmstatus(int index) {
  // @@protoc_insertion_point(field_mutable:DevAlarmStatusNotify.cDevCurAlarmStatus)
  return cdevcuralarmstatus_.Mutable(index);
}
inline ::DevAlarmStatus* DevAlarmStatusNotify::add_cdevcuralarmstatus() {
  // @@protoc_insertion_point(field_add:DevAlarmStatusNotify.cDevCurAlarmStatus)
  return cdevcuralarmstatus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DevAlarmStatus >&
DevAlarmStatusNotify::cdevcuralarmstatus() const {
  // @@protoc_insertion_point(field_list:DevAlarmStatusNotify.cDevCurAlarmStatus)
  return cdevcuralarmstatus_;
}
inline ::google::protobuf::RepeatedPtrField< ::DevAlarmStatus >*
DevAlarmStatusNotify::mutable_cdevcuralarmstatus() {
  // @@protoc_insertion_point(field_mutable_list:DevAlarmStatusNotify.cDevCurAlarmStatus)
  return &cdevcuralarmstatus_;
}

// -------------------------------------------------------------------

// LoginReq

// optional string sUsrName = 1;
inline bool LoginReq::has_susrname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginReq::set_has_susrname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginReq::clear_has_susrname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginReq::clear_susrname() {
  if (susrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susrname_->clear();
  }
  clear_has_susrname();
}
inline const ::std::string& LoginReq::susrname() const {
  // @@protoc_insertion_point(field_get:LoginReq.sUsrName)
  return *susrname_;
}
inline void LoginReq::set_susrname(const ::std::string& value) {
  set_has_susrname();
  if (susrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susrname_ = new ::std::string;
  }
  susrname_->assign(value);
  // @@protoc_insertion_point(field_set:LoginReq.sUsrName)
}
inline void LoginReq::set_susrname(const char* value) {
  set_has_susrname();
  if (susrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susrname_ = new ::std::string;
  }
  susrname_->assign(value);
  // @@protoc_insertion_point(field_set_char:LoginReq.sUsrName)
}
inline void LoginReq::set_susrname(const char* value, size_t size) {
  set_has_susrname();
  if (susrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susrname_ = new ::std::string;
  }
  susrname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LoginReq.sUsrName)
}
inline ::std::string* LoginReq::mutable_susrname() {
  set_has_susrname();
  if (susrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susrname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LoginReq.sUsrName)
  return susrname_;
}
inline ::std::string* LoginReq::release_susrname() {
  clear_has_susrname();
  if (susrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = susrname_;
    susrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginReq::set_allocated_susrname(::std::string* susrname) {
  if (susrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete susrname_;
  }
  if (susrname) {
    set_has_susrname();
    susrname_ = susrname;
  } else {
    clear_has_susrname();
    susrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LoginReq.sUsrName)
}

// optional string sUsrPsw = 2;
inline bool LoginReq::has_susrpsw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginReq::set_has_susrpsw() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginReq::clear_has_susrpsw() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginReq::clear_susrpsw() {
  if (susrpsw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susrpsw_->clear();
  }
  clear_has_susrpsw();
}
inline const ::std::string& LoginReq::susrpsw() const {
  // @@protoc_insertion_point(field_get:LoginReq.sUsrPsw)
  return *susrpsw_;
}
inline void LoginReq::set_susrpsw(const ::std::string& value) {
  set_has_susrpsw();
  if (susrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susrpsw_ = new ::std::string;
  }
  susrpsw_->assign(value);
  // @@protoc_insertion_point(field_set:LoginReq.sUsrPsw)
}
inline void LoginReq::set_susrpsw(const char* value) {
  set_has_susrpsw();
  if (susrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susrpsw_ = new ::std::string;
  }
  susrpsw_->assign(value);
  // @@protoc_insertion_point(field_set_char:LoginReq.sUsrPsw)
}
inline void LoginReq::set_susrpsw(const char* value, size_t size) {
  set_has_susrpsw();
  if (susrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susrpsw_ = new ::std::string;
  }
  susrpsw_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LoginReq.sUsrPsw)
}
inline ::std::string* LoginReq::mutable_susrpsw() {
  set_has_susrpsw();
  if (susrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susrpsw_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LoginReq.sUsrPsw)
  return susrpsw_;
}
inline ::std::string* LoginReq::release_susrpsw() {
  clear_has_susrpsw();
  if (susrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = susrpsw_;
    susrpsw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginReq::set_allocated_susrpsw(::std::string* susrpsw) {
  if (susrpsw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete susrpsw_;
  }
  if (susrpsw) {
    set_has_susrpsw();
    susrpsw_ = susrpsw;
  } else {
    clear_has_susrpsw();
    susrpsw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LoginReq.sUsrPsw)
}

// -------------------------------------------------------------------

// HandOverReq

// optional string sCurUsrName = 1;
inline bool HandOverReq::has_scurusrname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HandOverReq::set_has_scurusrname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HandOverReq::clear_has_scurusrname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HandOverReq::clear_scurusrname() {
  if (scurusrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scurusrname_->clear();
  }
  clear_has_scurusrname();
}
inline const ::std::string& HandOverReq::scurusrname() const {
  // @@protoc_insertion_point(field_get:HandOverReq.sCurUsrName)
  return *scurusrname_;
}
inline void HandOverReq::set_scurusrname(const ::std::string& value) {
  set_has_scurusrname();
  if (scurusrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scurusrname_ = new ::std::string;
  }
  scurusrname_->assign(value);
  // @@protoc_insertion_point(field_set:HandOverReq.sCurUsrName)
}
inline void HandOverReq::set_scurusrname(const char* value) {
  set_has_scurusrname();
  if (scurusrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scurusrname_ = new ::std::string;
  }
  scurusrname_->assign(value);
  // @@protoc_insertion_point(field_set_char:HandOverReq.sCurUsrName)
}
inline void HandOverReq::set_scurusrname(const char* value, size_t size) {
  set_has_scurusrname();
  if (scurusrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scurusrname_ = new ::std::string;
  }
  scurusrname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:HandOverReq.sCurUsrName)
}
inline ::std::string* HandOverReq::mutable_scurusrname() {
  set_has_scurusrname();
  if (scurusrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scurusrname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:HandOverReq.sCurUsrName)
  return scurusrname_;
}
inline ::std::string* HandOverReq::release_scurusrname() {
  clear_has_scurusrname();
  if (scurusrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scurusrname_;
    scurusrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HandOverReq::set_allocated_scurusrname(::std::string* scurusrname) {
  if (scurusrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scurusrname_;
  }
  if (scurusrname) {
    set_has_scurusrname();
    scurusrname_ = scurusrname;
  } else {
    clear_has_scurusrname();
    scurusrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:HandOverReq.sCurUsrName)
}

// optional string sNewUsrName = 2;
inline bool HandOverReq::has_snewusrname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HandOverReq::set_has_snewusrname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HandOverReq::clear_has_snewusrname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HandOverReq::clear_snewusrname() {
  if (snewusrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    snewusrname_->clear();
  }
  clear_has_snewusrname();
}
inline const ::std::string& HandOverReq::snewusrname() const {
  // @@protoc_insertion_point(field_get:HandOverReq.sNewUsrName)
  return *snewusrname_;
}
inline void HandOverReq::set_snewusrname(const ::std::string& value) {
  set_has_snewusrname();
  if (snewusrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    snewusrname_ = new ::std::string;
  }
  snewusrname_->assign(value);
  // @@protoc_insertion_point(field_set:HandOverReq.sNewUsrName)
}
inline void HandOverReq::set_snewusrname(const char* value) {
  set_has_snewusrname();
  if (snewusrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    snewusrname_ = new ::std::string;
  }
  snewusrname_->assign(value);
  // @@protoc_insertion_point(field_set_char:HandOverReq.sNewUsrName)
}
inline void HandOverReq::set_snewusrname(const char* value, size_t size) {
  set_has_snewusrname();
  if (snewusrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    snewusrname_ = new ::std::string;
  }
  snewusrname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:HandOverReq.sNewUsrName)
}
inline ::std::string* HandOverReq::mutable_snewusrname() {
  set_has_snewusrname();
  if (snewusrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    snewusrname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:HandOverReq.sNewUsrName)
  return snewusrname_;
}
inline ::std::string* HandOverReq::release_snewusrname() {
  clear_has_snewusrname();
  if (snewusrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = snewusrname_;
    snewusrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HandOverReq::set_allocated_snewusrname(::std::string* snewusrname) {
  if (snewusrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete snewusrname_;
  }
  if (snewusrname) {
    set_has_snewusrname();
    snewusrname_ = snewusrname;
  } else {
    clear_has_snewusrname();
    snewusrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:HandOverReq.sNewUsrName)
}

// optional string sNewUsrPsw = 3;
inline bool HandOverReq::has_snewusrpsw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HandOverReq::set_has_snewusrpsw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HandOverReq::clear_has_snewusrpsw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HandOverReq::clear_snewusrpsw() {
  if (snewusrpsw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    snewusrpsw_->clear();
  }
  clear_has_snewusrpsw();
}
inline const ::std::string& HandOverReq::snewusrpsw() const {
  // @@protoc_insertion_point(field_get:HandOverReq.sNewUsrPsw)
  return *snewusrpsw_;
}
inline void HandOverReq::set_snewusrpsw(const ::std::string& value) {
  set_has_snewusrpsw();
  if (snewusrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    snewusrpsw_ = new ::std::string;
  }
  snewusrpsw_->assign(value);
  // @@protoc_insertion_point(field_set:HandOverReq.sNewUsrPsw)
}
inline void HandOverReq::set_snewusrpsw(const char* value) {
  set_has_snewusrpsw();
  if (snewusrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    snewusrpsw_ = new ::std::string;
  }
  snewusrpsw_->assign(value);
  // @@protoc_insertion_point(field_set_char:HandOverReq.sNewUsrPsw)
}
inline void HandOverReq::set_snewusrpsw(const char* value, size_t size) {
  set_has_snewusrpsw();
  if (snewusrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    snewusrpsw_ = new ::std::string;
  }
  snewusrpsw_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:HandOverReq.sNewUsrPsw)
}
inline ::std::string* HandOverReq::mutable_snewusrpsw() {
  set_has_snewusrpsw();
  if (snewusrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    snewusrpsw_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:HandOverReq.sNewUsrPsw)
  return snewusrpsw_;
}
inline ::std::string* HandOverReq::release_snewusrpsw() {
  clear_has_snewusrpsw();
  if (snewusrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = snewusrpsw_;
    snewusrpsw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HandOverReq::set_allocated_snewusrpsw(::std::string* snewusrpsw) {
  if (snewusrpsw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete snewusrpsw_;
  }
  if (snewusrpsw) {
    set_has_snewusrpsw();
    snewusrpsw_ = snewusrpsw;
  } else {
    clear_has_snewusrpsw();
    snewusrpsw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:HandOverReq.sNewUsrPsw)
}

// optional string sContents = 4;
inline bool HandOverReq::has_scontents() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HandOverReq::set_has_scontents() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HandOverReq::clear_has_scontents() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HandOverReq::clear_scontents() {
  if (scontents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scontents_->clear();
  }
  clear_has_scontents();
}
inline const ::std::string& HandOverReq::scontents() const {
  // @@protoc_insertion_point(field_get:HandOverReq.sContents)
  return *scontents_;
}
inline void HandOverReq::set_scontents(const ::std::string& value) {
  set_has_scontents();
  if (scontents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scontents_ = new ::std::string;
  }
  scontents_->assign(value);
  // @@protoc_insertion_point(field_set:HandOverReq.sContents)
}
inline void HandOverReq::set_scontents(const char* value) {
  set_has_scontents();
  if (scontents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scontents_ = new ::std::string;
  }
  scontents_->assign(value);
  // @@protoc_insertion_point(field_set_char:HandOverReq.sContents)
}
inline void HandOverReq::set_scontents(const char* value, size_t size) {
  set_has_scontents();
  if (scontents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scontents_ = new ::std::string;
  }
  scontents_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:HandOverReq.sContents)
}
inline ::std::string* HandOverReq::mutable_scontents() {
  set_has_scontents();
  if (scontents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scontents_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:HandOverReq.sContents)
  return scontents_;
}
inline ::std::string* HandOverReq::release_scontents() {
  clear_has_scontents();
  if (scontents_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scontents_;
    scontents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HandOverReq::set_allocated_scontents(::std::string* scontents) {
  if (scontents_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scontents_;
  }
  if (scontents) {
    set_has_scontents();
    scontents_ = scontents;
  } else {
    clear_has_scontents();
    scontents_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:HandOverReq.sContents)
}

// -------------------------------------------------------------------

// DutyLogReq

// optional string sCurUsrNumber = 1;
inline bool DutyLogReq::has_scurusrnumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DutyLogReq::set_has_scurusrnumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DutyLogReq::clear_has_scurusrnumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DutyLogReq::clear_scurusrnumber() {
  if (scurusrnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scurusrnumber_->clear();
  }
  clear_has_scurusrnumber();
}
inline const ::std::string& DutyLogReq::scurusrnumber() const {
  // @@protoc_insertion_point(field_get:DutyLogReq.sCurUsrNumber)
  return *scurusrnumber_;
}
inline void DutyLogReq::set_scurusrnumber(const ::std::string& value) {
  set_has_scurusrnumber();
  if (scurusrnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scurusrnumber_ = new ::std::string;
  }
  scurusrnumber_->assign(value);
  // @@protoc_insertion_point(field_set:DutyLogReq.sCurUsrNumber)
}
inline void DutyLogReq::set_scurusrnumber(const char* value) {
  set_has_scurusrnumber();
  if (scurusrnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scurusrnumber_ = new ::std::string;
  }
  scurusrnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:DutyLogReq.sCurUsrNumber)
}
inline void DutyLogReq::set_scurusrnumber(const char* value, size_t size) {
  set_has_scurusrnumber();
  if (scurusrnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scurusrnumber_ = new ::std::string;
  }
  scurusrnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DutyLogReq.sCurUsrNumber)
}
inline ::std::string* DutyLogReq::mutable_scurusrnumber() {
  set_has_scurusrnumber();
  if (scurusrnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scurusrnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DutyLogReq.sCurUsrNumber)
  return scurusrnumber_;
}
inline ::std::string* DutyLogReq::release_scurusrnumber() {
  clear_has_scurusrnumber();
  if (scurusrnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scurusrnumber_;
    scurusrnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DutyLogReq::set_allocated_scurusrnumber(::std::string* scurusrnumber) {
  if (scurusrnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scurusrnumber_;
  }
  if (scurusrnumber) {
    set_has_scurusrnumber();
    scurusrnumber_ = scurusrnumber;
  } else {
    clear_has_scurusrnumber();
    scurusrnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DutyLogReq.sCurUsrNumber)
}

// optional string sContent = 2;
inline bool DutyLogReq::has_scontent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DutyLogReq::set_has_scontent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DutyLogReq::clear_has_scontent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DutyLogReq::clear_scontent() {
  if (scontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scontent_->clear();
  }
  clear_has_scontent();
}
inline const ::std::string& DutyLogReq::scontent() const {
  // @@protoc_insertion_point(field_get:DutyLogReq.sContent)
  return *scontent_;
}
inline void DutyLogReq::set_scontent(const ::std::string& value) {
  set_has_scontent();
  if (scontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scontent_ = new ::std::string;
  }
  scontent_->assign(value);
  // @@protoc_insertion_point(field_set:DutyLogReq.sContent)
}
inline void DutyLogReq::set_scontent(const char* value) {
  set_has_scontent();
  if (scontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scontent_ = new ::std::string;
  }
  scontent_->assign(value);
  // @@protoc_insertion_point(field_set_char:DutyLogReq.sContent)
}
inline void DutyLogReq::set_scontent(const char* value, size_t size) {
  set_has_scontent();
  if (scontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scontent_ = new ::std::string;
  }
  scontent_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DutyLogReq.sContent)
}
inline ::std::string* DutyLogReq::mutable_scontent() {
  set_has_scontent();
  if (scontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scontent_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DutyLogReq.sContent)
  return scontent_;
}
inline ::std::string* DutyLogReq::release_scontent() {
  clear_has_scontent();
  if (scontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scontent_;
    scontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DutyLogReq::set_allocated_scontent(::std::string* scontent) {
  if (scontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scontent_;
  }
  if (scontent) {
    set_has_scontent();
    scontent_ = scontent;
  } else {
    clear_has_scontent();
    scontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DutyLogReq.sContent)
}

// optional int32 nType = 3;
inline bool DutyLogReq::has_ntype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DutyLogReq::set_has_ntype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DutyLogReq::clear_has_ntype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DutyLogReq::clear_ntype() {
  ntype_ = 0;
  clear_has_ntype();
}
inline ::google::protobuf::int32 DutyLogReq::ntype() const {
  // @@protoc_insertion_point(field_get:DutyLogReq.nType)
  return ntype_;
}
inline void DutyLogReq::set_ntype(::google::protobuf::int32 value) {
  set_has_ntype();
  ntype_ = value;
  // @@protoc_insertion_point(field_set:DutyLogReq.nType)
}

// -------------------------------------------------------------------

// DutyLogAck

// optional .e_ErrorCode eResult = 1;
inline bool DutyLogAck::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DutyLogAck::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DutyLogAck::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DutyLogAck::clear_eresult() {
  eresult_ = 0;
  clear_has_eresult();
}
inline ::e_ErrorCode DutyLogAck::eresult() const {
  // @@protoc_insertion_point(field_get:DutyLogAck.eResult)
  return static_cast< ::e_ErrorCode >(eresult_);
}
inline void DutyLogAck::set_eresult(::e_ErrorCode value) {
  assert(::e_ErrorCode_IsValid(value));
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:DutyLogAck.eResult)
}

// -------------------------------------------------------------------

// UserSigninInfo

// optional int32 eUsrLevel = 1;
inline bool UserSigninInfo::has_eusrlevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSigninInfo::set_has_eusrlevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSigninInfo::clear_has_eusrlevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSigninInfo::clear_eusrlevel() {
  eusrlevel_ = 0;
  clear_has_eusrlevel();
}
inline ::google::protobuf::int32 UserSigninInfo::eusrlevel() const {
  // @@protoc_insertion_point(field_get:UserSigninInfo.eUsrLevel)
  return eusrlevel_;
}
inline void UserSigninInfo::set_eusrlevel(::google::protobuf::int32 value) {
  set_has_eusrlevel();
  eusrlevel_ = value;
  // @@protoc_insertion_point(field_set:UserSigninInfo.eUsrLevel)
}

// optional string UsrNumber = 2;
inline bool UserSigninInfo::has_usrnumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSigninInfo::set_has_usrnumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSigninInfo::clear_has_usrnumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSigninInfo::clear_usrnumber() {
  if (usrnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrnumber_->clear();
  }
  clear_has_usrnumber();
}
inline const ::std::string& UserSigninInfo::usrnumber() const {
  // @@protoc_insertion_point(field_get:UserSigninInfo.UsrNumber)
  return *usrnumber_;
}
inline void UserSigninInfo::set_usrnumber(const ::std::string& value) {
  set_has_usrnumber();
  if (usrnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrnumber_ = new ::std::string;
  }
  usrnumber_->assign(value);
  // @@protoc_insertion_point(field_set:UserSigninInfo.UsrNumber)
}
inline void UserSigninInfo::set_usrnumber(const char* value) {
  set_has_usrnumber();
  if (usrnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrnumber_ = new ::std::string;
  }
  usrnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserSigninInfo.UsrNumber)
}
inline void UserSigninInfo::set_usrnumber(const char* value, size_t size) {
  set_has_usrnumber();
  if (usrnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrnumber_ = new ::std::string;
  }
  usrnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserSigninInfo.UsrNumber)
}
inline ::std::string* UserSigninInfo::mutable_usrnumber() {
  set_has_usrnumber();
  if (usrnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserSigninInfo.UsrNumber)
  return usrnumber_;
}
inline ::std::string* UserSigninInfo::release_usrnumber() {
  clear_has_usrnumber();
  if (usrnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = usrnumber_;
    usrnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserSigninInfo::set_allocated_usrnumber(::std::string* usrnumber) {
  if (usrnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usrnumber_;
  }
  if (usrnumber) {
    set_has_usrnumber();
    usrnumber_ = usrnumber;
  } else {
    clear_has_usrnumber();
    usrnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserSigninInfo.UsrNumber)
}

// optional string UsrName = 3;
inline bool UserSigninInfo::has_usrname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserSigninInfo::set_has_usrname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserSigninInfo::clear_has_usrname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserSigninInfo::clear_usrname() {
  if (usrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrname_->clear();
  }
  clear_has_usrname();
}
inline const ::std::string& UserSigninInfo::usrname() const {
  // @@protoc_insertion_point(field_get:UserSigninInfo.UsrName)
  return *usrname_;
}
inline void UserSigninInfo::set_usrname(const ::std::string& value) {
  set_has_usrname();
  if (usrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrname_ = new ::std::string;
  }
  usrname_->assign(value);
  // @@protoc_insertion_point(field_set:UserSigninInfo.UsrName)
}
inline void UserSigninInfo::set_usrname(const char* value) {
  set_has_usrname();
  if (usrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrname_ = new ::std::string;
  }
  usrname_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserSigninInfo.UsrName)
}
inline void UserSigninInfo::set_usrname(const char* value, size_t size) {
  set_has_usrname();
  if (usrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrname_ = new ::std::string;
  }
  usrname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserSigninInfo.UsrName)
}
inline ::std::string* UserSigninInfo::mutable_usrname() {
  set_has_usrname();
  if (usrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserSigninInfo.UsrName)
  return usrname_;
}
inline ::std::string* UserSigninInfo::release_usrname() {
  clear_has_usrname();
  if (usrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = usrname_;
    usrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserSigninInfo::set_allocated_usrname(::std::string* usrname) {
  if (usrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usrname_;
  }
  if (usrname) {
    set_has_usrname();
    usrname_ = usrname;
  } else {
    clear_has_usrname();
    usrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserSigninInfo.UsrName)
}

// optional string UsrJobNumber = 4;
inline bool UserSigninInfo::has_usrjobnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserSigninInfo::set_has_usrjobnumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserSigninInfo::clear_has_usrjobnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserSigninInfo::clear_usrjobnumber() {
  if (usrjobnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrjobnumber_->clear();
  }
  clear_has_usrjobnumber();
}
inline const ::std::string& UserSigninInfo::usrjobnumber() const {
  // @@protoc_insertion_point(field_get:UserSigninInfo.UsrJobNumber)
  return *usrjobnumber_;
}
inline void UserSigninInfo::set_usrjobnumber(const ::std::string& value) {
  set_has_usrjobnumber();
  if (usrjobnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrjobnumber_ = new ::std::string;
  }
  usrjobnumber_->assign(value);
  // @@protoc_insertion_point(field_set:UserSigninInfo.UsrJobNumber)
}
inline void UserSigninInfo::set_usrjobnumber(const char* value) {
  set_has_usrjobnumber();
  if (usrjobnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrjobnumber_ = new ::std::string;
  }
  usrjobnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserSigninInfo.UsrJobNumber)
}
inline void UserSigninInfo::set_usrjobnumber(const char* value, size_t size) {
  set_has_usrjobnumber();
  if (usrjobnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrjobnumber_ = new ::std::string;
  }
  usrjobnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserSigninInfo.UsrJobNumber)
}
inline ::std::string* UserSigninInfo::mutable_usrjobnumber() {
  set_has_usrjobnumber();
  if (usrjobnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrjobnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserSigninInfo.UsrJobNumber)
  return usrjobnumber_;
}
inline ::std::string* UserSigninInfo::release_usrjobnumber() {
  clear_has_usrjobnumber();
  if (usrjobnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = usrjobnumber_;
    usrjobnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserSigninInfo::set_allocated_usrjobnumber(::std::string* usrjobnumber) {
  if (usrjobnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usrjobnumber_;
  }
  if (usrjobnumber) {
    set_has_usrjobnumber();
    usrjobnumber_ = usrjobnumber;
  } else {
    clear_has_usrjobnumber();
    usrjobnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserSigninInfo.UsrJobNumber)
}

// optional string UsrHeadship = 5;
inline bool UserSigninInfo::has_usrheadship() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserSigninInfo::set_has_usrheadship() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserSigninInfo::clear_has_usrheadship() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserSigninInfo::clear_usrheadship() {
  if (usrheadship_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrheadship_->clear();
  }
  clear_has_usrheadship();
}
inline const ::std::string& UserSigninInfo::usrheadship() const {
  // @@protoc_insertion_point(field_get:UserSigninInfo.UsrHeadship)
  return *usrheadship_;
}
inline void UserSigninInfo::set_usrheadship(const ::std::string& value) {
  set_has_usrheadship();
  if (usrheadship_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrheadship_ = new ::std::string;
  }
  usrheadship_->assign(value);
  // @@protoc_insertion_point(field_set:UserSigninInfo.UsrHeadship)
}
inline void UserSigninInfo::set_usrheadship(const char* value) {
  set_has_usrheadship();
  if (usrheadship_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrheadship_ = new ::std::string;
  }
  usrheadship_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserSigninInfo.UsrHeadship)
}
inline void UserSigninInfo::set_usrheadship(const char* value, size_t size) {
  set_has_usrheadship();
  if (usrheadship_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrheadship_ = new ::std::string;
  }
  usrheadship_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserSigninInfo.UsrHeadship)
}
inline ::std::string* UserSigninInfo::mutable_usrheadship() {
  set_has_usrheadship();
  if (usrheadship_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrheadship_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserSigninInfo.UsrHeadship)
  return usrheadship_;
}
inline ::std::string* UserSigninInfo::release_usrheadship() {
  clear_has_usrheadship();
  if (usrheadship_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = usrheadship_;
    usrheadship_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserSigninInfo::set_allocated_usrheadship(::std::string* usrheadship) {
  if (usrheadship_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usrheadship_;
  }
  if (usrheadship) {
    set_has_usrheadship();
    usrheadship_ = usrheadship;
  } else {
    clear_has_usrheadship();
    usrheadship_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserSigninInfo.UsrHeadship)
}

// optional string UsrPsw = 6;
inline bool UserSigninInfo::has_usrpsw() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserSigninInfo::set_has_usrpsw() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserSigninInfo::clear_has_usrpsw() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserSigninInfo::clear_usrpsw() {
  if (usrpsw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrpsw_->clear();
  }
  clear_has_usrpsw();
}
inline const ::std::string& UserSigninInfo::usrpsw() const {
  // @@protoc_insertion_point(field_get:UserSigninInfo.UsrPsw)
  return *usrpsw_;
}
inline void UserSigninInfo::set_usrpsw(const ::std::string& value) {
  set_has_usrpsw();
  if (usrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrpsw_ = new ::std::string;
  }
  usrpsw_->assign(value);
  // @@protoc_insertion_point(field_set:UserSigninInfo.UsrPsw)
}
inline void UserSigninInfo::set_usrpsw(const char* value) {
  set_has_usrpsw();
  if (usrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrpsw_ = new ::std::string;
  }
  usrpsw_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserSigninInfo.UsrPsw)
}
inline void UserSigninInfo::set_usrpsw(const char* value, size_t size) {
  set_has_usrpsw();
  if (usrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrpsw_ = new ::std::string;
  }
  usrpsw_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserSigninInfo.UsrPsw)
}
inline ::std::string* UserSigninInfo::mutable_usrpsw() {
  set_has_usrpsw();
  if (usrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrpsw_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserSigninInfo.UsrPsw)
  return usrpsw_;
}
inline ::std::string* UserSigninInfo::release_usrpsw() {
  clear_has_usrpsw();
  if (usrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = usrpsw_;
    usrpsw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserSigninInfo::set_allocated_usrpsw(::std::string* usrpsw) {
  if (usrpsw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usrpsw_;
  }
  if (usrpsw) {
    set_has_usrpsw();
    usrpsw_ = usrpsw;
  } else {
    clear_has_usrpsw();
    usrpsw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserSigninInfo.UsrPsw)
}

// optional string SignInTime = 7;
inline bool UserSigninInfo::has_signintime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserSigninInfo::set_has_signintime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserSigninInfo::clear_has_signintime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserSigninInfo::clear_signintime() {
  if (signintime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signintime_->clear();
  }
  clear_has_signintime();
}
inline const ::std::string& UserSigninInfo::signintime() const {
  // @@protoc_insertion_point(field_get:UserSigninInfo.SignInTime)
  return *signintime_;
}
inline void UserSigninInfo::set_signintime(const ::std::string& value) {
  set_has_signintime();
  if (signintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signintime_ = new ::std::string;
  }
  signintime_->assign(value);
  // @@protoc_insertion_point(field_set:UserSigninInfo.SignInTime)
}
inline void UserSigninInfo::set_signintime(const char* value) {
  set_has_signintime();
  if (signintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signintime_ = new ::std::string;
  }
  signintime_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserSigninInfo.SignInTime)
}
inline void UserSigninInfo::set_signintime(const char* value, size_t size) {
  set_has_signintime();
  if (signintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signintime_ = new ::std::string;
  }
  signintime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserSigninInfo.SignInTime)
}
inline ::std::string* UserSigninInfo::mutable_signintime() {
  set_has_signintime();
  if (signintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signintime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserSigninInfo.SignInTime)
  return signintime_;
}
inline ::std::string* UserSigninInfo::release_signintime() {
  clear_has_signintime();
  if (signintime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = signintime_;
    signintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserSigninInfo::set_allocated_signintime(::std::string* signintime) {
  if (signintime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signintime_;
  }
  if (signintime) {
    set_has_signintime();
    signintime_ = signintime;
  } else {
    clear_has_signintime();
    signintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserSigninInfo.SignInTime)
}

// -------------------------------------------------------------------

// UserInfo

// optional int32 eUsrLevel = 1;
inline bool UserInfo::has_eusrlevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfo::set_has_eusrlevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfo::clear_has_eusrlevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfo::clear_eusrlevel() {
  eusrlevel_ = 0;
  clear_has_eusrlevel();
}
inline ::google::protobuf::int32 UserInfo::eusrlevel() const {
  // @@protoc_insertion_point(field_get:UserInfo.eUsrLevel)
  return eusrlevel_;
}
inline void UserInfo::set_eusrlevel(::google::protobuf::int32 value) {
  set_has_eusrlevel();
  eusrlevel_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.eUsrLevel)
}

// optional string UsrNumber = 2;
inline bool UserInfo::has_usrnumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfo::set_has_usrnumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfo::clear_has_usrnumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfo::clear_usrnumber() {
  if (usrnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrnumber_->clear();
  }
  clear_has_usrnumber();
}
inline const ::std::string& UserInfo::usrnumber() const {
  // @@protoc_insertion_point(field_get:UserInfo.UsrNumber)
  return *usrnumber_;
}
inline void UserInfo::set_usrnumber(const ::std::string& value) {
  set_has_usrnumber();
  if (usrnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrnumber_ = new ::std::string;
  }
  usrnumber_->assign(value);
  // @@protoc_insertion_point(field_set:UserInfo.UsrNumber)
}
inline void UserInfo::set_usrnumber(const char* value) {
  set_has_usrnumber();
  if (usrnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrnumber_ = new ::std::string;
  }
  usrnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserInfo.UsrNumber)
}
inline void UserInfo::set_usrnumber(const char* value, size_t size) {
  set_has_usrnumber();
  if (usrnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrnumber_ = new ::std::string;
  }
  usrnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserInfo.UsrNumber)
}
inline ::std::string* UserInfo::mutable_usrnumber() {
  set_has_usrnumber();
  if (usrnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserInfo.UsrNumber)
  return usrnumber_;
}
inline ::std::string* UserInfo::release_usrnumber() {
  clear_has_usrnumber();
  if (usrnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = usrnumber_;
    usrnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserInfo::set_allocated_usrnumber(::std::string* usrnumber) {
  if (usrnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usrnumber_;
  }
  if (usrnumber) {
    set_has_usrnumber();
    usrnumber_ = usrnumber;
  } else {
    clear_has_usrnumber();
    usrnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserInfo.UsrNumber)
}

// optional string UsrName = 3;
inline bool UserInfo::has_usrname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserInfo::set_has_usrname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserInfo::clear_has_usrname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserInfo::clear_usrname() {
  if (usrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrname_->clear();
  }
  clear_has_usrname();
}
inline const ::std::string& UserInfo::usrname() const {
  // @@protoc_insertion_point(field_get:UserInfo.UsrName)
  return *usrname_;
}
inline void UserInfo::set_usrname(const ::std::string& value) {
  set_has_usrname();
  if (usrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrname_ = new ::std::string;
  }
  usrname_->assign(value);
  // @@protoc_insertion_point(field_set:UserInfo.UsrName)
}
inline void UserInfo::set_usrname(const char* value) {
  set_has_usrname();
  if (usrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrname_ = new ::std::string;
  }
  usrname_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserInfo.UsrName)
}
inline void UserInfo::set_usrname(const char* value, size_t size) {
  set_has_usrname();
  if (usrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrname_ = new ::std::string;
  }
  usrname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserInfo.UsrName)
}
inline ::std::string* UserInfo::mutable_usrname() {
  set_has_usrname();
  if (usrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserInfo.UsrName)
  return usrname_;
}
inline ::std::string* UserInfo::release_usrname() {
  clear_has_usrname();
  if (usrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = usrname_;
    usrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserInfo::set_allocated_usrname(::std::string* usrname) {
  if (usrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usrname_;
  }
  if (usrname) {
    set_has_usrname();
    usrname_ = usrname;
  } else {
    clear_has_usrname();
    usrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserInfo.UsrName)
}

// optional string UsrJobNumber = 4;
inline bool UserInfo::has_usrjobnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserInfo::set_has_usrjobnumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserInfo::clear_has_usrjobnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserInfo::clear_usrjobnumber() {
  if (usrjobnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrjobnumber_->clear();
  }
  clear_has_usrjobnumber();
}
inline const ::std::string& UserInfo::usrjobnumber() const {
  // @@protoc_insertion_point(field_get:UserInfo.UsrJobNumber)
  return *usrjobnumber_;
}
inline void UserInfo::set_usrjobnumber(const ::std::string& value) {
  set_has_usrjobnumber();
  if (usrjobnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrjobnumber_ = new ::std::string;
  }
  usrjobnumber_->assign(value);
  // @@protoc_insertion_point(field_set:UserInfo.UsrJobNumber)
}
inline void UserInfo::set_usrjobnumber(const char* value) {
  set_has_usrjobnumber();
  if (usrjobnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrjobnumber_ = new ::std::string;
  }
  usrjobnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserInfo.UsrJobNumber)
}
inline void UserInfo::set_usrjobnumber(const char* value, size_t size) {
  set_has_usrjobnumber();
  if (usrjobnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrjobnumber_ = new ::std::string;
  }
  usrjobnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserInfo.UsrJobNumber)
}
inline ::std::string* UserInfo::mutable_usrjobnumber() {
  set_has_usrjobnumber();
  if (usrjobnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrjobnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserInfo.UsrJobNumber)
  return usrjobnumber_;
}
inline ::std::string* UserInfo::release_usrjobnumber() {
  clear_has_usrjobnumber();
  if (usrjobnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = usrjobnumber_;
    usrjobnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserInfo::set_allocated_usrjobnumber(::std::string* usrjobnumber) {
  if (usrjobnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usrjobnumber_;
  }
  if (usrjobnumber) {
    set_has_usrjobnumber();
    usrjobnumber_ = usrjobnumber;
  } else {
    clear_has_usrjobnumber();
    usrjobnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserInfo.UsrJobNumber)
}

// optional string UsrHeadship = 5;
inline bool UserInfo::has_usrheadship() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserInfo::set_has_usrheadship() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserInfo::clear_has_usrheadship() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserInfo::clear_usrheadship() {
  if (usrheadship_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrheadship_->clear();
  }
  clear_has_usrheadship();
}
inline const ::std::string& UserInfo::usrheadship() const {
  // @@protoc_insertion_point(field_get:UserInfo.UsrHeadship)
  return *usrheadship_;
}
inline void UserInfo::set_usrheadship(const ::std::string& value) {
  set_has_usrheadship();
  if (usrheadship_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrheadship_ = new ::std::string;
  }
  usrheadship_->assign(value);
  // @@protoc_insertion_point(field_set:UserInfo.UsrHeadship)
}
inline void UserInfo::set_usrheadship(const char* value) {
  set_has_usrheadship();
  if (usrheadship_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrheadship_ = new ::std::string;
  }
  usrheadship_->assign(value);
  // @@protoc_insertion_point(field_set_char:UserInfo.UsrHeadship)
}
inline void UserInfo::set_usrheadship(const char* value, size_t size) {
  set_has_usrheadship();
  if (usrheadship_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrheadship_ = new ::std::string;
  }
  usrheadship_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:UserInfo.UsrHeadship)
}
inline ::std::string* UserInfo::mutable_usrheadship() {
  set_has_usrheadship();
  if (usrheadship_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrheadship_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:UserInfo.UsrHeadship)
  return usrheadship_;
}
inline ::std::string* UserInfo::release_usrheadship() {
  clear_has_usrheadship();
  if (usrheadship_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = usrheadship_;
    usrheadship_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserInfo::set_allocated_usrheadship(::std::string* usrheadship) {
  if (usrheadship_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usrheadship_;
  }
  if (usrheadship) {
    set_has_usrheadship();
    usrheadship_ = usrheadship;
  } else {
    clear_has_usrheadship();
    usrheadship_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:UserInfo.UsrHeadship)
}

// -------------------------------------------------------------------

// LoginAck

// optional .e_ErrorCode eResult = 1;
inline bool LoginAck::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginAck::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginAck::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginAck::clear_eresult() {
  eresult_ = 0;
  clear_has_eresult();
}
inline ::e_ErrorCode LoginAck::eresult() const {
  // @@protoc_insertion_point(field_get:LoginAck.eResult)
  return static_cast< ::e_ErrorCode >(eresult_);
}
inline void LoginAck::set_eresult(::e_ErrorCode value) {
  assert(::e_ErrorCode_IsValid(value));
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:LoginAck.eResult)
}

// optional int32 eUsrLevel = 2;
inline bool LoginAck::has_eusrlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginAck::set_has_eusrlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginAck::clear_has_eusrlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginAck::clear_eusrlevel() {
  eusrlevel_ = 0;
  clear_has_eusrlevel();
}
inline ::google::protobuf::int32 LoginAck::eusrlevel() const {
  // @@protoc_insertion_point(field_get:LoginAck.eUsrLevel)
  return eusrlevel_;
}
inline void LoginAck::set_eusrlevel(::google::protobuf::int32 value) {
  set_has_eusrlevel();
  eusrlevel_ = value;
  // @@protoc_insertion_point(field_set:LoginAck.eUsrLevel)
}

// optional string UsrNumber = 3;
inline bool LoginAck::has_usrnumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginAck::set_has_usrnumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginAck::clear_has_usrnumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginAck::clear_usrnumber() {
  if (usrnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrnumber_->clear();
  }
  clear_has_usrnumber();
}
inline const ::std::string& LoginAck::usrnumber() const {
  // @@protoc_insertion_point(field_get:LoginAck.UsrNumber)
  return *usrnumber_;
}
inline void LoginAck::set_usrnumber(const ::std::string& value) {
  set_has_usrnumber();
  if (usrnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrnumber_ = new ::std::string;
  }
  usrnumber_->assign(value);
  // @@protoc_insertion_point(field_set:LoginAck.UsrNumber)
}
inline void LoginAck::set_usrnumber(const char* value) {
  set_has_usrnumber();
  if (usrnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrnumber_ = new ::std::string;
  }
  usrnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:LoginAck.UsrNumber)
}
inline void LoginAck::set_usrnumber(const char* value, size_t size) {
  set_has_usrnumber();
  if (usrnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrnumber_ = new ::std::string;
  }
  usrnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LoginAck.UsrNumber)
}
inline ::std::string* LoginAck::mutable_usrnumber() {
  set_has_usrnumber();
  if (usrnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LoginAck.UsrNumber)
  return usrnumber_;
}
inline ::std::string* LoginAck::release_usrnumber() {
  clear_has_usrnumber();
  if (usrnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = usrnumber_;
    usrnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginAck::set_allocated_usrnumber(::std::string* usrnumber) {
  if (usrnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usrnumber_;
  }
  if (usrnumber) {
    set_has_usrnumber();
    usrnumber_ = usrnumber;
  } else {
    clear_has_usrnumber();
    usrnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LoginAck.UsrNumber)
}

// optional string UsrName = 4;
inline bool LoginAck::has_usrname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginAck::set_has_usrname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginAck::clear_has_usrname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginAck::clear_usrname() {
  if (usrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrname_->clear();
  }
  clear_has_usrname();
}
inline const ::std::string& LoginAck::usrname() const {
  // @@protoc_insertion_point(field_get:LoginAck.UsrName)
  return *usrname_;
}
inline void LoginAck::set_usrname(const ::std::string& value) {
  set_has_usrname();
  if (usrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrname_ = new ::std::string;
  }
  usrname_->assign(value);
  // @@protoc_insertion_point(field_set:LoginAck.UsrName)
}
inline void LoginAck::set_usrname(const char* value) {
  set_has_usrname();
  if (usrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrname_ = new ::std::string;
  }
  usrname_->assign(value);
  // @@protoc_insertion_point(field_set_char:LoginAck.UsrName)
}
inline void LoginAck::set_usrname(const char* value, size_t size) {
  set_has_usrname();
  if (usrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrname_ = new ::std::string;
  }
  usrname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LoginAck.UsrName)
}
inline ::std::string* LoginAck::mutable_usrname() {
  set_has_usrname();
  if (usrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LoginAck.UsrName)
  return usrname_;
}
inline ::std::string* LoginAck::release_usrname() {
  clear_has_usrname();
  if (usrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = usrname_;
    usrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginAck::set_allocated_usrname(::std::string* usrname) {
  if (usrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usrname_;
  }
  if (usrname) {
    set_has_usrname();
    usrname_ = usrname;
  } else {
    clear_has_usrname();
    usrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LoginAck.UsrName)
}

// optional string UsrJobNumber = 5;
inline bool LoginAck::has_usrjobnumber() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginAck::set_has_usrjobnumber() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginAck::clear_has_usrjobnumber() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginAck::clear_usrjobnumber() {
  if (usrjobnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrjobnumber_->clear();
  }
  clear_has_usrjobnumber();
}
inline const ::std::string& LoginAck::usrjobnumber() const {
  // @@protoc_insertion_point(field_get:LoginAck.UsrJobNumber)
  return *usrjobnumber_;
}
inline void LoginAck::set_usrjobnumber(const ::std::string& value) {
  set_has_usrjobnumber();
  if (usrjobnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrjobnumber_ = new ::std::string;
  }
  usrjobnumber_->assign(value);
  // @@protoc_insertion_point(field_set:LoginAck.UsrJobNumber)
}
inline void LoginAck::set_usrjobnumber(const char* value) {
  set_has_usrjobnumber();
  if (usrjobnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrjobnumber_ = new ::std::string;
  }
  usrjobnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:LoginAck.UsrJobNumber)
}
inline void LoginAck::set_usrjobnumber(const char* value, size_t size) {
  set_has_usrjobnumber();
  if (usrjobnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrjobnumber_ = new ::std::string;
  }
  usrjobnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LoginAck.UsrJobNumber)
}
inline ::std::string* LoginAck::mutable_usrjobnumber() {
  set_has_usrjobnumber();
  if (usrjobnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrjobnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LoginAck.UsrJobNumber)
  return usrjobnumber_;
}
inline ::std::string* LoginAck::release_usrjobnumber() {
  clear_has_usrjobnumber();
  if (usrjobnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = usrjobnumber_;
    usrjobnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginAck::set_allocated_usrjobnumber(::std::string* usrjobnumber) {
  if (usrjobnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usrjobnumber_;
  }
  if (usrjobnumber) {
    set_has_usrjobnumber();
    usrjobnumber_ = usrjobnumber;
  } else {
    clear_has_usrjobnumber();
    usrjobnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LoginAck.UsrJobNumber)
}

// optional string UsrHeadship = 6;
inline bool LoginAck::has_usrheadship() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LoginAck::set_has_usrheadship() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LoginAck::clear_has_usrheadship() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LoginAck::clear_usrheadship() {
  if (usrheadship_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrheadship_->clear();
  }
  clear_has_usrheadship();
}
inline const ::std::string& LoginAck::usrheadship() const {
  // @@protoc_insertion_point(field_get:LoginAck.UsrHeadship)
  return *usrheadship_;
}
inline void LoginAck::set_usrheadship(const ::std::string& value) {
  set_has_usrheadship();
  if (usrheadship_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrheadship_ = new ::std::string;
  }
  usrheadship_->assign(value);
  // @@protoc_insertion_point(field_set:LoginAck.UsrHeadship)
}
inline void LoginAck::set_usrheadship(const char* value) {
  set_has_usrheadship();
  if (usrheadship_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrheadship_ = new ::std::string;
  }
  usrheadship_->assign(value);
  // @@protoc_insertion_point(field_set_char:LoginAck.UsrHeadship)
}
inline void LoginAck::set_usrheadship(const char* value, size_t size) {
  set_has_usrheadship();
  if (usrheadship_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrheadship_ = new ::std::string;
  }
  usrheadship_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LoginAck.UsrHeadship)
}
inline ::std::string* LoginAck::mutable_usrheadship() {
  set_has_usrheadship();
  if (usrheadship_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrheadship_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LoginAck.UsrHeadship)
  return usrheadship_;
}
inline ::std::string* LoginAck::release_usrheadship() {
  clear_has_usrheadship();
  if (usrheadship_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = usrheadship_;
    usrheadship_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginAck::set_allocated_usrheadship(::std::string* usrheadship) {
  if (usrheadship_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usrheadship_;
  }
  if (usrheadship) {
    set_has_usrheadship();
    usrheadship_ = usrheadship;
  } else {
    clear_has_usrheadship();
    usrheadship_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LoginAck.UsrHeadship)
}

// repeated .DevNetStatus cDevCurNetStatus = 7;
inline int LoginAck::cdevcurnetstatus_size() const {
  return cdevcurnetstatus_.size();
}
inline void LoginAck::clear_cdevcurnetstatus() {
  cdevcurnetstatus_.Clear();
}
inline const ::DevNetStatus& LoginAck::cdevcurnetstatus(int index) const {
  // @@protoc_insertion_point(field_get:LoginAck.cDevCurNetStatus)
  return cdevcurnetstatus_.Get(index);
}
inline ::DevNetStatus* LoginAck::mutable_cdevcurnetstatus(int index) {
  // @@protoc_insertion_point(field_mutable:LoginAck.cDevCurNetStatus)
  return cdevcurnetstatus_.Mutable(index);
}
inline ::DevNetStatus* LoginAck::add_cdevcurnetstatus() {
  // @@protoc_insertion_point(field_add:LoginAck.cDevCurNetStatus)
  return cdevcurnetstatus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DevNetStatus >&
LoginAck::cdevcurnetstatus() const {
  // @@protoc_insertion_point(field_list:LoginAck.cDevCurNetStatus)
  return cdevcurnetstatus_;
}
inline ::google::protobuf::RepeatedPtrField< ::DevNetStatus >*
LoginAck::mutable_cdevcurnetstatus() {
  // @@protoc_insertion_point(field_mutable_list:LoginAck.cDevCurNetStatus)
  return &cdevcurnetstatus_;
}

// repeated .DevWorkStatus cDevCurWorkStatus = 8;
inline int LoginAck::cdevcurworkstatus_size() const {
  return cdevcurworkstatus_.size();
}
inline void LoginAck::clear_cdevcurworkstatus() {
  cdevcurworkstatus_.Clear();
}
inline const ::DevWorkStatus& LoginAck::cdevcurworkstatus(int index) const {
  // @@protoc_insertion_point(field_get:LoginAck.cDevCurWorkStatus)
  return cdevcurworkstatus_.Get(index);
}
inline ::DevWorkStatus* LoginAck::mutable_cdevcurworkstatus(int index) {
  // @@protoc_insertion_point(field_mutable:LoginAck.cDevCurWorkStatus)
  return cdevcurworkstatus_.Mutable(index);
}
inline ::DevWorkStatus* LoginAck::add_cdevcurworkstatus() {
  // @@protoc_insertion_point(field_add:LoginAck.cDevCurWorkStatus)
  return cdevcurworkstatus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DevWorkStatus >&
LoginAck::cdevcurworkstatus() const {
  // @@protoc_insertion_point(field_list:LoginAck.cDevCurWorkStatus)
  return cdevcurworkstatus_;
}
inline ::google::protobuf::RepeatedPtrField< ::DevWorkStatus >*
LoginAck::mutable_cdevcurworkstatus() {
  // @@protoc_insertion_point(field_mutable_list:LoginAck.cDevCurWorkStatus)
  return &cdevcurworkstatus_;
}

// repeated .DevAlarmStatus cDevCurAlarmStatus = 9;
inline int LoginAck::cdevcuralarmstatus_size() const {
  return cdevcuralarmstatus_.size();
}
inline void LoginAck::clear_cdevcuralarmstatus() {
  cdevcuralarmstatus_.Clear();
}
inline const ::DevAlarmStatus& LoginAck::cdevcuralarmstatus(int index) const {
  // @@protoc_insertion_point(field_get:LoginAck.cDevCurAlarmStatus)
  return cdevcuralarmstatus_.Get(index);
}
inline ::DevAlarmStatus* LoginAck::mutable_cdevcuralarmstatus(int index) {
  // @@protoc_insertion_point(field_mutable:LoginAck.cDevCurAlarmStatus)
  return cdevcuralarmstatus_.Mutable(index);
}
inline ::DevAlarmStatus* LoginAck::add_cdevcuralarmstatus() {
  // @@protoc_insertion_point(field_add:LoginAck.cDevCurAlarmStatus)
  return cdevcuralarmstatus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DevAlarmStatus >&
LoginAck::cdevcuralarmstatus() const {
  // @@protoc_insertion_point(field_list:LoginAck.cDevCurAlarmStatus)
  return cdevcuralarmstatus_;
}
inline ::google::protobuf::RepeatedPtrField< ::DevAlarmStatus >*
LoginAck::mutable_cdevcuralarmstatus() {
  // @@protoc_insertion_point(field_mutable_list:LoginAck.cDevCurAlarmStatus)
  return &cdevcuralarmstatus_;
}

// optional string UsrPsw = 10;
inline bool LoginAck::has_usrpsw() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LoginAck::set_has_usrpsw() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LoginAck::clear_has_usrpsw() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LoginAck::clear_usrpsw() {
  if (usrpsw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrpsw_->clear();
  }
  clear_has_usrpsw();
}
inline const ::std::string& LoginAck::usrpsw() const {
  // @@protoc_insertion_point(field_get:LoginAck.UsrPsw)
  return *usrpsw_;
}
inline void LoginAck::set_usrpsw(const ::std::string& value) {
  set_has_usrpsw();
  if (usrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrpsw_ = new ::std::string;
  }
  usrpsw_->assign(value);
  // @@protoc_insertion_point(field_set:LoginAck.UsrPsw)
}
inline void LoginAck::set_usrpsw(const char* value) {
  set_has_usrpsw();
  if (usrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrpsw_ = new ::std::string;
  }
  usrpsw_->assign(value);
  // @@protoc_insertion_point(field_set_char:LoginAck.UsrPsw)
}
inline void LoginAck::set_usrpsw(const char* value, size_t size) {
  set_has_usrpsw();
  if (usrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrpsw_ = new ::std::string;
  }
  usrpsw_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LoginAck.UsrPsw)
}
inline ::std::string* LoginAck::mutable_usrpsw() {
  set_has_usrpsw();
  if (usrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usrpsw_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LoginAck.UsrPsw)
  return usrpsw_;
}
inline ::std::string* LoginAck::release_usrpsw() {
  clear_has_usrpsw();
  if (usrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = usrpsw_;
    usrpsw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginAck::set_allocated_usrpsw(::std::string* usrpsw) {
  if (usrpsw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usrpsw_;
  }
  if (usrpsw) {
    set_has_usrpsw();
    usrpsw_ = usrpsw;
  } else {
    clear_has_usrpsw();
    usrpsw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LoginAck.UsrPsw)
}

// repeated .UserSigninInfo SignUsers = 11;
inline int LoginAck::signusers_size() const {
  return signusers_.size();
}
inline void LoginAck::clear_signusers() {
  signusers_.Clear();
}
inline const ::UserSigninInfo& LoginAck::signusers(int index) const {
  // @@protoc_insertion_point(field_get:LoginAck.SignUsers)
  return signusers_.Get(index);
}
inline ::UserSigninInfo* LoginAck::mutable_signusers(int index) {
  // @@protoc_insertion_point(field_mutable:LoginAck.SignUsers)
  return signusers_.Mutable(index);
}
inline ::UserSigninInfo* LoginAck::add_signusers() {
  // @@protoc_insertion_point(field_add:LoginAck.SignUsers)
  return signusers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UserSigninInfo >&
LoginAck::signusers() const {
  // @@protoc_insertion_point(field_list:LoginAck.SignUsers)
  return signusers_;
}
inline ::google::protobuf::RepeatedPtrField< ::UserSigninInfo >*
LoginAck::mutable_signusers() {
  // @@protoc_insertion_point(field_mutable_list:LoginAck.SignUsers)
  return &signusers_;
}

// repeated .UserInfo AllUserInfo = 12;
inline int LoginAck::alluserinfo_size() const {
  return alluserinfo_.size();
}
inline void LoginAck::clear_alluserinfo() {
  alluserinfo_.Clear();
}
inline const ::UserInfo& LoginAck::alluserinfo(int index) const {
  // @@protoc_insertion_point(field_get:LoginAck.AllUserInfo)
  return alluserinfo_.Get(index);
}
inline ::UserInfo* LoginAck::mutable_alluserinfo(int index) {
  // @@protoc_insertion_point(field_mutable:LoginAck.AllUserInfo)
  return alluserinfo_.Mutable(index);
}
inline ::UserInfo* LoginAck::add_alluserinfo() {
  // @@protoc_insertion_point(field_add:LoginAck.AllUserInfo)
  return alluserinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::UserInfo >&
LoginAck::alluserinfo() const {
  // @@protoc_insertion_point(field_list:LoginAck.AllUserInfo)
  return alluserinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::UserInfo >*
LoginAck::mutable_alluserinfo() {
  // @@protoc_insertion_point(field_mutable_list:LoginAck.AllUserInfo)
  return &alluserinfo_;
}

// -------------------------------------------------------------------

// SignInOutReq

// optional int32 IsSignIn = 1;
inline bool SignInOutReq::has_issignin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignInOutReq::set_has_issignin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignInOutReq::clear_has_issignin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignInOutReq::clear_issignin() {
  issignin_ = 0;
  clear_has_issignin();
}
inline ::google::protobuf::int32 SignInOutReq::issignin() const {
  // @@protoc_insertion_point(field_get:SignInOutReq.IsSignIn)
  return issignin_;
}
inline void SignInOutReq::set_issignin(::google::protobuf::int32 value) {
  set_has_issignin();
  issignin_ = value;
  // @@protoc_insertion_point(field_set:SignInOutReq.IsSignIn)
}

// optional string sSignInName = 2;
inline bool SignInOutReq::has_ssigninname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignInOutReq::set_has_ssigninname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignInOutReq::clear_has_ssigninname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignInOutReq::clear_ssigninname() {
  if (ssigninname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ssigninname_->clear();
  }
  clear_has_ssigninname();
}
inline const ::std::string& SignInOutReq::ssigninname() const {
  // @@protoc_insertion_point(field_get:SignInOutReq.sSignInName)
  return *ssigninname_;
}
inline void SignInOutReq::set_ssigninname(const ::std::string& value) {
  set_has_ssigninname();
  if (ssigninname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ssigninname_ = new ::std::string;
  }
  ssigninname_->assign(value);
  // @@protoc_insertion_point(field_set:SignInOutReq.sSignInName)
}
inline void SignInOutReq::set_ssigninname(const char* value) {
  set_has_ssigninname();
  if (ssigninname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ssigninname_ = new ::std::string;
  }
  ssigninname_->assign(value);
  // @@protoc_insertion_point(field_set_char:SignInOutReq.sSignInName)
}
inline void SignInOutReq::set_ssigninname(const char* value, size_t size) {
  set_has_ssigninname();
  if (ssigninname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ssigninname_ = new ::std::string;
  }
  ssigninname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SignInOutReq.sSignInName)
}
inline ::std::string* SignInOutReq::mutable_ssigninname() {
  set_has_ssigninname();
  if (ssigninname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ssigninname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SignInOutReq.sSignInName)
  return ssigninname_;
}
inline ::std::string* SignInOutReq::release_ssigninname() {
  clear_has_ssigninname();
  if (ssigninname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ssigninname_;
    ssigninname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SignInOutReq::set_allocated_ssigninname(::std::string* ssigninname) {
  if (ssigninname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ssigninname_;
  }
  if (ssigninname) {
    set_has_ssigninname();
    ssigninname_ = ssigninname;
  } else {
    clear_has_ssigninname();
    ssigninname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SignInOutReq.sSignInName)
}

// optional string sSignInPsw = 3;
inline bool SignInOutReq::has_ssigninpsw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignInOutReq::set_has_ssigninpsw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignInOutReq::clear_has_ssigninpsw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignInOutReq::clear_ssigninpsw() {
  if (ssigninpsw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ssigninpsw_->clear();
  }
  clear_has_ssigninpsw();
}
inline const ::std::string& SignInOutReq::ssigninpsw() const {
  // @@protoc_insertion_point(field_get:SignInOutReq.sSignInPsw)
  return *ssigninpsw_;
}
inline void SignInOutReq::set_ssigninpsw(const ::std::string& value) {
  set_has_ssigninpsw();
  if (ssigninpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ssigninpsw_ = new ::std::string;
  }
  ssigninpsw_->assign(value);
  // @@protoc_insertion_point(field_set:SignInOutReq.sSignInPsw)
}
inline void SignInOutReq::set_ssigninpsw(const char* value) {
  set_has_ssigninpsw();
  if (ssigninpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ssigninpsw_ = new ::std::string;
  }
  ssigninpsw_->assign(value);
  // @@protoc_insertion_point(field_set_char:SignInOutReq.sSignInPsw)
}
inline void SignInOutReq::set_ssigninpsw(const char* value, size_t size) {
  set_has_ssigninpsw();
  if (ssigninpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ssigninpsw_ = new ::std::string;
  }
  ssigninpsw_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SignInOutReq.sSignInPsw)
}
inline ::std::string* SignInOutReq::mutable_ssigninpsw() {
  set_has_ssigninpsw();
  if (ssigninpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ssigninpsw_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:SignInOutReq.sSignInPsw)
  return ssigninpsw_;
}
inline ::std::string* SignInOutReq::release_ssigninpsw() {
  clear_has_ssigninpsw();
  if (ssigninpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ssigninpsw_;
    ssigninpsw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SignInOutReq::set_allocated_ssigninpsw(::std::string* ssigninpsw) {
  if (ssigninpsw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ssigninpsw_;
  }
  if (ssigninpsw) {
    set_has_ssigninpsw();
    ssigninpsw_ = ssigninpsw;
  } else {
    clear_has_ssigninpsw();
    ssigninpsw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:SignInOutReq.sSignInPsw)
}

// -------------------------------------------------------------------

// SignInOutAck

// optional int32 IsSignIn = 1;
inline bool SignInOutAck::has_issignin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignInOutAck::set_has_issignin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignInOutAck::clear_has_issignin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignInOutAck::clear_issignin() {
  issignin_ = 0;
  clear_has_issignin();
}
inline ::google::protobuf::int32 SignInOutAck::issignin() const {
  // @@protoc_insertion_point(field_get:SignInOutAck.IsSignIn)
  return issignin_;
}
inline void SignInOutAck::set_issignin(::google::protobuf::int32 value) {
  set_has_issignin();
  issignin_ = value;
  // @@protoc_insertion_point(field_set:SignInOutAck.IsSignIn)
}

// optional .e_ErrorCode eResult = 2;
inline bool SignInOutAck::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignInOutAck::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignInOutAck::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignInOutAck::clear_eresult() {
  eresult_ = 0;
  clear_has_eresult();
}
inline ::e_ErrorCode SignInOutAck::eresult() const {
  // @@protoc_insertion_point(field_get:SignInOutAck.eResult)
  return static_cast< ::e_ErrorCode >(eresult_);
}
inline void SignInOutAck::set_eresult(::e_ErrorCode value) {
  assert(::e_ErrorCode_IsValid(value));
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:SignInOutAck.eResult)
}

// optional .UserSigninInfo cUsersInfo = 3;
inline bool SignInOutAck::has_cusersinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignInOutAck::set_has_cusersinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignInOutAck::clear_has_cusersinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignInOutAck::clear_cusersinfo() {
  if (cusersinfo_ != NULL) cusersinfo_->::UserSigninInfo::Clear();
  clear_has_cusersinfo();
}
inline const ::UserSigninInfo& SignInOutAck::cusersinfo() const {
  // @@protoc_insertion_point(field_get:SignInOutAck.cUsersInfo)
  return cusersinfo_ != NULL ? *cusersinfo_ : *default_instance_->cusersinfo_;
}
inline ::UserSigninInfo* SignInOutAck::mutable_cusersinfo() {
  set_has_cusersinfo();
  if (cusersinfo_ == NULL) cusersinfo_ = new ::UserSigninInfo;
  // @@protoc_insertion_point(field_mutable:SignInOutAck.cUsersInfo)
  return cusersinfo_;
}
inline ::UserSigninInfo* SignInOutAck::release_cusersinfo() {
  clear_has_cusersinfo();
  ::UserSigninInfo* temp = cusersinfo_;
  cusersinfo_ = NULL;
  return temp;
}
inline void SignInOutAck::set_allocated_cusersinfo(::UserSigninInfo* cusersinfo) {
  delete cusersinfo_;
  cusersinfo_ = cusersinfo;
  if (cusersinfo) {
    set_has_cusersinfo();
  } else {
    clear_has_cusersinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:SignInOutAck.cUsersInfo)
}

// -------------------------------------------------------------------

// StationWorkingState

// optional string sStationNumber = 1;
inline bool StationWorkingState::has_sstationnumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StationWorkingState::set_has_sstationnumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StationWorkingState::clear_has_sstationnumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StationWorkingState::clear_sstationnumber() {
  if (sstationnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationnumber_->clear();
  }
  clear_has_sstationnumber();
}
inline const ::std::string& StationWorkingState::sstationnumber() const {
  // @@protoc_insertion_point(field_get:StationWorkingState.sStationNumber)
  return *sstationnumber_;
}
inline void StationWorkingState::set_sstationnumber(const ::std::string& value) {
  set_has_sstationnumber();
  if (sstationnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationnumber_ = new ::std::string;
  }
  sstationnumber_->assign(value);
  // @@protoc_insertion_point(field_set:StationWorkingState.sStationNumber)
}
inline void StationWorkingState::set_sstationnumber(const char* value) {
  set_has_sstationnumber();
  if (sstationnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationnumber_ = new ::std::string;
  }
  sstationnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:StationWorkingState.sStationNumber)
}
inline void StationWorkingState::set_sstationnumber(const char* value, size_t size) {
  set_has_sstationnumber();
  if (sstationnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationnumber_ = new ::std::string;
  }
  sstationnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StationWorkingState.sStationNumber)
}
inline ::std::string* StationWorkingState::mutable_sstationnumber() {
  set_has_sstationnumber();
  if (sstationnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:StationWorkingState.sStationNumber)
  return sstationnumber_;
}
inline ::std::string* StationWorkingState::release_sstationnumber() {
  clear_has_sstationnumber();
  if (sstationnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sstationnumber_;
    sstationnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StationWorkingState::set_allocated_sstationnumber(::std::string* sstationnumber) {
  if (sstationnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sstationnumber_;
  }
  if (sstationnumber) {
    set_has_sstationnumber();
    sstationnumber_ = sstationnumber;
  } else {
    clear_has_sstationnumber();
    sstationnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:StationWorkingState.sStationNumber)
}

// optional int32 nState = 2;
inline bool StationWorkingState::has_nstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StationWorkingState::set_has_nstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StationWorkingState::clear_has_nstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StationWorkingState::clear_nstate() {
  nstate_ = 0;
  clear_has_nstate();
}
inline ::google::protobuf::int32 StationWorkingState::nstate() const {
  // @@protoc_insertion_point(field_get:StationWorkingState.nState)
  return nstate_;
}
inline void StationWorkingState::set_nstate(::google::protobuf::int32 value) {
  set_has_nstate();
  nstate_ = value;
  // @@protoc_insertion_point(field_set:StationWorkingState.nState)
}

// -------------------------------------------------------------------

// CheckStationWorkingReq

// repeated string sChildNumber = 1;
inline int CheckStationWorkingReq::schildnumber_size() const {
  return schildnumber_.size();
}
inline void CheckStationWorkingReq::clear_schildnumber() {
  schildnumber_.Clear();
}
inline const ::std::string& CheckStationWorkingReq::schildnumber(int index) const {
  // @@protoc_insertion_point(field_get:CheckStationWorkingReq.sChildNumber)
  return schildnumber_.Get(index);
}
inline ::std::string* CheckStationWorkingReq::mutable_schildnumber(int index) {
  // @@protoc_insertion_point(field_mutable:CheckStationWorkingReq.sChildNumber)
  return schildnumber_.Mutable(index);
}
inline void CheckStationWorkingReq::set_schildnumber(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CheckStationWorkingReq.sChildNumber)
  schildnumber_.Mutable(index)->assign(value);
}
inline void CheckStationWorkingReq::set_schildnumber(int index, const char* value) {
  schildnumber_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CheckStationWorkingReq.sChildNumber)
}
inline void CheckStationWorkingReq::set_schildnumber(int index, const char* value, size_t size) {
  schildnumber_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CheckStationWorkingReq.sChildNumber)
}
inline ::std::string* CheckStationWorkingReq::add_schildnumber() {
  return schildnumber_.Add();
}
inline void CheckStationWorkingReq::add_schildnumber(const ::std::string& value) {
  schildnumber_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CheckStationWorkingReq.sChildNumber)
}
inline void CheckStationWorkingReq::add_schildnumber(const char* value) {
  schildnumber_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CheckStationWorkingReq.sChildNumber)
}
inline void CheckStationWorkingReq::add_schildnumber(const char* value, size_t size) {
  schildnumber_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CheckStationWorkingReq.sChildNumber)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CheckStationWorkingReq::schildnumber() const {
  // @@protoc_insertion_point(field_list:CheckStationWorkingReq.sChildNumber)
  return schildnumber_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CheckStationWorkingReq::mutable_schildnumber() {
  // @@protoc_insertion_point(field_mutable_list:CheckStationWorkingReq.sChildNumber)
  return &schildnumber_;
}

// -------------------------------------------------------------------

// CheckStationWorkingAck

// optional int32 nResult = 1;
inline bool CheckStationWorkingAck::has_nresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckStationWorkingAck::set_has_nresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckStationWorkingAck::clear_has_nresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckStationWorkingAck::clear_nresult() {
  nresult_ = 0;
  clear_has_nresult();
}
inline ::google::protobuf::int32 CheckStationWorkingAck::nresult() const {
  // @@protoc_insertion_point(field_get:CheckStationWorkingAck.nResult)
  return nresult_;
}
inline void CheckStationWorkingAck::set_nresult(::google::protobuf::int32 value) {
  set_has_nresult();
  nresult_ = value;
  // @@protoc_insertion_point(field_set:CheckStationWorkingAck.nResult)
}

// -------------------------------------------------------------------

// CheackStationWorkingNotify

// optional int32 nResult = 1;
inline bool CheackStationWorkingNotify::has_nresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheackStationWorkingNotify::set_has_nresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheackStationWorkingNotify::clear_has_nresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheackStationWorkingNotify::clear_nresult() {
  nresult_ = 0;
  clear_has_nresult();
}
inline ::google::protobuf::int32 CheackStationWorkingNotify::nresult() const {
  // @@protoc_insertion_point(field_get:CheackStationWorkingNotify.nResult)
  return nresult_;
}
inline void CheackStationWorkingNotify::set_nresult(::google::protobuf::int32 value) {
  set_has_nresult();
  nresult_ = value;
  // @@protoc_insertion_point(field_set:CheackStationWorkingNotify.nResult)
}

// optional string sUserNumber = 2;
inline bool CheackStationWorkingNotify::has_susernumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheackStationWorkingNotify::set_has_susernumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheackStationWorkingNotify::clear_has_susernumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheackStationWorkingNotify::clear_susernumber() {
  if (susernumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susernumber_->clear();
  }
  clear_has_susernumber();
}
inline const ::std::string& CheackStationWorkingNotify::susernumber() const {
  // @@protoc_insertion_point(field_get:CheackStationWorkingNotify.sUserNumber)
  return *susernumber_;
}
inline void CheackStationWorkingNotify::set_susernumber(const ::std::string& value) {
  set_has_susernumber();
  if (susernumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susernumber_ = new ::std::string;
  }
  susernumber_->assign(value);
  // @@protoc_insertion_point(field_set:CheackStationWorkingNotify.sUserNumber)
}
inline void CheackStationWorkingNotify::set_susernumber(const char* value) {
  set_has_susernumber();
  if (susernumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susernumber_ = new ::std::string;
  }
  susernumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:CheackStationWorkingNotify.sUserNumber)
}
inline void CheackStationWorkingNotify::set_susernumber(const char* value, size_t size) {
  set_has_susernumber();
  if (susernumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susernumber_ = new ::std::string;
  }
  susernumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CheackStationWorkingNotify.sUserNumber)
}
inline ::std::string* CheackStationWorkingNotify::mutable_susernumber() {
  set_has_susernumber();
  if (susernumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susernumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CheackStationWorkingNotify.sUserNumber)
  return susernumber_;
}
inline ::std::string* CheackStationWorkingNotify::release_susernumber() {
  clear_has_susernumber();
  if (susernumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = susernumber_;
    susernumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CheackStationWorkingNotify::set_allocated_susernumber(::std::string* susernumber) {
  if (susernumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete susernumber_;
  }
  if (susernumber) {
    set_has_susernumber();
    susernumber_ = susernumber;
  } else {
    clear_has_susernumber();
    susernumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CheackStationWorkingNotify.sUserNumber)
}

// optional string sUserName = 3;
inline bool CheackStationWorkingNotify::has_susername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheackStationWorkingNotify::set_has_susername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheackStationWorkingNotify::clear_has_susername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheackStationWorkingNotify::clear_susername() {
  if (susername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susername_->clear();
  }
  clear_has_susername();
}
inline const ::std::string& CheackStationWorkingNotify::susername() const {
  // @@protoc_insertion_point(field_get:CheackStationWorkingNotify.sUserName)
  return *susername_;
}
inline void CheackStationWorkingNotify::set_susername(const ::std::string& value) {
  set_has_susername();
  if (susername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susername_ = new ::std::string;
  }
  susername_->assign(value);
  // @@protoc_insertion_point(field_set:CheackStationWorkingNotify.sUserName)
}
inline void CheackStationWorkingNotify::set_susername(const char* value) {
  set_has_susername();
  if (susername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susername_ = new ::std::string;
  }
  susername_->assign(value);
  // @@protoc_insertion_point(field_set_char:CheackStationWorkingNotify.sUserName)
}
inline void CheackStationWorkingNotify::set_susername(const char* value, size_t size) {
  set_has_susername();
  if (susername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susername_ = new ::std::string;
  }
  susername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CheackStationWorkingNotify.sUserName)
}
inline ::std::string* CheackStationWorkingNotify::mutable_susername() {
  set_has_susername();
  if (susername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CheackStationWorkingNotify.sUserName)
  return susername_;
}
inline ::std::string* CheackStationWorkingNotify::release_susername() {
  clear_has_susername();
  if (susername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = susername_;
    susername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CheackStationWorkingNotify::set_allocated_susername(::std::string* susername) {
  if (susername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete susername_;
  }
  if (susername) {
    set_has_susername();
    susername_ = susername;
  } else {
    clear_has_susername();
    susername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CheackStationWorkingNotify.sUserName)
}

// optional string sStationNumber = 4;
inline bool CheackStationWorkingNotify::has_sstationnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CheackStationWorkingNotify::set_has_sstationnumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CheackStationWorkingNotify::clear_has_sstationnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CheackStationWorkingNotify::clear_sstationnumber() {
  if (sstationnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationnumber_->clear();
  }
  clear_has_sstationnumber();
}
inline const ::std::string& CheackStationWorkingNotify::sstationnumber() const {
  // @@protoc_insertion_point(field_get:CheackStationWorkingNotify.sStationNumber)
  return *sstationnumber_;
}
inline void CheackStationWorkingNotify::set_sstationnumber(const ::std::string& value) {
  set_has_sstationnumber();
  if (sstationnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationnumber_ = new ::std::string;
  }
  sstationnumber_->assign(value);
  // @@protoc_insertion_point(field_set:CheackStationWorkingNotify.sStationNumber)
}
inline void CheackStationWorkingNotify::set_sstationnumber(const char* value) {
  set_has_sstationnumber();
  if (sstationnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationnumber_ = new ::std::string;
  }
  sstationnumber_->assign(value);
  // @@protoc_insertion_point(field_set_char:CheackStationWorkingNotify.sStationNumber)
}
inline void CheackStationWorkingNotify::set_sstationnumber(const char* value, size_t size) {
  set_has_sstationnumber();
  if (sstationnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationnumber_ = new ::std::string;
  }
  sstationnumber_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CheackStationWorkingNotify.sStationNumber)
}
inline ::std::string* CheackStationWorkingNotify::mutable_sstationnumber() {
  set_has_sstationnumber();
  if (sstationnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationnumber_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CheackStationWorkingNotify.sStationNumber)
  return sstationnumber_;
}
inline ::std::string* CheackStationWorkingNotify::release_sstationnumber() {
  clear_has_sstationnumber();
  if (sstationnumber_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sstationnumber_;
    sstationnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CheackStationWorkingNotify::set_allocated_sstationnumber(::std::string* sstationnumber) {
  if (sstationnumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sstationnumber_;
  }
  if (sstationnumber) {
    set_has_sstationnumber();
    sstationnumber_ = sstationnumber;
  } else {
    clear_has_sstationnumber();
    sstationnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CheackStationWorkingNotify.sStationNumber)
}

// -------------------------------------------------------------------

// LogoutReq

// optional string sUsrName = 1;
inline bool LogoutReq::has_susrname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogoutReq::set_has_susrname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogoutReq::clear_has_susrname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogoutReq::clear_susrname() {
  if (susrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susrname_->clear();
  }
  clear_has_susrname();
}
inline const ::std::string& LogoutReq::susrname() const {
  // @@protoc_insertion_point(field_get:LogoutReq.sUsrName)
  return *susrname_;
}
inline void LogoutReq::set_susrname(const ::std::string& value) {
  set_has_susrname();
  if (susrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susrname_ = new ::std::string;
  }
  susrname_->assign(value);
  // @@protoc_insertion_point(field_set:LogoutReq.sUsrName)
}
inline void LogoutReq::set_susrname(const char* value) {
  set_has_susrname();
  if (susrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susrname_ = new ::std::string;
  }
  susrname_->assign(value);
  // @@protoc_insertion_point(field_set_char:LogoutReq.sUsrName)
}
inline void LogoutReq::set_susrname(const char* value, size_t size) {
  set_has_susrname();
  if (susrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susrname_ = new ::std::string;
  }
  susrname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LogoutReq.sUsrName)
}
inline ::std::string* LogoutReq::mutable_susrname() {
  set_has_susrname();
  if (susrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susrname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LogoutReq.sUsrName)
  return susrname_;
}
inline ::std::string* LogoutReq::release_susrname() {
  clear_has_susrname();
  if (susrname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = susrname_;
    susrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogoutReq::set_allocated_susrname(::std::string* susrname) {
  if (susrname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete susrname_;
  }
  if (susrname) {
    set_has_susrname();
    susrname_ = susrname;
  } else {
    clear_has_susrname();
    susrname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LogoutReq.sUsrName)
}

// optional string sUsrPsw = 2;
inline bool LogoutReq::has_susrpsw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogoutReq::set_has_susrpsw() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogoutReq::clear_has_susrpsw() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogoutReq::clear_susrpsw() {
  if (susrpsw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susrpsw_->clear();
  }
  clear_has_susrpsw();
}
inline const ::std::string& LogoutReq::susrpsw() const {
  // @@protoc_insertion_point(field_get:LogoutReq.sUsrPsw)
  return *susrpsw_;
}
inline void LogoutReq::set_susrpsw(const ::std::string& value) {
  set_has_susrpsw();
  if (susrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susrpsw_ = new ::std::string;
  }
  susrpsw_->assign(value);
  // @@protoc_insertion_point(field_set:LogoutReq.sUsrPsw)
}
inline void LogoutReq::set_susrpsw(const char* value) {
  set_has_susrpsw();
  if (susrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susrpsw_ = new ::std::string;
  }
  susrpsw_->assign(value);
  // @@protoc_insertion_point(field_set_char:LogoutReq.sUsrPsw)
}
inline void LogoutReq::set_susrpsw(const char* value, size_t size) {
  set_has_susrpsw();
  if (susrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susrpsw_ = new ::std::string;
  }
  susrpsw_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LogoutReq.sUsrPsw)
}
inline ::std::string* LogoutReq::mutable_susrpsw() {
  set_has_susrpsw();
  if (susrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    susrpsw_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:LogoutReq.sUsrPsw)
  return susrpsw_;
}
inline ::std::string* LogoutReq::release_susrpsw() {
  clear_has_susrpsw();
  if (susrpsw_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = susrpsw_;
    susrpsw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogoutReq::set_allocated_susrpsw(::std::string* susrpsw) {
  if (susrpsw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete susrpsw_;
  }
  if (susrpsw) {
    set_has_susrpsw();
    susrpsw_ = susrpsw;
  } else {
    clear_has_susrpsw();
    susrpsw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:LogoutReq.sUsrPsw)
}

// -------------------------------------------------------------------

// LogoutAck

// optional .e_ErrorCode eResult = 1;
inline bool LogoutAck::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogoutAck::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogoutAck::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogoutAck::clear_eresult() {
  eresult_ = 0;
  clear_has_eresult();
}
inline ::e_ErrorCode LogoutAck::eresult() const {
  // @@protoc_insertion_point(field_get:LogoutAck.eResult)
  return static_cast< ::e_ErrorCode >(eresult_);
}
inline void LogoutAck::set_eresult(::e_ErrorCode value) {
  assert(::e_ErrorCode_IsValid(value));
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:LogoutAck.eResult)
}

// -------------------------------------------------------------------

// TurnOnDevMsg

// required string sStationId = 1;
inline bool TurnOnDevMsg::has_sstationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TurnOnDevMsg::set_has_sstationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TurnOnDevMsg::clear_has_sstationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TurnOnDevMsg::clear_sstationid() {
  if (sstationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_->clear();
  }
  clear_has_sstationid();
}
inline const ::std::string& TurnOnDevMsg::sstationid() const {
  // @@protoc_insertion_point(field_get:TurnOnDevMsg.sStationId)
  return *sstationid_;
}
inline void TurnOnDevMsg::set_sstationid(const ::std::string& value) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(value);
  // @@protoc_insertion_point(field_set:TurnOnDevMsg.sStationId)
}
inline void TurnOnDevMsg::set_sstationid(const char* value) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(value);
  // @@protoc_insertion_point(field_set_char:TurnOnDevMsg.sStationId)
}
inline void TurnOnDevMsg::set_sstationid(const char* value, size_t size) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TurnOnDevMsg.sStationId)
}
inline ::std::string* TurnOnDevMsg::mutable_sstationid() {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TurnOnDevMsg.sStationId)
  return sstationid_;
}
inline ::std::string* TurnOnDevMsg::release_sstationid() {
  clear_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sstationid_;
    sstationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TurnOnDevMsg::set_allocated_sstationid(::std::string* sstationid) {
  if (sstationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sstationid_;
  }
  if (sstationid) {
    set_has_sstationid();
    sstationid_ = sstationid;
  } else {
    clear_has_sstationid();
    sstationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TurnOnDevMsg.sStationId)
}

// required string sDevId = 2;
inline bool TurnOnDevMsg::has_sdevid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TurnOnDevMsg::set_has_sdevid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TurnOnDevMsg::clear_has_sdevid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TurnOnDevMsg::clear_sdevid() {
  if (sdevid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_->clear();
  }
  clear_has_sdevid();
}
inline const ::std::string& TurnOnDevMsg::sdevid() const {
  // @@protoc_insertion_point(field_get:TurnOnDevMsg.sDevId)
  return *sdevid_;
}
inline void TurnOnDevMsg::set_sdevid(const ::std::string& value) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(value);
  // @@protoc_insertion_point(field_set:TurnOnDevMsg.sDevId)
}
inline void TurnOnDevMsg::set_sdevid(const char* value) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(value);
  // @@protoc_insertion_point(field_set_char:TurnOnDevMsg.sDevId)
}
inline void TurnOnDevMsg::set_sdevid(const char* value, size_t size) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TurnOnDevMsg.sDevId)
}
inline ::std::string* TurnOnDevMsg::mutable_sdevid() {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TurnOnDevMsg.sDevId)
  return sdevid_;
}
inline ::std::string* TurnOnDevMsg::release_sdevid() {
  clear_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sdevid_;
    sdevid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TurnOnDevMsg::set_allocated_sdevid(::std::string* sdevid) {
  if (sdevid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdevid_;
  }
  if (sdevid) {
    set_has_sdevid();
    sdevid_ = sdevid;
  } else {
    clear_has_sdevid();
    sdevid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TurnOnDevMsg.sDevId)
}

// optional int32 eDevType = 3;
inline bool TurnOnDevMsg::has_edevtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TurnOnDevMsg::set_has_edevtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TurnOnDevMsg::clear_has_edevtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TurnOnDevMsg::clear_edevtype() {
  edevtype_ = 0;
  clear_has_edevtype();
}
inline ::google::protobuf::int32 TurnOnDevMsg::edevtype() const {
  // @@protoc_insertion_point(field_get:TurnOnDevMsg.eDevType)
  return edevtype_;
}
inline void TurnOnDevMsg::set_edevtype(::google::protobuf::int32 value) {
  set_has_edevtype();
  edevtype_ = value;
  // @@protoc_insertion_point(field_set:TurnOnDevMsg.eDevType)
}

// optional string sOperUser = 4;
inline bool TurnOnDevMsg::has_soperuser() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TurnOnDevMsg::set_has_soperuser() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TurnOnDevMsg::clear_has_soperuser() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TurnOnDevMsg::clear_soperuser() {
  if (soperuser_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soperuser_->clear();
  }
  clear_has_soperuser();
}
inline const ::std::string& TurnOnDevMsg::soperuser() const {
  // @@protoc_insertion_point(field_get:TurnOnDevMsg.sOperUser)
  return *soperuser_;
}
inline void TurnOnDevMsg::set_soperuser(const ::std::string& value) {
  set_has_soperuser();
  if (soperuser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soperuser_ = new ::std::string;
  }
  soperuser_->assign(value);
  // @@protoc_insertion_point(field_set:TurnOnDevMsg.sOperUser)
}
inline void TurnOnDevMsg::set_soperuser(const char* value) {
  set_has_soperuser();
  if (soperuser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soperuser_ = new ::std::string;
  }
  soperuser_->assign(value);
  // @@protoc_insertion_point(field_set_char:TurnOnDevMsg.sOperUser)
}
inline void TurnOnDevMsg::set_soperuser(const char* value, size_t size) {
  set_has_soperuser();
  if (soperuser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soperuser_ = new ::std::string;
  }
  soperuser_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TurnOnDevMsg.sOperUser)
}
inline ::std::string* TurnOnDevMsg::mutable_soperuser() {
  set_has_soperuser();
  if (soperuser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soperuser_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TurnOnDevMsg.sOperUser)
  return soperuser_;
}
inline ::std::string* TurnOnDevMsg::release_soperuser() {
  clear_has_soperuser();
  if (soperuser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = soperuser_;
    soperuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TurnOnDevMsg::set_allocated_soperuser(::std::string* soperuser) {
  if (soperuser_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete soperuser_;
  }
  if (soperuser) {
    set_has_soperuser();
    soperuser_ = soperuser;
  } else {
    clear_has_soperuser();
    soperuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TurnOnDevMsg.sOperUser)
}

// -------------------------------------------------------------------

// TurnOffDevMsg

// required string sStationId = 1;
inline bool TurnOffDevMsg::has_sstationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TurnOffDevMsg::set_has_sstationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TurnOffDevMsg::clear_has_sstationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TurnOffDevMsg::clear_sstationid() {
  if (sstationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_->clear();
  }
  clear_has_sstationid();
}
inline const ::std::string& TurnOffDevMsg::sstationid() const {
  // @@protoc_insertion_point(field_get:TurnOffDevMsg.sStationId)
  return *sstationid_;
}
inline void TurnOffDevMsg::set_sstationid(const ::std::string& value) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(value);
  // @@protoc_insertion_point(field_set:TurnOffDevMsg.sStationId)
}
inline void TurnOffDevMsg::set_sstationid(const char* value) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(value);
  // @@protoc_insertion_point(field_set_char:TurnOffDevMsg.sStationId)
}
inline void TurnOffDevMsg::set_sstationid(const char* value, size_t size) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TurnOffDevMsg.sStationId)
}
inline ::std::string* TurnOffDevMsg::mutable_sstationid() {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TurnOffDevMsg.sStationId)
  return sstationid_;
}
inline ::std::string* TurnOffDevMsg::release_sstationid() {
  clear_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sstationid_;
    sstationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TurnOffDevMsg::set_allocated_sstationid(::std::string* sstationid) {
  if (sstationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sstationid_;
  }
  if (sstationid) {
    set_has_sstationid();
    sstationid_ = sstationid;
  } else {
    clear_has_sstationid();
    sstationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TurnOffDevMsg.sStationId)
}

// required string sDevId = 2;
inline bool TurnOffDevMsg::has_sdevid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TurnOffDevMsg::set_has_sdevid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TurnOffDevMsg::clear_has_sdevid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TurnOffDevMsg::clear_sdevid() {
  if (sdevid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_->clear();
  }
  clear_has_sdevid();
}
inline const ::std::string& TurnOffDevMsg::sdevid() const {
  // @@protoc_insertion_point(field_get:TurnOffDevMsg.sDevId)
  return *sdevid_;
}
inline void TurnOffDevMsg::set_sdevid(const ::std::string& value) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(value);
  // @@protoc_insertion_point(field_set:TurnOffDevMsg.sDevId)
}
inline void TurnOffDevMsg::set_sdevid(const char* value) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(value);
  // @@protoc_insertion_point(field_set_char:TurnOffDevMsg.sDevId)
}
inline void TurnOffDevMsg::set_sdevid(const char* value, size_t size) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TurnOffDevMsg.sDevId)
}
inline ::std::string* TurnOffDevMsg::mutable_sdevid() {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TurnOffDevMsg.sDevId)
  return sdevid_;
}
inline ::std::string* TurnOffDevMsg::release_sdevid() {
  clear_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sdevid_;
    sdevid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TurnOffDevMsg::set_allocated_sdevid(::std::string* sdevid) {
  if (sdevid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdevid_;
  }
  if (sdevid) {
    set_has_sdevid();
    sdevid_ = sdevid;
  } else {
    clear_has_sdevid();
    sdevid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TurnOffDevMsg.sDevId)
}

// optional int32 eDevType = 3;
inline bool TurnOffDevMsg::has_edevtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TurnOffDevMsg::set_has_edevtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TurnOffDevMsg::clear_has_edevtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TurnOffDevMsg::clear_edevtype() {
  edevtype_ = 0;
  clear_has_edevtype();
}
inline ::google::protobuf::int32 TurnOffDevMsg::edevtype() const {
  // @@protoc_insertion_point(field_get:TurnOffDevMsg.eDevType)
  return edevtype_;
}
inline void TurnOffDevMsg::set_edevtype(::google::protobuf::int32 value) {
  set_has_edevtype();
  edevtype_ = value;
  // @@protoc_insertion_point(field_set:TurnOffDevMsg.eDevType)
}

// optional string sOperUser = 4;
inline bool TurnOffDevMsg::has_soperuser() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TurnOffDevMsg::set_has_soperuser() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TurnOffDevMsg::clear_has_soperuser() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TurnOffDevMsg::clear_soperuser() {
  if (soperuser_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soperuser_->clear();
  }
  clear_has_soperuser();
}
inline const ::std::string& TurnOffDevMsg::soperuser() const {
  // @@protoc_insertion_point(field_get:TurnOffDevMsg.sOperUser)
  return *soperuser_;
}
inline void TurnOffDevMsg::set_soperuser(const ::std::string& value) {
  set_has_soperuser();
  if (soperuser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soperuser_ = new ::std::string;
  }
  soperuser_->assign(value);
  // @@protoc_insertion_point(field_set:TurnOffDevMsg.sOperUser)
}
inline void TurnOffDevMsg::set_soperuser(const char* value) {
  set_has_soperuser();
  if (soperuser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soperuser_ = new ::std::string;
  }
  soperuser_->assign(value);
  // @@protoc_insertion_point(field_set_char:TurnOffDevMsg.sOperUser)
}
inline void TurnOffDevMsg::set_soperuser(const char* value, size_t size) {
  set_has_soperuser();
  if (soperuser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soperuser_ = new ::std::string;
  }
  soperuser_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TurnOffDevMsg.sOperUser)
}
inline ::std::string* TurnOffDevMsg::mutable_soperuser() {
  set_has_soperuser();
  if (soperuser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soperuser_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:TurnOffDevMsg.sOperUser)
  return soperuser_;
}
inline ::std::string* TurnOffDevMsg::release_soperuser() {
  clear_has_soperuser();
  if (soperuser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = soperuser_;
    soperuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TurnOffDevMsg::set_allocated_soperuser(::std::string* soperuser) {
  if (soperuser_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete soperuser_;
  }
  if (soperuser) {
    set_has_soperuser();
    soperuser_ = soperuser;
  } else {
    clear_has_soperuser();
    soperuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:TurnOffDevMsg.sOperUser)
}

// -------------------------------------------------------------------

// CommandParam

// optional string sParamName = 1;
inline bool CommandParam::has_sparamname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandParam::set_has_sparamname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandParam::clear_has_sparamname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandParam::clear_sparamname() {
  if (sparamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sparamname_->clear();
  }
  clear_has_sparamname();
}
inline const ::std::string& CommandParam::sparamname() const {
  // @@protoc_insertion_point(field_get:CommandParam.sParamName)
  return *sparamname_;
}
inline void CommandParam::set_sparamname(const ::std::string& value) {
  set_has_sparamname();
  if (sparamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sparamname_ = new ::std::string;
  }
  sparamname_->assign(value);
  // @@protoc_insertion_point(field_set:CommandParam.sParamName)
}
inline void CommandParam::set_sparamname(const char* value) {
  set_has_sparamname();
  if (sparamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sparamname_ = new ::std::string;
  }
  sparamname_->assign(value);
  // @@protoc_insertion_point(field_set_char:CommandParam.sParamName)
}
inline void CommandParam::set_sparamname(const char* value, size_t size) {
  set_has_sparamname();
  if (sparamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sparamname_ = new ::std::string;
  }
  sparamname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CommandParam.sParamName)
}
inline ::std::string* CommandParam::mutable_sparamname() {
  set_has_sparamname();
  if (sparamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sparamname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CommandParam.sParamName)
  return sparamname_;
}
inline ::std::string* CommandParam::release_sparamname() {
  clear_has_sparamname();
  if (sparamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sparamname_;
    sparamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CommandParam::set_allocated_sparamname(::std::string* sparamname) {
  if (sparamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sparamname_;
  }
  if (sparamname) {
    set_has_sparamname();
    sparamname_ = sparamname;
  } else {
    clear_has_sparamname();
    sparamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CommandParam.sParamName)
}

// optional string sParamValue = 2;
inline bool CommandParam::has_sparamvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandParam::set_has_sparamvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandParam::clear_has_sparamvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandParam::clear_sparamvalue() {
  if (sparamvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sparamvalue_->clear();
  }
  clear_has_sparamvalue();
}
inline const ::std::string& CommandParam::sparamvalue() const {
  // @@protoc_insertion_point(field_get:CommandParam.sParamValue)
  return *sparamvalue_;
}
inline void CommandParam::set_sparamvalue(const ::std::string& value) {
  set_has_sparamvalue();
  if (sparamvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sparamvalue_ = new ::std::string;
  }
  sparamvalue_->assign(value);
  // @@protoc_insertion_point(field_set:CommandParam.sParamValue)
}
inline void CommandParam::set_sparamvalue(const char* value) {
  set_has_sparamvalue();
  if (sparamvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sparamvalue_ = new ::std::string;
  }
  sparamvalue_->assign(value);
  // @@protoc_insertion_point(field_set_char:CommandParam.sParamValue)
}
inline void CommandParam::set_sparamvalue(const char* value, size_t size) {
  set_has_sparamvalue();
  if (sparamvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sparamvalue_ = new ::std::string;
  }
  sparamvalue_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CommandParam.sParamValue)
}
inline ::std::string* CommandParam::mutable_sparamvalue() {
  set_has_sparamvalue();
  if (sparamvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sparamvalue_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CommandParam.sParamValue)
  return sparamvalue_;
}
inline ::std::string* CommandParam::release_sparamvalue() {
  clear_has_sparamvalue();
  if (sparamvalue_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sparamvalue_;
    sparamvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CommandParam::set_allocated_sparamvalue(::std::string* sparamvalue) {
  if (sparamvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sparamvalue_;
  }
  if (sparamvalue) {
    set_has_sparamvalue();
    sparamvalue_ = sparamvalue;
  } else {
    clear_has_sparamvalue();
    sparamvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CommandParam.sParamValue)
}

// -------------------------------------------------------------------

// DeviceCommandMsg

// required string sStationId = 1;
inline bool DeviceCommandMsg::has_sstationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceCommandMsg::set_has_sstationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceCommandMsg::clear_has_sstationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceCommandMsg::clear_sstationid() {
  if (sstationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_->clear();
  }
  clear_has_sstationid();
}
inline const ::std::string& DeviceCommandMsg::sstationid() const {
  // @@protoc_insertion_point(field_get:DeviceCommandMsg.sStationId)
  return *sstationid_;
}
inline void DeviceCommandMsg::set_sstationid(const ::std::string& value) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(value);
  // @@protoc_insertion_point(field_set:DeviceCommandMsg.sStationId)
}
inline void DeviceCommandMsg::set_sstationid(const char* value) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(value);
  // @@protoc_insertion_point(field_set_char:DeviceCommandMsg.sStationId)
}
inline void DeviceCommandMsg::set_sstationid(const char* value, size_t size) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DeviceCommandMsg.sStationId)
}
inline ::std::string* DeviceCommandMsg::mutable_sstationid() {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DeviceCommandMsg.sStationId)
  return sstationid_;
}
inline ::std::string* DeviceCommandMsg::release_sstationid() {
  clear_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sstationid_;
    sstationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceCommandMsg::set_allocated_sstationid(::std::string* sstationid) {
  if (sstationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sstationid_;
  }
  if (sstationid) {
    set_has_sstationid();
    sstationid_ = sstationid;
  } else {
    clear_has_sstationid();
    sstationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceCommandMsg.sStationId)
}

// required string sDevId = 2;
inline bool DeviceCommandMsg::has_sdevid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceCommandMsg::set_has_sdevid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceCommandMsg::clear_has_sdevid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceCommandMsg::clear_sdevid() {
  if (sdevid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_->clear();
  }
  clear_has_sdevid();
}
inline const ::std::string& DeviceCommandMsg::sdevid() const {
  // @@protoc_insertion_point(field_get:DeviceCommandMsg.sDevId)
  return *sdevid_;
}
inline void DeviceCommandMsg::set_sdevid(const ::std::string& value) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(value);
  // @@protoc_insertion_point(field_set:DeviceCommandMsg.sDevId)
}
inline void DeviceCommandMsg::set_sdevid(const char* value) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(value);
  // @@protoc_insertion_point(field_set_char:DeviceCommandMsg.sDevId)
}
inline void DeviceCommandMsg::set_sdevid(const char* value, size_t size) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DeviceCommandMsg.sDevId)
}
inline ::std::string* DeviceCommandMsg::mutable_sdevid() {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DeviceCommandMsg.sDevId)
  return sdevid_;
}
inline ::std::string* DeviceCommandMsg::release_sdevid() {
  clear_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sdevid_;
    sdevid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceCommandMsg::set_allocated_sdevid(::std::string* sdevid) {
  if (sdevid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdevid_;
  }
  if (sdevid) {
    set_has_sdevid();
    sdevid_ = sdevid;
  } else {
    clear_has_sdevid();
    sdevid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceCommandMsg.sDevId)
}

// optional string sDevName = 3;
inline bool DeviceCommandMsg::has_sdevname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceCommandMsg::set_has_sdevname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceCommandMsg::clear_has_sdevname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceCommandMsg::clear_sdevname() {
  if (sdevname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_->clear();
  }
  clear_has_sdevname();
}
inline const ::std::string& DeviceCommandMsg::sdevname() const {
  // @@protoc_insertion_point(field_get:DeviceCommandMsg.sDevName)
  return *sdevname_;
}
inline void DeviceCommandMsg::set_sdevname(const ::std::string& value) {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  sdevname_->assign(value);
  // @@protoc_insertion_point(field_set:DeviceCommandMsg.sDevName)
}
inline void DeviceCommandMsg::set_sdevname(const char* value) {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  sdevname_->assign(value);
  // @@protoc_insertion_point(field_set_char:DeviceCommandMsg.sDevName)
}
inline void DeviceCommandMsg::set_sdevname(const char* value, size_t size) {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  sdevname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DeviceCommandMsg.sDevName)
}
inline ::std::string* DeviceCommandMsg::mutable_sdevname() {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DeviceCommandMsg.sDevName)
  return sdevname_;
}
inline ::std::string* DeviceCommandMsg::release_sdevname() {
  clear_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sdevname_;
    sdevname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceCommandMsg::set_allocated_sdevname(::std::string* sdevname) {
  if (sdevname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdevname_;
  }
  if (sdevname) {
    set_has_sdevname();
    sdevname_ = sdevname;
  } else {
    clear_has_sdevname();
    sdevname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceCommandMsg.sDevName)
}

// optional int32 eDevType = 4;
inline bool DeviceCommandMsg::has_edevtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceCommandMsg::set_has_edevtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeviceCommandMsg::clear_has_edevtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeviceCommandMsg::clear_edevtype() {
  edevtype_ = 0;
  clear_has_edevtype();
}
inline ::google::protobuf::int32 DeviceCommandMsg::edevtype() const {
  // @@protoc_insertion_point(field_get:DeviceCommandMsg.eDevType)
  return edevtype_;
}
inline void DeviceCommandMsg::set_edevtype(::google::protobuf::int32 value) {
  set_has_edevtype();
  edevtype_ = value;
  // @@protoc_insertion_point(field_set:DeviceCommandMsg.eDevType)
}

// optional string sOperUser = 5;
inline bool DeviceCommandMsg::has_soperuser() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeviceCommandMsg::set_has_soperuser() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeviceCommandMsg::clear_has_soperuser() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeviceCommandMsg::clear_soperuser() {
  if (soperuser_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soperuser_->clear();
  }
  clear_has_soperuser();
}
inline const ::std::string& DeviceCommandMsg::soperuser() const {
  // @@protoc_insertion_point(field_get:DeviceCommandMsg.sOperUser)
  return *soperuser_;
}
inline void DeviceCommandMsg::set_soperuser(const ::std::string& value) {
  set_has_soperuser();
  if (soperuser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soperuser_ = new ::std::string;
  }
  soperuser_->assign(value);
  // @@protoc_insertion_point(field_set:DeviceCommandMsg.sOperUser)
}
inline void DeviceCommandMsg::set_soperuser(const char* value) {
  set_has_soperuser();
  if (soperuser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soperuser_ = new ::std::string;
  }
  soperuser_->assign(value);
  // @@protoc_insertion_point(field_set_char:DeviceCommandMsg.sOperUser)
}
inline void DeviceCommandMsg::set_soperuser(const char* value, size_t size) {
  set_has_soperuser();
  if (soperuser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soperuser_ = new ::std::string;
  }
  soperuser_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DeviceCommandMsg.sOperUser)
}
inline ::std::string* DeviceCommandMsg::mutable_soperuser() {
  set_has_soperuser();
  if (soperuser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soperuser_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DeviceCommandMsg.sOperUser)
  return soperuser_;
}
inline ::std::string* DeviceCommandMsg::release_soperuser() {
  clear_has_soperuser();
  if (soperuser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = soperuser_;
    soperuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceCommandMsg::set_allocated_soperuser(::std::string* soperuser) {
  if (soperuser_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete soperuser_;
  }
  if (soperuser) {
    set_has_soperuser();
    soperuser_ = soperuser;
  } else {
    clear_has_soperuser();
    soperuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceCommandMsg.sOperUser)
}

// repeated .CommandParam cParams = 6;
inline int DeviceCommandMsg::cparams_size() const {
  return cparams_.size();
}
inline void DeviceCommandMsg::clear_cparams() {
  cparams_.Clear();
}
inline const ::CommandParam& DeviceCommandMsg::cparams(int index) const {
  // @@protoc_insertion_point(field_get:DeviceCommandMsg.cParams)
  return cparams_.Get(index);
}
inline ::CommandParam* DeviceCommandMsg::mutable_cparams(int index) {
  // @@protoc_insertion_point(field_mutable:DeviceCommandMsg.cParams)
  return cparams_.Mutable(index);
}
inline ::CommandParam* DeviceCommandMsg::add_cparams() {
  // @@protoc_insertion_point(field_add:DeviceCommandMsg.cParams)
  return cparams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommandParam >&
DeviceCommandMsg::cparams() const {
  // @@protoc_insertion_point(field_list:DeviceCommandMsg.cParams)
  return cparams_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommandParam >*
DeviceCommandMsg::mutable_cparams() {
  // @@protoc_insertion_point(field_mutable_list:DeviceCommandMsg.cParams)
  return &cparams_;
}

// -------------------------------------------------------------------

// DeviceCommandResultNotify

// required string sStationId = 1;
inline bool DeviceCommandResultNotify::has_sstationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceCommandResultNotify::set_has_sstationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceCommandResultNotify::clear_has_sstationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceCommandResultNotify::clear_sstationid() {
  if (sstationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_->clear();
  }
  clear_has_sstationid();
}
inline const ::std::string& DeviceCommandResultNotify::sstationid() const {
  // @@protoc_insertion_point(field_get:DeviceCommandResultNotify.sStationId)
  return *sstationid_;
}
inline void DeviceCommandResultNotify::set_sstationid(const ::std::string& value) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(value);
  // @@protoc_insertion_point(field_set:DeviceCommandResultNotify.sStationId)
}
inline void DeviceCommandResultNotify::set_sstationid(const char* value) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(value);
  // @@protoc_insertion_point(field_set_char:DeviceCommandResultNotify.sStationId)
}
inline void DeviceCommandResultNotify::set_sstationid(const char* value, size_t size) {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  sstationid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DeviceCommandResultNotify.sStationId)
}
inline ::std::string* DeviceCommandResultNotify::mutable_sstationid() {
  set_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sstationid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DeviceCommandResultNotify.sStationId)
  return sstationid_;
}
inline ::std::string* DeviceCommandResultNotify::release_sstationid() {
  clear_has_sstationid();
  if (sstationid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sstationid_;
    sstationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceCommandResultNotify::set_allocated_sstationid(::std::string* sstationid) {
  if (sstationid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sstationid_;
  }
  if (sstationid) {
    set_has_sstationid();
    sstationid_ = sstationid;
  } else {
    clear_has_sstationid();
    sstationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceCommandResultNotify.sStationId)
}

// required string sDevId = 2;
inline bool DeviceCommandResultNotify::has_sdevid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceCommandResultNotify::set_has_sdevid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceCommandResultNotify::clear_has_sdevid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceCommandResultNotify::clear_sdevid() {
  if (sdevid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_->clear();
  }
  clear_has_sdevid();
}
inline const ::std::string& DeviceCommandResultNotify::sdevid() const {
  // @@protoc_insertion_point(field_get:DeviceCommandResultNotify.sDevId)
  return *sdevid_;
}
inline void DeviceCommandResultNotify::set_sdevid(const ::std::string& value) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(value);
  // @@protoc_insertion_point(field_set:DeviceCommandResultNotify.sDevId)
}
inline void DeviceCommandResultNotify::set_sdevid(const char* value) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(value);
  // @@protoc_insertion_point(field_set_char:DeviceCommandResultNotify.sDevId)
}
inline void DeviceCommandResultNotify::set_sdevid(const char* value, size_t size) {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  sdevid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DeviceCommandResultNotify.sDevId)
}
inline ::std::string* DeviceCommandResultNotify::mutable_sdevid() {
  set_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DeviceCommandResultNotify.sDevId)
  return sdevid_;
}
inline ::std::string* DeviceCommandResultNotify::release_sdevid() {
  clear_has_sdevid();
  if (sdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sdevid_;
    sdevid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceCommandResultNotify::set_allocated_sdevid(::std::string* sdevid) {
  if (sdevid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdevid_;
  }
  if (sdevid) {
    set_has_sdevid();
    sdevid_ = sdevid;
  } else {
    clear_has_sdevid();
    sdevid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceCommandResultNotify.sDevId)
}

// optional int32 eDevType = 3;
inline bool DeviceCommandResultNotify::has_edevtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceCommandResultNotify::set_has_edevtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceCommandResultNotify::clear_has_edevtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceCommandResultNotify::clear_edevtype() {
  edevtype_ = 0;
  clear_has_edevtype();
}
inline ::google::protobuf::int32 DeviceCommandResultNotify::edevtype() const {
  // @@protoc_insertion_point(field_get:DeviceCommandResultNotify.eDevType)
  return edevtype_;
}
inline void DeviceCommandResultNotify::set_edevtype(::google::protobuf::int32 value) {
  set_has_edevtype();
  edevtype_ = value;
  // @@protoc_insertion_point(field_set:DeviceCommandResultNotify.eDevType)
}

// optional string sDevName = 4;
inline bool DeviceCommandResultNotify::has_sdevname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceCommandResultNotify::set_has_sdevname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeviceCommandResultNotify::clear_has_sdevname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeviceCommandResultNotify::clear_sdevname() {
  if (sdevname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_->clear();
  }
  clear_has_sdevname();
}
inline const ::std::string& DeviceCommandResultNotify::sdevname() const {
  // @@protoc_insertion_point(field_get:DeviceCommandResultNotify.sDevName)
  return *sdevname_;
}
inline void DeviceCommandResultNotify::set_sdevname(const ::std::string& value) {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  sdevname_->assign(value);
  // @@protoc_insertion_point(field_set:DeviceCommandResultNotify.sDevName)
}
inline void DeviceCommandResultNotify::set_sdevname(const char* value) {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  sdevname_->assign(value);
  // @@protoc_insertion_point(field_set_char:DeviceCommandResultNotify.sDevName)
}
inline void DeviceCommandResultNotify::set_sdevname(const char* value, size_t size) {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  sdevname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DeviceCommandResultNotify.sDevName)
}
inline ::std::string* DeviceCommandResultNotify::mutable_sdevname() {
  set_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sdevname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DeviceCommandResultNotify.sDevName)
  return sdevname_;
}
inline ::std::string* DeviceCommandResultNotify::release_sdevname() {
  clear_has_sdevname();
  if (sdevname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sdevname_;
    sdevname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceCommandResultNotify::set_allocated_sdevname(::std::string* sdevname) {
  if (sdevname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sdevname_;
  }
  if (sdevname) {
    set_has_sdevname();
    sdevname_ = sdevname;
  } else {
    clear_has_sdevname();
    sdevname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceCommandResultNotify.sDevName)
}

// optional .e_ErrorCode eErrorId = 5;
inline bool DeviceCommandResultNotify::has_eerrorid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeviceCommandResultNotify::set_has_eerrorid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeviceCommandResultNotify::clear_has_eerrorid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeviceCommandResultNotify::clear_eerrorid() {
  eerrorid_ = 0;
  clear_has_eerrorid();
}
inline ::e_ErrorCode DeviceCommandResultNotify::eerrorid() const {
  // @@protoc_insertion_point(field_get:DeviceCommandResultNotify.eErrorId)
  return static_cast< ::e_ErrorCode >(eerrorid_);
}
inline void DeviceCommandResultNotify::set_eerrorid(::e_ErrorCode value) {
  assert(::e_ErrorCode_IsValid(value));
  set_has_eerrorid();
  eerrorid_ = value;
  // @@protoc_insertion_point(field_set:DeviceCommandResultNotify.eErrorId)
}

// optional string sOperUser = 6;
inline bool DeviceCommandResultNotify::has_soperuser() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeviceCommandResultNotify::set_has_soperuser() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DeviceCommandResultNotify::clear_has_soperuser() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DeviceCommandResultNotify::clear_soperuser() {
  if (soperuser_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soperuser_->clear();
  }
  clear_has_soperuser();
}
inline const ::std::string& DeviceCommandResultNotify::soperuser() const {
  // @@protoc_insertion_point(field_get:DeviceCommandResultNotify.sOperUser)
  return *soperuser_;
}
inline void DeviceCommandResultNotify::set_soperuser(const ::std::string& value) {
  set_has_soperuser();
  if (soperuser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soperuser_ = new ::std::string;
  }
  soperuser_->assign(value);
  // @@protoc_insertion_point(field_set:DeviceCommandResultNotify.sOperUser)
}
inline void DeviceCommandResultNotify::set_soperuser(const char* value) {
  set_has_soperuser();
  if (soperuser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soperuser_ = new ::std::string;
  }
  soperuser_->assign(value);
  // @@protoc_insertion_point(field_set_char:DeviceCommandResultNotify.sOperUser)
}
inline void DeviceCommandResultNotify::set_soperuser(const char* value, size_t size) {
  set_has_soperuser();
  if (soperuser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soperuser_ = new ::std::string;
  }
  soperuser_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DeviceCommandResultNotify.sOperUser)
}
inline ::std::string* DeviceCommandResultNotify::mutable_soperuser() {
  set_has_soperuser();
  if (soperuser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    soperuser_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DeviceCommandResultNotify.sOperUser)
  return soperuser_;
}
inline ::std::string* DeviceCommandResultNotify::release_soperuser() {
  clear_has_soperuser();
  if (soperuser_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = soperuser_;
    soperuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeviceCommandResultNotify::set_allocated_soperuser(::std::string* soperuser) {
  if (soperuser_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete soperuser_;
  }
  if (soperuser) {
    set_has_soperuser();
    soperuser_ = soperuser;
  } else {
    clear_has_soperuser();
    soperuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DeviceCommandResultNotify.sOperUser)
}

// repeated .CommandParam cParams = 7;
inline int DeviceCommandResultNotify::cparams_size() const {
  return cparams_.size();
}
inline void DeviceCommandResultNotify::clear_cparams() {
  cparams_.Clear();
}
inline const ::CommandParam& DeviceCommandResultNotify::cparams(int index) const {
  // @@protoc_insertion_point(field_get:DeviceCommandResultNotify.cParams)
  return cparams_.Get(index);
}
inline ::CommandParam* DeviceCommandResultNotify::mutable_cparams(int index) {
  // @@protoc_insertion_point(field_mutable:DeviceCommandResultNotify.cParams)
  return cparams_.Mutable(index);
}
inline ::CommandParam* DeviceCommandResultNotify::add_cparams() {
  // @@protoc_insertion_point(field_add:DeviceCommandResultNotify.cParams)
  return cparams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommandParam >&
DeviceCommandResultNotify::cparams() const {
  // @@protoc_insertion_point(field_list:DeviceCommandResultNotify.cParams)
  return cparams_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommandParam >*
DeviceCommandResultNotify::mutable_cparams() {
  // @@protoc_insertion_point(field_mutable_list:DeviceCommandResultNotify.cParams)
  return &cparams_;
}

// -------------------------------------------------------------------

// WebSocketMessage

// required int32 nMsgType = 1;
inline bool WebSocketMessage::has_nmsgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WebSocketMessage::set_has_nmsgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WebSocketMessage::clear_has_nmsgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WebSocketMessage::clear_nmsgtype() {
  nmsgtype_ = 0;
  clear_has_nmsgtype();
}
inline ::google::protobuf::int32 WebSocketMessage::nmsgtype() const {
  // @@protoc_insertion_point(field_get:WebSocketMessage.nMsgType)
  return nmsgtype_;
}
inline void WebSocketMessage::set_nmsgtype(::google::protobuf::int32 value) {
  set_has_nmsgtype();
  nmsgtype_ = value;
  // @@protoc_insertion_point(field_set:WebSocketMessage.nMsgType)
}

// required string sMsgType = 2;
inline bool WebSocketMessage::has_smsgtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WebSocketMessage::set_has_smsgtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WebSocketMessage::clear_has_smsgtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WebSocketMessage::clear_smsgtype() {
  if (smsgtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    smsgtype_->clear();
  }
  clear_has_smsgtype();
}
inline const ::std::string& WebSocketMessage::smsgtype() const {
  // @@protoc_insertion_point(field_get:WebSocketMessage.sMsgType)
  return *smsgtype_;
}
inline void WebSocketMessage::set_smsgtype(const ::std::string& value) {
  set_has_smsgtype();
  if (smsgtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    smsgtype_ = new ::std::string;
  }
  smsgtype_->assign(value);
  // @@protoc_insertion_point(field_set:WebSocketMessage.sMsgType)
}
inline void WebSocketMessage::set_smsgtype(const char* value) {
  set_has_smsgtype();
  if (smsgtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    smsgtype_ = new ::std::string;
  }
  smsgtype_->assign(value);
  // @@protoc_insertion_point(field_set_char:WebSocketMessage.sMsgType)
}
inline void WebSocketMessage::set_smsgtype(const char* value, size_t size) {
  set_has_smsgtype();
  if (smsgtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    smsgtype_ = new ::std::string;
  }
  smsgtype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:WebSocketMessage.sMsgType)
}
inline ::std::string* WebSocketMessage::mutable_smsgtype() {
  set_has_smsgtype();
  if (smsgtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    smsgtype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:WebSocketMessage.sMsgType)
  return smsgtype_;
}
inline ::std::string* WebSocketMessage::release_smsgtype() {
  clear_has_smsgtype();
  if (smsgtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = smsgtype_;
    smsgtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WebSocketMessage::set_allocated_smsgtype(::std::string* smsgtype) {
  if (smsgtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete smsgtype_;
  }
  if (smsgtype) {
    set_has_smsgtype();
    smsgtype_ = smsgtype;
  } else {
    clear_has_smsgtype();
    smsgtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:WebSocketMessage.sMsgType)
}

// optional .LoginReq msgLoginReq = 3;
inline bool WebSocketMessage::has_msgloginreq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WebSocketMessage::set_has_msgloginreq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WebSocketMessage::clear_has_msgloginreq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WebSocketMessage::clear_msgloginreq() {
  if (msgloginreq_ != NULL) msgloginreq_->::LoginReq::Clear();
  clear_has_msgloginreq();
}
inline const ::LoginReq& WebSocketMessage::msgloginreq() const {
  // @@protoc_insertion_point(field_get:WebSocketMessage.msgLoginReq)
  return msgloginreq_ != NULL ? *msgloginreq_ : *default_instance_->msgloginreq_;
}
inline ::LoginReq* WebSocketMessage::mutable_msgloginreq() {
  set_has_msgloginreq();
  if (msgloginreq_ == NULL) msgloginreq_ = new ::LoginReq;
  // @@protoc_insertion_point(field_mutable:WebSocketMessage.msgLoginReq)
  return msgloginreq_;
}
inline ::LoginReq* WebSocketMessage::release_msgloginreq() {
  clear_has_msgloginreq();
  ::LoginReq* temp = msgloginreq_;
  msgloginreq_ = NULL;
  return temp;
}
inline void WebSocketMessage::set_allocated_msgloginreq(::LoginReq* msgloginreq) {
  delete msgloginreq_;
  msgloginreq_ = msgloginreq;
  if (msgloginreq) {
    set_has_msgloginreq();
  } else {
    clear_has_msgloginreq();
  }
  // @@protoc_insertion_point(field_set_allocated:WebSocketMessage.msgLoginReq)
}

// optional .LoginAck msgLoginAck = 4;
inline bool WebSocketMessage::has_msgloginack() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WebSocketMessage::set_has_msgloginack() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WebSocketMessage::clear_has_msgloginack() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WebSocketMessage::clear_msgloginack() {
  if (msgloginack_ != NULL) msgloginack_->::LoginAck::Clear();
  clear_has_msgloginack();
}
inline const ::LoginAck& WebSocketMessage::msgloginack() const {
  // @@protoc_insertion_point(field_get:WebSocketMessage.msgLoginAck)
  return msgloginack_ != NULL ? *msgloginack_ : *default_instance_->msgloginack_;
}
inline ::LoginAck* WebSocketMessage::mutable_msgloginack() {
  set_has_msgloginack();
  if (msgloginack_ == NULL) msgloginack_ = new ::LoginAck;
  // @@protoc_insertion_point(field_mutable:WebSocketMessage.msgLoginAck)
  return msgloginack_;
}
inline ::LoginAck* WebSocketMessage::release_msgloginack() {
  clear_has_msgloginack();
  ::LoginAck* temp = msgloginack_;
  msgloginack_ = NULL;
  return temp;
}
inline void WebSocketMessage::set_allocated_msgloginack(::LoginAck* msgloginack) {
  delete msgloginack_;
  msgloginack_ = msgloginack;
  if (msgloginack) {
    set_has_msgloginack();
  } else {
    clear_has_msgloginack();
  }
  // @@protoc_insertion_point(field_set_allocated:WebSocketMessage.msgLoginAck)
}

// optional .DevDataNotify monitorDataNty = 5;
inline bool WebSocketMessage::has_monitordatanty() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WebSocketMessage::set_has_monitordatanty() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WebSocketMessage::clear_has_monitordatanty() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WebSocketMessage::clear_monitordatanty() {
  if (monitordatanty_ != NULL) monitordatanty_->::DevDataNotify::Clear();
  clear_has_monitordatanty();
}
inline const ::DevDataNotify& WebSocketMessage::monitordatanty() const {
  // @@protoc_insertion_point(field_get:WebSocketMessage.monitorDataNty)
  return monitordatanty_ != NULL ? *monitordatanty_ : *default_instance_->monitordatanty_;
}
inline ::DevDataNotify* WebSocketMessage::mutable_monitordatanty() {
  set_has_monitordatanty();
  if (monitordatanty_ == NULL) monitordatanty_ = new ::DevDataNotify;
  // @@protoc_insertion_point(field_mutable:WebSocketMessage.monitorDataNty)
  return monitordatanty_;
}
inline ::DevDataNotify* WebSocketMessage::release_monitordatanty() {
  clear_has_monitordatanty();
  ::DevDataNotify* temp = monitordatanty_;
  monitordatanty_ = NULL;
  return temp;
}
inline void WebSocketMessage::set_allocated_monitordatanty(::DevDataNotify* monitordatanty) {
  delete monitordatanty_;
  monitordatanty_ = monitordatanty;
  if (monitordatanty) {
    set_has_monitordatanty();
  } else {
    clear_has_monitordatanty();
  }
  // @@protoc_insertion_point(field_set_allocated:WebSocketMessage.monitorDataNty)
}

// optional .DevNetStatusNotify devNetStatusNty = 6;
inline bool WebSocketMessage::has_devnetstatusnty() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WebSocketMessage::set_has_devnetstatusnty() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WebSocketMessage::clear_has_devnetstatusnty() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WebSocketMessage::clear_devnetstatusnty() {
  if (devnetstatusnty_ != NULL) devnetstatusnty_->::DevNetStatusNotify::Clear();
  clear_has_devnetstatusnty();
}
inline const ::DevNetStatusNotify& WebSocketMessage::devnetstatusnty() const {
  // @@protoc_insertion_point(field_get:WebSocketMessage.devNetStatusNty)
  return devnetstatusnty_ != NULL ? *devnetstatusnty_ : *default_instance_->devnetstatusnty_;
}
inline ::DevNetStatusNotify* WebSocketMessage::mutable_devnetstatusnty() {
  set_has_devnetstatusnty();
  if (devnetstatusnty_ == NULL) devnetstatusnty_ = new ::DevNetStatusNotify;
  // @@protoc_insertion_point(field_mutable:WebSocketMessage.devNetStatusNty)
  return devnetstatusnty_;
}
inline ::DevNetStatusNotify* WebSocketMessage::release_devnetstatusnty() {
  clear_has_devnetstatusnty();
  ::DevNetStatusNotify* temp = devnetstatusnty_;
  devnetstatusnty_ = NULL;
  return temp;
}
inline void WebSocketMessage::set_allocated_devnetstatusnty(::DevNetStatusNotify* devnetstatusnty) {
  delete devnetstatusnty_;
  devnetstatusnty_ = devnetstatusnty;
  if (devnetstatusnty) {
    set_has_devnetstatusnty();
  } else {
    clear_has_devnetstatusnty();
  }
  // @@protoc_insertion_point(field_set_allocated:WebSocketMessage.devNetStatusNty)
}

// optional .DevWorkStatusNotify devWorkStatusNty = 7;
inline bool WebSocketMessage::has_devworkstatusnty() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WebSocketMessage::set_has_devworkstatusnty() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WebSocketMessage::clear_has_devworkstatusnty() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WebSocketMessage::clear_devworkstatusnty() {
  if (devworkstatusnty_ != NULL) devworkstatusnty_->::DevWorkStatusNotify::Clear();
  clear_has_devworkstatusnty();
}
inline const ::DevWorkStatusNotify& WebSocketMessage::devworkstatusnty() const {
  // @@protoc_insertion_point(field_get:WebSocketMessage.devWorkStatusNty)
  return devworkstatusnty_ != NULL ? *devworkstatusnty_ : *default_instance_->devworkstatusnty_;
}
inline ::DevWorkStatusNotify* WebSocketMessage::mutable_devworkstatusnty() {
  set_has_devworkstatusnty();
  if (devworkstatusnty_ == NULL) devworkstatusnty_ = new ::DevWorkStatusNotify;
  // @@protoc_insertion_point(field_mutable:WebSocketMessage.devWorkStatusNty)
  return devworkstatusnty_;
}
inline ::DevWorkStatusNotify* WebSocketMessage::release_devworkstatusnty() {
  clear_has_devworkstatusnty();
  ::DevWorkStatusNotify* temp = devworkstatusnty_;
  devworkstatusnty_ = NULL;
  return temp;
}
inline void WebSocketMessage::set_allocated_devworkstatusnty(::DevWorkStatusNotify* devworkstatusnty) {
  delete devworkstatusnty_;
  devworkstatusnty_ = devworkstatusnty;
  if (devworkstatusnty) {
    set_has_devworkstatusnty();
  } else {
    clear_has_devworkstatusnty();
  }
  // @@protoc_insertion_point(field_set_allocated:WebSocketMessage.devWorkStatusNty)
}

// optional .DevAlarmStatusNotify devAlarmStatusNty = 8;
inline bool WebSocketMessage::has_devalarmstatusnty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WebSocketMessage::set_has_devalarmstatusnty() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WebSocketMessage::clear_has_devalarmstatusnty() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WebSocketMessage::clear_devalarmstatusnty() {
  if (devalarmstatusnty_ != NULL) devalarmstatusnty_->::DevAlarmStatusNotify::Clear();
  clear_has_devalarmstatusnty();
}
inline const ::DevAlarmStatusNotify& WebSocketMessage::devalarmstatusnty() const {
  // @@protoc_insertion_point(field_get:WebSocketMessage.devAlarmStatusNty)
  return devalarmstatusnty_ != NULL ? *devalarmstatusnty_ : *default_instance_->devalarmstatusnty_;
}
inline ::DevAlarmStatusNotify* WebSocketMessage::mutable_devalarmstatusnty() {
  set_has_devalarmstatusnty();
  if (devalarmstatusnty_ == NULL) devalarmstatusnty_ = new ::DevAlarmStatusNotify;
  // @@protoc_insertion_point(field_mutable:WebSocketMessage.devAlarmStatusNty)
  return devalarmstatusnty_;
}
inline ::DevAlarmStatusNotify* WebSocketMessage::release_devalarmstatusnty() {
  clear_has_devalarmstatusnty();
  ::DevAlarmStatusNotify* temp = devalarmstatusnty_;
  devalarmstatusnty_ = NULL;
  return temp;
}
inline void WebSocketMessage::set_allocated_devalarmstatusnty(::DevAlarmStatusNotify* devalarmstatusnty) {
  delete devalarmstatusnty_;
  devalarmstatusnty_ = devalarmstatusnty;
  if (devalarmstatusnty) {
    set_has_devalarmstatusnty();
  } else {
    clear_has_devalarmstatusnty();
  }
  // @@protoc_insertion_point(field_set_allocated:WebSocketMessage.devAlarmStatusNty)
}

// optional .DeviceCommandResultNotify commandResultNty = 9;
inline bool WebSocketMessage::has_commandresultnty() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WebSocketMessage::set_has_commandresultnty() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WebSocketMessage::clear_has_commandresultnty() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WebSocketMessage::clear_commandresultnty() {
  if (commandresultnty_ != NULL) commandresultnty_->::DeviceCommandResultNotify::Clear();
  clear_has_commandresultnty();
}
inline const ::DeviceCommandResultNotify& WebSocketMessage::commandresultnty() const {
  // @@protoc_insertion_point(field_get:WebSocketMessage.commandResultNty)
  return commandresultnty_ != NULL ? *commandresultnty_ : *default_instance_->commandresultnty_;
}
inline ::DeviceCommandResultNotify* WebSocketMessage::mutable_commandresultnty() {
  set_has_commandresultnty();
  if (commandresultnty_ == NULL) commandresultnty_ = new ::DeviceCommandResultNotify;
  // @@protoc_insertion_point(field_mutable:WebSocketMessage.commandResultNty)
  return commandresultnty_;
}
inline ::DeviceCommandResultNotify* WebSocketMessage::release_commandresultnty() {
  clear_has_commandresultnty();
  ::DeviceCommandResultNotify* temp = commandresultnty_;
  commandresultnty_ = NULL;
  return temp;
}
inline void WebSocketMessage::set_allocated_commandresultnty(::DeviceCommandResultNotify* commandresultnty) {
  delete commandresultnty_;
  commandresultnty_ = commandresultnty;
  if (commandresultnty) {
    set_has_commandresultnty();
  } else {
    clear_has_commandresultnty();
  }
  // @@protoc_insertion_point(field_set_allocated:WebSocketMessage.commandResultNty)
}

// optional .TurnOnDevMsg msgTurnOnReq = 10;
inline bool WebSocketMessage::has_msgturnonreq() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WebSocketMessage::set_has_msgturnonreq() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WebSocketMessage::clear_has_msgturnonreq() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WebSocketMessage::clear_msgturnonreq() {
  if (msgturnonreq_ != NULL) msgturnonreq_->::TurnOnDevMsg::Clear();
  clear_has_msgturnonreq();
}
inline const ::TurnOnDevMsg& WebSocketMessage::msgturnonreq() const {
  // @@protoc_insertion_point(field_get:WebSocketMessage.msgTurnOnReq)
  return msgturnonreq_ != NULL ? *msgturnonreq_ : *default_instance_->msgturnonreq_;
}
inline ::TurnOnDevMsg* WebSocketMessage::mutable_msgturnonreq() {
  set_has_msgturnonreq();
  if (msgturnonreq_ == NULL) msgturnonreq_ = new ::TurnOnDevMsg;
  // @@protoc_insertion_point(field_mutable:WebSocketMessage.msgTurnOnReq)
  return msgturnonreq_;
}
inline ::TurnOnDevMsg* WebSocketMessage::release_msgturnonreq() {
  clear_has_msgturnonreq();
  ::TurnOnDevMsg* temp = msgturnonreq_;
  msgturnonreq_ = NULL;
  return temp;
}
inline void WebSocketMessage::set_allocated_msgturnonreq(::TurnOnDevMsg* msgturnonreq) {
  delete msgturnonreq_;
  msgturnonreq_ = msgturnonreq;
  if (msgturnonreq) {
    set_has_msgturnonreq();
  } else {
    clear_has_msgturnonreq();
  }
  // @@protoc_insertion_point(field_set_allocated:WebSocketMessage.msgTurnOnReq)
}

// optional .TurnOffDevMsg msgTurnOffNty = 11;
inline bool WebSocketMessage::has_msgturnoffnty() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WebSocketMessage::set_has_msgturnoffnty() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WebSocketMessage::clear_has_msgturnoffnty() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WebSocketMessage::clear_msgturnoffnty() {
  if (msgturnoffnty_ != NULL) msgturnoffnty_->::TurnOffDevMsg::Clear();
  clear_has_msgturnoffnty();
}
inline const ::TurnOffDevMsg& WebSocketMessage::msgturnoffnty() const {
  // @@protoc_insertion_point(field_get:WebSocketMessage.msgTurnOffNty)
  return msgturnoffnty_ != NULL ? *msgturnoffnty_ : *default_instance_->msgturnoffnty_;
}
inline ::TurnOffDevMsg* WebSocketMessage::mutable_msgturnoffnty() {
  set_has_msgturnoffnty();
  if (msgturnoffnty_ == NULL) msgturnoffnty_ = new ::TurnOffDevMsg;
  // @@protoc_insertion_point(field_mutable:WebSocketMessage.msgTurnOffNty)
  return msgturnoffnty_;
}
inline ::TurnOffDevMsg* WebSocketMessage::release_msgturnoffnty() {
  clear_has_msgturnoffnty();
  ::TurnOffDevMsg* temp = msgturnoffnty_;
  msgturnoffnty_ = NULL;
  return temp;
}
inline void WebSocketMessage::set_allocated_msgturnoffnty(::TurnOffDevMsg* msgturnoffnty) {
  delete msgturnoffnty_;
  msgturnoffnty_ = msgturnoffnty;
  if (msgturnoffnty) {
    set_has_msgturnoffnty();
  } else {
    clear_has_msgturnoffnty();
  }
  // @@protoc_insertion_point(field_set_allocated:WebSocketMessage.msgTurnOffNty)
}

// optional .DeviceCommandMsg msgCommandReq = 12;
inline bool WebSocketMessage::has_msgcommandreq() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WebSocketMessage::set_has_msgcommandreq() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WebSocketMessage::clear_has_msgcommandreq() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WebSocketMessage::clear_msgcommandreq() {
  if (msgcommandreq_ != NULL) msgcommandreq_->::DeviceCommandMsg::Clear();
  clear_has_msgcommandreq();
}
inline const ::DeviceCommandMsg& WebSocketMessage::msgcommandreq() const {
  // @@protoc_insertion_point(field_get:WebSocketMessage.msgCommandReq)
  return msgcommandreq_ != NULL ? *msgcommandreq_ : *default_instance_->msgcommandreq_;
}
inline ::DeviceCommandMsg* WebSocketMessage::mutable_msgcommandreq() {
  set_has_msgcommandreq();
  if (msgcommandreq_ == NULL) msgcommandreq_ = new ::DeviceCommandMsg;
  // @@protoc_insertion_point(field_mutable:WebSocketMessage.msgCommandReq)
  return msgcommandreq_;
}
inline ::DeviceCommandMsg* WebSocketMessage::release_msgcommandreq() {
  clear_has_msgcommandreq();
  ::DeviceCommandMsg* temp = msgcommandreq_;
  msgcommandreq_ = NULL;
  return temp;
}
inline void WebSocketMessage::set_allocated_msgcommandreq(::DeviceCommandMsg* msgcommandreq) {
  delete msgcommandreq_;
  msgcommandreq_ = msgcommandreq;
  if (msgcommandreq) {
    set_has_msgcommandreq();
  } else {
    clear_has_msgcommandreq();
  }
  // @@protoc_insertion_point(field_set_allocated:WebSocketMessage.msgCommandReq)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DevNetStatus_e_NetStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DevNetStatus_e_NetStatus>() {
  return ::DevNetStatus_e_NetStatus_descriptor();
}
template <> struct is_proto_enum< ::DevWorkStatus_e_WorkStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DevWorkStatus_e_WorkStatus>() {
  return ::DevWorkStatus_e_WorkStatus_descriptor();
}
template <> struct is_proto_enum< ::e_ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::e_ErrorCode>() {
  return ::e_ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::e_CellType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::e_CellType>() {
  return ::e_CellType_descriptor();
}
template <> struct is_proto_enum< ::e_AlarmStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::e_AlarmStatus>() {
  return ::e_AlarmStatus_descriptor();
}
template <> struct is_proto_enum< ::e_AlarmMod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::e_AlarmMod>() {
  return ::e_AlarmMod_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_2eproto__INCLUDED
